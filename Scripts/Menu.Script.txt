#RequireContext CManiaAppTitle

#Include "TextLib" as TextLib
#Include "ColorLib" as ColorLib
#Include "TimeLib" as TimeLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Auth.Script.txt" as Auth
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings

#Include "Libs/Campaign/Menu/Campaign.Script.txt" as Menu_Campaign
#Include "Libs/Maker/Menu/Title.Script.txt" as Menu_Title
#Include "Libs/Maker/Menu/Builder.Script.txt" as Menu_Builder
#Include "Libs/Maker/Menu/Modifier.Script.txt" as Menu_Modifier

#Include "Libs/Challenge/Menu/AuthBeta.Script.txt" as Menu_AuthBeta
#Include "Libs/Challenge/Devmode.Script.txt" as Devmode
#Include "Libs/Challenge/Menu/Release.Script.txt" as Menu_Release

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status

#Setting S_Devmode False

main() {
	while(True) { // Restart mechanism
		Settings::Restart(False);
		
		//TitleControl.OpenEditor(CTitleControl::EEditorType::InterfaceDesigner);
		//TitleControl.EditNewMap("Valley", "", "", "", "", "", "");
		
		Dictionary::SetTranslationFolder("Media/Translations");
		//Dictionary::SetTranslationLanguage(Settings::Get().Language);
		Dictionary::SetTranslationLanguage("en");
		
		declare Status = Service_Status::CheckStatus(LocalUser);
		while(!Status.Global.Running) {
			sleep(10000);
			Status = Service_Status::CheckStatus(LocalUser);
		}
		
		Auth::Start();
		
		Menu_AuthBeta::Start();
		while(!Menu_AuthBeta::GetAccess().Pass) {
			foreach(Event,PendingEvents) {
				Menu_AuthBeta::Event(Event);
			}
		
			Menu_AuthBeta::Async();
			
			Auth::Loop();
			Menu_AuthBeta::Loop();
			yield;
		}
		Menu_AuthBeta::End();
		
		Menu_Release::Start();
		wait(Menu_Release::Loop());
		
		Menu_Title::Start();
		Menu_Builder::Start();
		Menu_Modifier::Start();
		Menu_Campaign::Start();
		
		if(S_Devmode) {
			Devmode::Start();
		}
		
		//EnableMenuNavigationInputs = True;
	
		while(!Settings::IsRestarting()) {
			foreach(Event,PendingEvents) {
				Layers::Event(Event);
				Menu_Title::Event(Event);
				Menu_Builder::Event(Event);
				Menu_Modifier::Event(Event);
				Menu_Campaign::Event(Event);
			}
	
			Auth::Loop();
			Menu_Title::Loop();
			Menu_Builder::Loop();
			Menu_Modifier::Loop();
			Menu_Campaign::Loop();
		
			yield;
		}
		
		Layers::DestroyAll();
		UILayerDestroyAll();
	}
}