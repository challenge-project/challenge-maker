#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Map.Script.txt" as Map
#Include "Libs/BigBang1112/Time.Script.txt" as Time
#Include "Libs/BigBang1112/Task.Script.txt" as Task

#Include "Libs/Challenge/Vehicle.Script.txt" as Vehicle
#Include "Libs/Challenge/LoadMap.Script.txt" as LoadMap

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status

#Include "Libs/Maker/MakerBase.Script.txt" as MakerBase

#Struct SMetadata {
	Text Name;
	Text AuthorLogin;
	Text AuthorNickname;
	Text Description;
	Text CompatibleCollections;
}

#Struct SScriptInfo {
	Text Name;
	Text Type;
	SMetadata Metadata;
}

#Struct SChallenge {
	Text Name;
	Text Type;
}

#Struct SRecord {
	Text Login;
	Text Nickname;
	Integer Time;
	Real Distance;
	Integer Stunts;
	Text Driven;
}

#Struct STitleMapRecordZone {
	Integer Count;
	Integer Best;
	Integer Rank;
	Integer RankSP;
	Integer SP;
	Integer AP;
	Real WRPB;
}

#Struct STitleMapRecord {
	Real Difficulty;
	Real Quality;
	Integer PB;
	STitleMapRecordZone[Text] Zones;
	Text[] Star;
}

#Struct STitleMap {
	Text Name;
	STitleMapRecord[Text] Cars;
}

#Struct STitleProgress {
	Integer Records;
	Integer SP;
	Integer AP;
	Real WRPB;
	Real Time; // in seconds
	STitleMap[Text][Text] Maps;
}

Boolean RequestTitleProgress() {
	declare Text CHALLENGE_TOKEN for LocalUser;
	return Http::AsyncPOST("TITLE", Service_Status::LastStatus(LocalUser).Global.Service^"/title.php?title="^LoadedTitle.TitleId, CHALLENGE_TOKEN); // change this to LoadedTitle.TitleId
}

Void UpdateChallenges() {
	declare SChallenge[][] Challenges for This;
	declare SScriptInfo[][] Scripts_Campaign for Layers::Page("Campaign");
	declare SScriptInfo[][] Scripts_MapMenu for Layers::Page("MapMenu");
	Scripts_Campaign.clear();
	Scripts_MapMenu.clear();
	
	foreach(Challenge, Challenges) {
		declare SScriptInfo[] ChallengeScripts;
		foreach(SubChallenge, Challenge) {
			ChallengeScripts.add(MakerBase::SChallengeToSScriptInfo(SubChallenge));
		}
		Scripts_Campaign.add(ChallengeScripts);
		Scripts_MapMenu.add(ChallengeScripts);
	}
}

Void Init() {
	Layers::Create("Campaign", "");
	//MakerBase::UpdateBuilder("Campaign", "Media/Manialinks/Campaign/Campaign", 0, 0, False, []);
	yield;
	Layers::Create("MapMenu", Manialink::FromFile("Media/Manialinks/Campaign/MapMenu", True, ["Audio","SlideText"], Settings::Get().Theme));
	
	declare Vehicle::SVehicle[] Vehicles for This;
	Vehicles = Vehicle::FromFile("Media/Vehicle.json");
	declare Text[] Cars for Layers::Page("MapMenu");
	foreach(Vehicle,Vehicles) Cars.add(Vehicle.Name);
	
	UpdateChallenges();
}

Void InitBuilder() {
	declare SScriptInfo[][] Scripts_Campaign for Layers::Page("Campaign");
	MakerBase::UpdateBuilder("Campaign", "Media/Manialinks/Campaign/Campaign", 0, 0, False, MakerBase::ChallengesToTextArray(Scripts_Campaign));
}

declare Text MapName;
declare Text MapUid;
declare Text Challenge;
declare Text Zone;
declare Text CurrentCar;

declare Text PlayMap;

Void Start() {
	declare Success = RequestTitleProgress();
	CurrentCar = "";
}

declare Text MapFileToStart;

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(Event.CustomEventLayer) {
			case Layers::Get("Campaign"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Layers::Hide("Campaign", True);
						Layers::Show("EditTitle", True);
						Layers::Show("ManageTitle", True);
					}
					case "Map": {
						Layers::Show("MapMenu", True);

						MapName = Event.CustomEventData[0];
						MapUid = Event.CustomEventData[2];
						Challenge = Event.CustomEventData[3];
						
						declare Vehicle::SVehicle[] Vehicles for This;
						
						declare CTaskResult_NaturalLeaderBoardInfoList[Text] Leaderboards for This;
						foreach(LB in Leaderboards) {
							if(LB != Null) {
								if(LB.IsProcessing)
									LB.Cancel();
								ScoreMgr.TaskResult_Release(LB.Id);
							}
						}
						Leaderboards.clear();
						
						declare Text[] VehicleNames;
						foreach(Vehicle,Vehicles) {
							VehicleNames.add(Vehicle.Name);
							declare Request = ScoreMgr.MapLeaderBoard_GetPlayerList(NullId, MapUid, Vehicle.Name, "World", 0, 20);
							if(Request == Null)
								log("Records on " ^ MapUid ^ " with car " ^ Vehicle.Name ^ " are not available in this title pack.");
							else
								Leaderboards[Vehicle.Name] = Request;
						}

						declare Boolean Leaderboards_Request for This;
						Leaderboards_Request = True;
						
						Zone = "World";
						declare Success = Http::AsyncGET("VALIDATION", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/validation.php?uid={{{MapUid}}}&car={{{TextLib::Join(",",VehicleNames)}}}""");
						declare Success2 = Http::AsyncGET("RECORDS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/records.php?uid={{{MapUid}}}&car={{{TextLib::Join(",",VehicleNames)}}}&zone=World""");

						declare Text[] Data;
						foreach(D,Event.CustomEventData) Data.add(D);
						Layers::SendEvent("MapMenu", "Map", Data);
					}
					case "PlayMap": {
						PlayMap = Event.CustomEventData[0];
					}
				}
			}
			case Layers::Get("MapMenu"): {
				switch(Event.CustomEventType) {
					case "Start": {
						declare FileName = Event.CustomEventData[0];
						MapFileToStart = FileName;
					}
					case "Exit": {
						Layers::Hide("MapMenu", True);
					}
					case "ViewGhost": {
						declare Text Ghost_Url for LocalUser;
						Ghost_Url = Event.CustomEventData[0];
						declare Text Ghost_FileName for LocalUser;
						Ghost_FileName = Event.CustomEventData[1];
						declare Text Ghost_MapFile for LocalUser;
						Ghost_MapFile = Event.CustomEventData[2];
						
						Map::AsyncMapInfo(Ghost_MapFile);
					}
					case "ChangeZone": {
						Zone = Event.CustomEventData[0];
						MapUid = Event.CustomEventData[1];
						
						declare Vehicle::SVehicle[] Vehicles for This;
						
						declare Text[] VehicleNames;
						foreach(Vehicle,Vehicles) {
							VehicleNames.add(Vehicle.Name);
						}

						Http::Destroy("RECORDS");
						declare Success = Http::AsyncGET("RECORDS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/records.php?uid={{{MapUid}}}&car={{{TextLib::Join(",",VehicleNames)}}}&zone={{{Zone}}}""");
					}
					case "ChangedCar": {
						declare Boolean Leaderboards_Request for This;
						Leaderboards_Request = True;
						CurrentCar = Event.CustomEventData[0];
					}
				}
			}
		}
	}
}

Void Async() {
	if(Http::IsCompleted("VALIDATION")) {
		if(Http::IsSuccessful("VALIDATION")) {
			declare SRecord[Text] Validations for Layers::Page("MapMenu");
			declare Success = Validations.fromjson(Http::GetResult("VALIDATION"));
			
			Layers::SendEvent("MapMenu", "Validation");
		}
		else {
			
		}
		Http::Destroy("VALIDATION");
	}
	if(Http::IsCompleted("RECORDS")) {
		if(Http::IsSuccessful("RECORDS")) {
			declare SRecord[][Text] Records for Layers::Page("MapMenu");
			declare Success = Records.fromjson(Http::GetResult("RECORDS"));

			declare CTaskResult_NaturalLeaderBoardInfoList[Text] Leaderboards for This;
			//declare CTaskResult_NaturalLeaderBoardInfoList[Text] LeaderboardsAdditional for This;
			foreach(LB in Leaderboards) {
				if(LB != Null) {
					if(LB.IsProcessing)
						LB.Cancel();
					ScoreMgr.TaskResult_Release(LB.Id);
				}
			}
			Leaderboards.clear();
			
			declare Vehicle::SVehicle[] Vehicles for This;
			foreach(Vehicle in Vehicles) {
				declare Request = ScoreMgr.MapLeaderBoard_GetPlayerList(NullId, MapUid, Vehicle.Name, Zone, 1, 10);
				declare RequestAdditional = ScoreMgr.MapLeaderBoard_GetPlayerList(NullId, MapUid, Vehicle.Name, Zone, 10, 10);
				if(Request == Null || RequestAdditional == Null)
					log("Records on " ^ MapUid ^ " with car " ^ Vehicle.Name ^ " in "^Zone^" are not available in this title pack.");
				else {
					Leaderboards[Vehicle.Name] = Request;
					//LeaderboardsAdditional[Vehicle] = RequestAdditional;
				}
			}

			declare Boolean Leaderboards_Request for This;
			Leaderboards_Request = True;
			
			Layers::SendEvent("MapMenu", "Records");
		}
		else {
			
		}
		Http::Destroy("RECORDS");
	}
	if(Http::IsCompleted("TITLE")) {
		if(Http::IsSuccessful("TITLE")) {
			declare STitleProgress TitleProgress for Layers::Page("Campaign");
			declare Success = TitleProgress.fromjson(Http::GetResult("TITLE"));
			Layers::SendEvent("Campaign", "Scores");
		}
		else {
			
		}
		Http::Destroy("TITLE");
	}
	
	declare Text Ghost_MapFile for LocalUser;
	if(Ghost_MapFile != "") {
		if(Map::AsyncIsCompleted(Ghost_MapFile)) {
			if(Map::AsyncIsSuccessful(Ghost_MapFile)) {
				LoadMap::Play(Map::FromFileName(Ghost_MapFile), "Replay.Script.txt");
				declare Text Ghost_ReplayFile for LocalUser;
				if(Ghost_ReplayFile != "")
					TitleControl.EditReplay([Ghost_ReplayFile]);
			}
			Map::AsyncDestroy(Ghost_MapFile);
			Ghost_MapFile = "";
		}
	}
	
	declare Boolean Leaderboards_Request for This;
	if(Leaderboards_Request) {
		Leaderboards_Request = False;
		declare CTaskResult_NaturalLeaderBoardInfoList[Text] Leaderboards for This;
		if(Leaderboards.existskey(CurrentCar)) {
			declare L = Leaderboards[CurrentCar];
			if(L.IsProcessing) {
				Leaderboards_Request = True;
			}
			else {
				if(L.HasSucceeded) {
					foreach(Record,L.LeaderBoardInfo) {
						declare Folders = TextLib::Split("\\", Record.FileName);
						Folders.removekey(Folders.count-1);
						declare FileName = """{{{TextLib::Join("\\", Folders)}}}\{{{TextLib::StripFormatting(MapName)}}}_{{{Challenge}}}_{{{CurrentCar}}}_({{{Time::TimeToFileNameSupportedText(Record.Score)}}}).Replay.Gbx""";
						Layers::SendEvent("MapMenu", "RecordGhost", [CurrentCar, Record.Login, Record.DisplayName, Record.Score^"", Record.ReplayUrl, FileName]);
					}
				}
				else {
					log("oof");
				}
			}
		}
	}
}

Void Loop() {
	declare Boolean IsReloaded for This;
	declare Boolean IsUpdating for Layers::Page("Campaign");
	if(IsUpdating) {
		if(!IsReloaded) {
			declare SScriptInfo[][] Scripts_Campaign for Layers::Page("Campaign");
			
			MakerBase::UpdateBuilder("Campaign", "Media/Manialinks/Campaign/Campaign", 0, 0, False, MakerBase::ChallengesToTextArray(Scripts_Campaign));
			IsReloaded = True;
		}
		IsUpdating = False;
	}
	if(MapFileToStart != "") {
		LoadMap::Play(Map::FromFileName(MapFileToStart), "Modes/TrackMania/ChallengeSolo.Script.txt");
			
		Layers::Hide("MapMenu");
		MapFileToStart = "";
	}
	
	if(PlayMap != "") {
		LoadMap::Play(Map::FromUid(PlayMap), "Modes/TrackMania/ChallengeSolo.Script.txt");
		PlayMap = "";
	}
	
	if(!Time::Stamp_CreateOnce("PLAYSESSION_REFRESH", 1*1000)) {
		if(Time::Stamp_Reached("PLAYSESSION_REFRESH")) {
			declare Playsessions = Service_Status::LastStatus(LocalUser).Titles[LoadedTitle.TitleId].Playsessions;
			Layers::SendEvent("Campaign", "Playsessions", Playsessions.tojson());
		}
	}
	
	if(!Time::Stamp_CreateOnce("TITLE_REFRESH", 60*1000)) {
		if(Time::Stamp_Reached("TITLE_REFRESH")) {
			declare Success = RequestTitleProgress();
		}
	}
}