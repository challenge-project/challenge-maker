#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Random.Script.txt" as Random
#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/File.Script.txt" as File

#Include "Libs/BigBang1112/Settings.Script.txt" as Settings

#Include "Libs/Maker/MakerBase.Script.txt" as MakerBase

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status

#Const C_Manialink "Media/Manialinks/Campaign/Leaderboards"

#Struct SLBMostSPUser {
	Text Login;
	Text Nickname;
	Text Zone;
	Integer SP;
	Integer Rank;
}

#Struct SLBMostSP {
	Integer Count;
	Real Time;
	SLBMostSPUser[] Users;
}

#Struct SLBMostAPUser {
	Text Login;
	Text Nickname;
	Text Zone;
	Integer AP;
	Integer Rank;
}

#Struct SLBMostAP {
	Integer Count;
	Real Time;
	SLBMostAPUser[] Users;
}

#Struct SLBMostValidationsUser {
	Text Login;
	Text Nickname;
	Text Zone;
	Integer Count;
	Integer Rank;
}

#Struct SLBMostValidations {
	Real Time;
	SLBMostValidationsUser[] Users;
}

#Struct SLBOldestWorldRecordsRecord {
	Text MapUid;
	Text OriginalName;
	Text Challenge;
	Text Car;
	Integer Time;
	Text Login;
	Text Nickname;
	Text Zone;
	Integer Driven;
	Integer Rank;
}

#Struct SLBOldestWorldRecords {
	Real Time;
	SLBOldestWorldRecordsRecord[] Records;
}

#Struct SLBNewestValidationsValidation {
	Text MapUid;
	Text OriginalName;
	Text Challenge;
	Text Car;
	Text Login;
	Text Nickname;
	Text Zone;
	Integer Driven;
	Integer Rank;
}

#Struct SLBNewestValidations {
	Real Time;
	SLBNewestValidationsValidation[] Validations;
}

#Struct SLBMostRecordsDrivenRecord {
	Text MapUid;
	Text OriginalName;
	Text Challenge;
	Text Car;
	Integer WR;
	Text WRHolderLogin;
	Text WRHolderNickname;
	Integer Count;
	Integer Rank;
}

#Struct SLBMostRecordsDriven {
	Real Time;
	SLBMostRecordsDrivenRecord[] Combinations;
}

#Struct SLBYourValidationsValidation {
	Text MapUid;
	Text OriginalName;
	Text Challenge;
	Text Car;
	Integer Driven;
}

#Struct SLBYourValidations {
	Real Time;
	SLBYourValidationsValidation[] Validations;
}

#Struct SLBYourWorldRecordsRecord {
	Text MapUid;
	Text OriginalName;
	Text Challenge;
	Text Car;
	Integer Time;
	Integer Driven;
}

#Struct SLBYourWorldRecords {
	Real Time;
	SLBYourWorldRecordsRecord[] Records;
}

#Struct SLBMostRatedCombination {
	Text MapUid;
	Text OriginalName;
	Text Challenge;
	Text Car;
	Integer WR;
	Text WRHolderLogin;
	Text WRHolderNickname;
	Real Difficulty;
	Real Quality;
	Integer Rank;
}

#Struct SLBMostRated {
	Real Time;
	SLBMostRatedCombination[] Ratings;
}

#Struct SLBAll {
	Real Time;
	SLBMostSP MostSP;
	SLBMostAP MostAP;
	SLBMostValidations MostValidations;
	SLBOldestWorldRecords OldestWR;
	SLBNewestValidations NewestValidations;
	SLBMostRecordsDriven MostRecordsDriven;
	SLBYourValidations YourValidations;
	SLBYourWorldRecords YourWR;
	SLBMostRated MostDifficult;
	SLBMostRated MostQuality;
}

Text ForUrl(Text _Param, Text _Value) {
	if(_Value == "") return "";
	return "&"^_Param^"="^TextLib::URLEncode(_Value);
}

Void Init() {
	Layers::Create("Leaderboards", Manialink::FromFile(C_Manialink, True, ["Audio"], Settings::Get().Theme));
}

declare Text Title;

Void Start() {
	Layers::Show("Leaderboards", True);
	
	Title = LoadedTitle.TitleId;
	
	declare Text CHALLENGE_TOKEN for LocalUser;
	declare Success = Http::AsyncPOST("ALL_LEADERBOARDS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=All""", CHALLENGE_TOKEN);
	
	/* OLD METHOD
	
	declare SuccessMostSP = Http::AsyncPOST("MOST_SKILLPOINTS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=SP""", CHALLENGE_TOKEN);
	declare SuccessMostAP = Http::AsyncPOST("MOST_ACTIVITY_POINTS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=AP""", CHALLENGE_TOKEN);
	declare SuccessMostValidations = Http::AsyncPOST("MOST_VALIDATIONS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=MostValidations""", CHALLENGE_TOKEN);
	declare SuccessOldestWorldRecords = Http::AsyncPOST("OLDEST_WORLD_RECORDS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=OldestWR""", CHALLENGE_TOKEN);
	declare SuccessNewestValidations = Http::AsyncPOST("NEWEST_VALIDATIONS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=NewestValidations""", CHALLENGE_TOKEN);
	declare SuccessMostRecordsDriven = Http::AsyncPOST("MOST_RECORDS_DRIVEN", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=MostRecordsDriven""", CHALLENGE_TOKEN);
	declare SuccessYourValidations = Http::AsyncPOST("YOUR_VALIDATIONS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=YourValidations""", CHALLENGE_TOKEN);
	declare SuccessYourWorldRecords = Http::AsyncPOST("YOUR_WORLD_RECORDS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=YourWR""", CHALLENGE_TOKEN);
	declare SuccessMostDifficult = Http::AsyncPOST("MOST_DIFFICULT", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=MostDifficult""", CHALLENGE_TOKEN);
	declare SuccessMostQuality = Http::AsyncPOST("MOST_QUALITY", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=MostQuality""", CHALLENGE_TOKEN);
	
	*/
	
	Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostSP", ""]);
	Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostAP", ""]);
	Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostValidations", ""]);
	Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["OldestWorldRecords", ""]);
	Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["NewestValidations", ""]);
	Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostRecords", ""]);
	Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["YourValidations", ""]);
	Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["YourWorldRecords", ""]);
	Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostDifficult", ""]);
	Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostQuality", ""]);
	
	declare MakerBase::SCampaign[] Campaigns for Layers::Page("Leaderboards");
	declare JsonSuccess = Campaigns.fromjson(File::Read(MakerBase::GetCampaignsFile()));
	
	declare Text[] CampaignNames for Layers::Page("Leaderboards");
	CampaignNames.clear();
	foreach(Campaign in Campaigns)
		CampaignNames.add(Campaign.Name);
	
	declare MakerBase::SScriptInfo[][] Scripts for This;
	declare Text[] CampaignChallenges for Layers::Page("Leaderboards");
	CampaignChallenges.clear();
	
	foreach(Script in Scripts) {
		declare Text[] ScriptNames;
		foreach(S in Script) ScriptNames.add(S.Metadata.Name);
		CampaignChallenges.add(TextLib::Join("+", ScriptNames));
	}
	
	Layers::SendEvent("Leaderboards", "UpdateFilters");
}

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(Event.CustomEventLayer) {
			case Layers::Get("Leaderboards"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Layers::Hide("Leaderboards", True);
						Layers::Show("Top", True);
						Layers::Show("Bottom", True);
						Layers::Show("PreCampaign", True);
					}
					case "Change": {
						
					}
					case "RequestLeaderboard": {
						declare Text CHALLENGE_TOKEN for LocalUser;
						
						declare Type = Event.CustomEventData[0];
						declare Campaign = Event.CustomEventData[1];
						declare Challenge = Event.CustomEventData[2];
						declare Car = Event.CustomEventData[3];
						declare Zone = Event.CustomEventData[4];
						
						switch(Type) {
							case "MostSP": {
								Http::Destroy("MOST_SKILLPOINTS");
								declare Success = Http::AsyncPOST("MOST_SKILLPOINTS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=SP{{{ForUrl("campaign", Campaign)}}}{{{ForUrl("challenge", Challenge)}}}{{{ForUrl("car", Car)}}}&zone={{{Zone}}}""", CHALLENGE_TOKEN);
							}
							case "MostAP": {
								Http::Destroy("MOST_ACTIVITY_POINTS");
								declare Success = Http::AsyncPOST("MOST_ACTIVITY_POINTS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=AP{{{ForUrl("campaign", Campaign)}}}{{{ForUrl("challenge", Challenge)}}}{{{ForUrl("car", Car)}}}&zone={{{Zone}}}""", CHALLENGE_TOKEN);
							}
							case "MostValidations": {
								Http::Destroy("MOST_VALIDATIONS");
								declare Success = Http::AsyncPOST("MOST_VALIDATIONS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=MostValidations{{{ForUrl("campaign", Campaign)}}}{{{ForUrl("challenge", Challenge)}}}{{{ForUrl("car", Car)}}}""", CHALLENGE_TOKEN);
							}
							case "OldestWorldRecords": {
								Http::Destroy("OLDEST_WORLD_RECORDS");
								declare Success = Http::AsyncPOST("OLDEST_WORLD_RECORDS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=OldestWR{{{ForUrl("campaign", Campaign)}}}{{{ForUrl("challenge", Challenge)}}}{{{ForUrl("car", Car)}}}""", CHALLENGE_TOKEN);
							}
							case "NewestValidations": {
								Http::Destroy("NEWEST_VALIDATIONS");
								declare Success = Http::AsyncPOST("NEWEST_VALIDATIONS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=NewestValidations{{{ForUrl("campaign", Campaign)}}}{{{ForUrl("challenge", Challenge)}}}{{{ForUrl("car", Car)}}}""", CHALLENGE_TOKEN);
							}
							case "MostRecordsDriven": {
								Http::Destroy("MOST_RECORDS_DRIVEN");
								declare Success = Http::AsyncPOST("MOST_RECORDS_DRIVEN", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=MostRecordsDriven{{{ForUrl("campaign", Campaign)}}}{{{ForUrl("challenge", Challenge)}}}{{{ForUrl("car", Car)}}}""", CHALLENGE_TOKEN);
							}
							case "YourValidations": {
								Http::Destroy("YOUR_VALIDATIONS");
								declare Success = Http::AsyncPOST("YOUR_VALIDATIONS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=YourValidations{{{ForUrl("campaign", Campaign)}}}{{{ForUrl("challenge", Challenge)}}}{{{ForUrl("car", Car)}}}""", CHALLENGE_TOKEN);
							}
							case "YourWorldRecords": {
								Http::Destroy("YOUR_WORLD_RECORDS");
								declare Success = Http::AsyncPOST("YOUR_WORLD_RECORDS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=YourWR{{{ForUrl("campaign", Campaign)}}}{{{ForUrl("challenge", Challenge)}}}{{{ForUrl("car", Car)}}}""", CHALLENGE_TOKEN);
							}
							case "MostDifficult": {
								Http::Destroy("MOST_DIFFICULT");
								declare Success = Http::AsyncPOST("MOST_DIFFICULT", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=MostDifficult{{{ForUrl("campaign", Campaign)}}}{{{ForUrl("challenge", Challenge)}}}{{{ForUrl("car", Car)}}}""", CHALLENGE_TOKEN);
							}
							case "MostQuality": {
								Http::Destroy("MOST_QUALITY");
								declare Success = Http::AsyncPOST("MOST_QUALITY", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/leaderboards.php?title={{{Title}}}&type=MostQuality{{{ForUrl("campaign", Campaign)}}}{{{ForUrl("challenge", Challenge)}}}{{{ForUrl("car", Car)}}}""", CHALLENGE_TOKEN);
							}
						}
					}
				}
			}
		}
	}
}

Void Async() {
	if(Http::IsCompleted("MOST_SKILLPOINTS")) {
		if(Http::IsSuccessful("MOST_SKILLPOINTS")) {
			declare SLBMostSP Leaderboard;
			declare Success = Leaderboard.fromjson(Http::GetResult("MOST_SKILLPOINTS"));
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostSP", Leaderboard.tojson()]);
		}
		else {
			
		}
		Http::Destroy("MOST_SKILLPOINTS");
	}
	if(Http::IsCompleted("MOST_ACTIVITY_POINTS")) {
		if(Http::IsSuccessful("MOST_ACTIVITY_POINTS")) {
			declare SLBMostAP Leaderboard;
			declare Success = Leaderboard.fromjson(Http::GetResult("MOST_ACTIVITY_POINTS"));
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostAP", Leaderboard.tojson()]);
		}
		else {
			
		}
		Http::Destroy("MOST_ACTIVITY_POINTS");
	}
	if(Http::IsCompleted("MOST_VALIDATIONS")) {
		if(Http::IsSuccessful("MOST_VALIDATIONS")) {
			declare SLBMostValidations Leaderboard;
			declare Success = Leaderboard.fromjson(Http::GetResult("MOST_VALIDATIONS"));
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostValidations", Leaderboard.tojson()]);
		}
		else {
			
		}
		Http::Destroy("MOST_VALIDATIONS");
	}
	if(Http::IsCompleted("OLDEST_WORLD_RECORDS")) {
		if(Http::IsSuccessful("OLDEST_WORLD_RECORDS")) {
			declare SLBOldestWorldRecords Leaderboard;
			declare Success = Leaderboard.fromjson(Http::GetResult("OLDEST_WORLD_RECORDS"));
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["OldestWorldRecords", Leaderboard.tojson()]);
		}
		else {
			
		}
		Http::Destroy("OLDEST_WORLD_RECORDS");
	}
	if(Http::IsCompleted("NEWEST_VALIDATIONS")) {
		if(Http::IsSuccessful("NEWEST_VALIDATIONS")) {
			declare SLBNewestValidations Leaderboard;
			declare Success = Leaderboard.fromjson(Http::GetResult("NEWEST_VALIDATIONS"));
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["NewestValidations", Leaderboard.tojson()]);
		}
		else {
			
		}
		Http::Destroy("NEWEST_VALIDATIONS");
	}
	if(Http::IsCompleted("MOST_RECORDS_DRIVEN")) {
		if(Http::IsSuccessful("MOST_RECORDS_DRIVEN")) {
			declare SLBMostRecordsDriven Leaderboard;
			declare Success = Leaderboard.fromjson(Http::GetResult("MOST_RECORDS_DRIVEN"));
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostRecords", Leaderboard.tojson()]);
		}
		else {
			
		}
		Http::Destroy("MOST_RECORDS_DRIVEN");
	}
	if(Http::IsCompleted("YOUR_VALIDATIONS")) {
		if(Http::IsSuccessful("YOUR_VALIDATIONS")) {
			declare SLBYourValidations Leaderboard;
			declare Success = Leaderboard.fromjson(Http::GetResult("YOUR_VALIDATIONS"));
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["YourValidations", Leaderboard.tojson()]);
		}
		else {
			
		}
		Http::Destroy("YOUR_VALIDATIONS");
	}
	if(Http::IsCompleted("YOUR_WORLD_RECORDS")) {
		if(Http::IsSuccessful("YOUR_WORLD_RECORDS")) {
			declare SLBYourWorldRecords Leaderboard;
			declare Success = Leaderboard.fromjson(Http::GetResult("YOUR_WORLD_RECORDS"));
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["YourWorldRecords", Leaderboard.tojson()]);
		}
		else {
			
		}
		Http::Destroy("YOUR_WORLD_RECORDS");
	}
	if(Http::IsCompleted("MOST_DIFFICULT")) {
		if(Http::IsSuccessful("MOST_DIFFICULT")) {
			declare SLBMostRated Leaderboard;
			declare Success = Leaderboard.fromjson(Http::GetResult("MOST_DIFFICULT"));
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostDifficult", Leaderboard.tojson()]);
		}
		else {
			
		}
		Http::Destroy("MOST_DIFFICULT");
	}
	if(Http::IsCompleted("MOST_QUALITY")) {
		if(Http::IsSuccessful("MOST_QUALITY")) {
			declare SLBMostRated Leaderboard;
			declare Success = Leaderboard.fromjson(Http::GetResult("MOST_QUALITY"));
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostQuality", Leaderboard.tojson()]);
		}
		else {
			
		}
		Http::Destroy("MOST_QUALITY");
	}
	if(Http::IsCompleted("ALL_LEADERBOARDS")) {
		if(Http::IsSuccessful("ALL_LEADERBOARDS")) {
			declare SLBAll All;
			declare Success = All.fromjson(Http::GetResult("ALL_LEADERBOARDS"));
			
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostSP", All.MostSP.tojson()]);
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostAP", All.MostAP.tojson()]);
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostValidations", All.MostValidations.tojson()]);
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["OldestWorldRecords", All.OldestWR.tojson()]);
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["NewestValidations", All.NewestValidations.tojson()]);
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostRecords", All.MostRecordsDriven.tojson()]);
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["YourValidations", All.YourValidations.tojson()]);
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["YourWorldRecords", All.YourWR.tojson()]);
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostDifficult", All.MostDifficult.tojson()]);
			Layers::SendEvent("Leaderboards", "UpdateLeaderboard", ["MostQuality", All.MostQuality.tojson()]);
		}
		else {
			
		}
		Http::Destroy("ALL_LEADERBOARDS");
	}
}

Void Loop() {
	
}