/*
// MX.Script.txt
// by BigBang1112
// part of Universe Library Set

// Provides functions usable for receiving information from the site Mania-Exchange.
// https://mania.exchange/

// API INFO: https://api.mania-exchange.com/documents/reference

// This library does depend on more libraries from the Universe Library Set:
// - Http.Script.txt
// You only need to use the libraries above, although it's recommended to use the whole set.
*/

/*
// Compatible contexts:
// - CManiaApp
// - CMode
// - CServerPlugin
*/

/*
// SMXTrack[] Search(SMXSearchFilter _Filter, Boolean _UseCache)
// SMXMappack[] SearchMappack(Text _Site, SMXSearchMappackFilter _Filter, Boolean _UseCache)
// SMXTrack[] TrackMultiple(Text _Site, Integer[] _TrackId, Boolean _UseCache)
// SMXTrack Track(Text _Site, Integer _TrackId, Boolean _UseCache)
// SMXMappack[] MappackMultiple(Text _Site, Integer[] _MappackIds, Text _Secret, Boolean _UseCache)
// SMXMappack Mappack(Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache)
// SMXTrack[] MappackTracks(Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache)
// SMXReplay TrackWorldRecord(Text _Site, Integer _TrackId, Boolean _UseCache)
// SMXReplay[] TrackReplays(Text _Site, Integer _TrackId, Integer _Amount, Boolean _UseCache)
// SMXReplay[] TrackReplays(Text _Site, Integer _TrackId, Boolean _UseCache)
// SMXEmbeddedObject[] TrackEmbeddedObjects(Text _Site, Integer _TrackId, Boolean _UseCache)
// Text TrackScreenshotUrl(Text _Site, Integer _TrackId, Text _Type)
// Text TrackThumbnailUrl(Text _Site, Integer _TrackId)
// Text MappackThumbnailUrl(Text _Site, Integer _TrackId)
// Text TrackDownloadUrl(Text _Site, Integer _TrackId)
// Text MappackDownloadUrl(Text _Site, Integer _TrackId, Text _Secret)
// Boolean SearchAsync(Text _Name, Text _Site, SMXSearchFilter _Filter, Boolean _UseCache)
// SMXTrack[] GetAsyncSearchResult(Text _Name)
// Boolean AsyncSearchMappack(Text _Name, Text _Site, SMXSearchMappackFilter _Filter, Boolean _UseCache)
// SMXMappack[] GetAsyncSearchMappackResult(Text _Name)
// Boolean AsyncTrackMultiple(Text _Name, Text _Site, Integer[] _TrackIds, Boolean _UseCache)
// SMXTrack[] GetAsyncTrackMultipleResult(Text _Name)
// Boolean AsyncTrack(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache)
// SMXTrack GetAsyncTrackResult(Text _Name)
// Boolean AsyncMappackMultiple(Text _Name, Text _Site, Integer[] _MappackIds, Text _Secret, Boolean _UseCache)
// SMXMappack[] GetAsyncMappackMultipleResult(Text _Name)
// Boolean AsyncMappack(Text _Name, Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache)
// SMXMappack GetAsyncMappackResult(Text _Name)
// Boolean AsyncMappackTracks(Text _Name, Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache)
// SMXTrack[] GetAsyncMappackTracksResult(Text _Name)
// Boolean AsyncTrackWorldRecord(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache)
// SMXReplay GetAsyncTrackWorldRecordResult(Text _Name)
// Boolean AsyncTrackReplays(Text _Name, Text _Site, Integer _TrackId, Integer _Amount, Boolean _UseCache)
// Boolean AsyncTrackReplays(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache)
// SMXReplay[] GetAsyncTrackReplaysResult(Text _Name)
// Boolean AsyncTrackEmbeddedObjects(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache)
// SMXEmbeddedObject[] GetAsyncTrackEmbeddedObjectsResult(Text _Name)
// CHttpRequest Get(Text _Name)
// Void Destroy(Text _Name)
// Boolean IsCompleted(Text _Name)
// Boolean IsSuccessful(Text _Name)
// Integer GetStatusCode(Text _Name)
*/

#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Http.Script.txt" as Http

#Const C_Env_Any			0
#Const C_Env_Canyon			1
#Const C_Env_Stadium		2
#Const C_Env_Valley			3
#Const C_Env_Lagoon			4
#Const C_Env_Desert			5
#Const C_Env_Snow			6
#Const C_Env_Rally			7
#Const C_Env_Coast			8
#Const C_Env_Bay			9
#Const C_Env_Island			10
#Const C_Env_TMOne_Desert	11
#Const C_Env_Storm			1

#Const C_Replay_All		-1
#Const C_Replay_Normal	0
#Const C_Replay_Classic	1
#Const C_Replay_Nadeo	2
#Const C_Replay_Useless	3

#Const C_Difficulty_Beginner		0
#Const C_Difficulty_Intermediate	1
#Const C_Difficulty_Advanced		2
#Const C_Difficulty_Expert			3

#Const C_Style_Race			1
#Const C_Style_Fullspeed	2
#Const C_Style_Tech			3
#Const C_Style_RPG			4
#Const C_Style_LOL			5
#Const C_Style_PressForward	6
#Const C_Style_Speedtech	7
#Const C_Style_Multilap		8
#Const C_Style_Offroad		9
#Const C_Style_Solo			1
#Const C_Style_Team			2
#Const C_Style_Versus		3
#Const C_Style_Other		4

#Const C_Length_None	-1
#Const C_Length_15secs	0
#Const C_Length_30secs	1
#Const C_Length_45secs	2
#Const C_Length_1min	3
#Const C_Length_1m15s	4
#Const C_Length_1m30s	5
#Const C_Length_1m45s	6
#Const C_Length_2min	7
#Const C_Length_2m30s	8
#Const C_Length_3min	9
#Const C_Length_3m30s	10
#Const C_Length_4min	11
#Const C_Length_4m30s	12
#Const C_Length_5min	13
#Const C_Length_Long	14

#Const C_Operator_Equals		0
#Const C_Operator_Less			1
#Const C_Operator_Greater		2
#Const C_Operator_LessEqual		3
#Const C_Operator_GreaterEqual	4

#Const C_Order_Default				-1
#Const C_Order_TrackName			0
#Const C_Order_AuthorName			1
#Const C_Order_Upload_Newest		2
#Const C_Order_Upload_Oldest		3
#Const C_Order_Update_Newest		4
#Const C_Order_Update_Oldest		5
#Const C_Order_Activity_MostRecent	6
#Const C_Order_Activity_LeastRecent	7
#Const C_Order_Awards_Most			8
#Const C_Order_Awards_Least			9
#Const C_Order_Comments_Most		10
#Const C_Order_Comments_Least		11
#Const C_Order_Difficulty_Easiest	12
#Const C_Order_Difficulty_Hardest	13
#Const C_Order_Length_Shortest		14
#Const C_Order_Length_Longest		15
#Const C_Order_TrackValue_Lowest	24
#Const C_Order_TrackValue_Highest	25
#Const C_Order_Rating_Lowest		26
#Const C_Order_Rating_Highest		27

#Const C_SearchMode_Default				0
#Const C_SearchMode_User				1
#Const C_SearchMode_Latest				2
#Const C_SearchMode_RecentAward			3
#Const C_SearchMode_Week				4
#Const C_SearchMode_Month				5
#Const C_SearchMode_Favorite			6
#Const C_SearchMode_Download			7
#Const C_SearchMode_Award				8
#Const C_SearchMode_Upload				9
#Const C_SearchMode_Supporter			10
#Const C_SearchMode_Duo					11
#Const C_SearchMode_Competitive_Week	19
#Const C_SearchMode_Competitive_Month	20
#Const C_SearchMode_Week_Rating			21
#Const C_SearchMode_Month_Rating		22

#Const C_Mappack_Order_Standard			0
#Const C_Mappack_Order_Created_Newest	0
#Const C_Mappack_Order_Created_Oldest	0
#Const C_Mappack_Order_Edited_Newest	0
#Const C_Mappack_Order_Edited_Oldest	0
#Const C_Mappack_Order_TrackCount_Most	0
#Const C_Mappack_Order_TrackCount_Least	0
#Const C_Mappack_Order_Name_Ascending	0
#Const C_Mappack_Order_Name_Descending	0

#Const C_Mappack_Type_Standard		0
#Const C_Mappack_Type_Campaign		1
#Const C_Mappack_Type_Competition	2
#Const C_Mappack_Type_Contest		3

#Struct SMXSearchFilter {
	Text Mode;
	Text TrackName;
	Text Author;
	Text MPAuthor;
	Text AnyAuthor;
	Text Mod;
	Text AuthorID;
	Text[] MapType;
	Text[] TitlePack;
	Text ReplayType;
	Text Style;
	Text Length;
	Text LengthOperator;
	Text PrimaryOrder;
	Text SecondaryOrder;
	Text[] Environments;
	Text[] Vehicles;
	Text Unlimiter;
	Text Page;
	Text Limit;
	Text Unreleased;
	Text MapGroup;
	Text CommentsMinLength;
	Text CustomScreenshot;
	Text MinExeBuild;
	Text MaxExeBuild;
	Text Envmix;
	Text GhostBlocks;
	Text EmbeddedObjects;
	Text GameVersion;
}

#Struct SMXSearchMappackFilter {
	Text Name;
	Text Username;
	Text Type;
	Text TitlePack;
	Text[] Environments;
}

#Struct SMXTrack {
	Integer TrackID;
	Integer UserID;
	Text Username;
	Text UploadedAt;
	Text UpdatedAt;
	Text Name;
	Text TypeName;
	Text MapType;
	Text TitlePack;
	Text StyleName;
	Text Mood;
	Integer DisplayCost;
	Text ModName;
	Integer Lightmap;
	Text ExeVersion;
	Text ExeBuild;
	Text EnvironmentName;
	Text VehicleName;
	Text PlayerModel;
	Text RouteName;
	Text LengthName;
	Integer Laps;
	Text DifficultyName;
	Text ReplayTypeName;
	Integer ReplayWRID;
	Integer ReplayCount;
	Integer TrackValue;
	Text Comments;
	Integer AwardCount;
	Integer CommentCount;
	Integer ReplayWRTime;
	Integer ReplayWRUserID;
	Text ReplayWRUsername;
	Boolean UnlimiterRequired;
	Text TrackUID;
	Boolean Unreleased;
	Text GbxMapName;
	Integer RatingVoteCount;
	Integer RatingVoteAverage;
	Boolean HasScreenshot;
	Boolean HasThumbnail;
	Boolean HasGhostBlocks;
	Integer EmbeddedObjectsCount;
	Text AuthorLogin;
	Boolean IsMP4;
}

#Struct SMXMappack {
	Integer ID;
	Integer UserID;
	Text Username;
	Text Name;
	Text TypeName;
	Text StyleName;
	Text Titlepack;
	Boolean Unreleased;
	Integer Environment;
	Text EnvironmentName;
	Integer Downloads;
	Boolean Request;
	Text Created;
	Text Edited;
	Boolean Active;
	Text ShortName;
	Text VideoURL;
	Integer TrackCount;
}

#Struct SMXReplay {
	Integer ReplayID;
	Integer UserID;
	Text Username;
	Integer TrackID;
	Text UploadedAt;
	Integer ReplayTime;
	Integer StuntScore;
	Integer Respawns;
	Integer Position;
	Integer Beaten;
	Integer Percentage;
	Integer ReplayPoints;
	Integer NadeoPoints;
}

#Struct SMXEmbeddedObject {
	Text ObjectPath;
	Text ObjectAuthor;
	Text ExternalLink;
	Text Name;
}

#Struct SMXSearchResult {
	SMXTrack[] results;
}

Text Private_BuildSearchParams(SMXSearchFilter _Filter) {
	declare Builder = "&format=json";
	
	if(_Filter.Mode != "")		Builder ^= "&mode="^_Filter.Mode;
	if(_Filter.TrackName != "")	Builder ^= "&trackname="^_Filter.TrackName;
	if(_Filter.Author != "")	Builder ^= "&author="^_Filter.Author;
	if(_Filter.MPAuthor != "")	Builder ^= "&mpauthor="^_Filter.MPAuthor;
	if(_Filter.AnyAuthor != "")	Builder ^= "&anyauthor="^_Filter.AnyAuthor;
	if(_Filter.Mod != "")		Builder ^= "&mod="^_Filter.Mod;
	if(_Filter.AuthorID != "")	Builder ^= "&authorid="^_Filter.AuthorID;
	if(_Filter.MapType.count > 0) {
		Builder ^= "&mtype="^_Filter.MapType[0];
		for(i,1,_Filter.MapType.count) Builder ^= ","^_Filter.MapType[i];
	}
	if(_Filter.TitlePack.count > 0) {
		Builder ^= "&tpack="^_Filter.TitlePack[0];
		for(i,1,_Filter.TitlePack.count) Builder ^= ","^_Filter.TitlePack[i];
	}
	if(_Filter.ReplayType != "")		Builder ^= "&rtype="^_Filter.ReplayType;
	if(_Filter.Style != "")				Builder ^= "&style="^_Filter.Style;
	if(_Filter.Length != "")			Builder ^= "&length="^_Filter.Length;
	if(_Filter.LengthOperator != "")	Builder ^= "&lengthop="^_Filter.LengthOperator;
	if(_Filter.PrimaryOrder != "")		Builder ^= "&priord="^_Filter.PrimaryOrder;
	if(_Filter.SecondaryOrder != "")	Builder ^= "&secord="^_Filter.SecondaryOrder;
	if(_Filter.Environments.count > 0) {
		Builder ^= "&environments="^_Filter.Environments[0];
		for(i,1,_Filter.Environments.count) Builder ^= ","^_Filter.Environments[i];
	}
	if(_Filter.Vehicles.count > 0) {
		Builder ^= "&vehicles="^_Filter.Vehicles[0];
		for(i,1,_Filter.Vehicles.count) Builder ^= ","^_Filter.Vehicles[i];
	}
	if(_Filter.Unlimiter != "")			Builder ^= "&unlimiter="^_Filter.Unlimiter;
	if(_Filter.Page != "")				Builder ^= "&page="^_Filter.Page;
	if(_Filter.Limit != "")				Builder ^= "&limit="^_Filter.Limit;
	if(_Filter.Unreleased != "")		Builder ^= "&unreleased="^_Filter.Unreleased;
	if(_Filter.MapGroup != "")			Builder ^= "&mapgroup="^_Filter.MapGroup;
	if(_Filter.CommentsMinLength != "")	Builder ^= "&commentsminlength="^_Filter.CommentsMinLength;
	if(_Filter.CustomScreenshot != "")	Builder ^= "&customscreenshot="^_Filter.CustomScreenshot;
	if(_Filter.MinExeBuild != "")		Builder ^= "&minexebuild="^_Filter.MinExeBuild;
	if(_Filter.Envmix != "")			Builder ^= "&envmix="^_Filter.Envmix;
	if(_Filter.GhostBlocks != "")		Builder ^= "&ghostblocks="^_Filter.GhostBlocks;
	if(_Filter.EmbeddedObjects != "")	Builder ^= "&embeddedobjects="^_Filter.EmbeddedObjects;
	if(_Filter.GameVersion != "")		Builder ^= "&gv="^_Filter.GameVersion;
	
	return Builder;
}

Text Private_BuildSearchMappackParams(SMXSearchMappackFilter _Filter) {
	declare Builder = "&format=json";
	
	if(_Filter.Name != "")		Builder ^= "&name="^_Filter.Name;
	if(_Filter.Username != "")	Builder ^= "&username="^_Filter.Username;
	if(_Filter.Type != "")		Builder ^= "&type="^_Filter.Type;
	if(_Filter.TitlePack != "")	Builder ^= "&titlepack="^_Filter.TitlePack;
	if(_Filter.Environments.count > 0) {
		Builder ^= "&mtype="^_Filter.Environments[0];
		for(i,1,_Filter.Environments.count) Builder ^= ","^_Filter.Environments[i];
	}
	
	return Builder;
}

/*
// SMXTrack[] Search(Text _Site, SMXSearchFilter _Filter, Boolean _UseCache)
// Searches for all filtered maps synchronously.

// Text _Site - "tm" or "sm" exchange
// SMXSearchFilter _Filter - Search filter applied
// Boolean _UseCache - If to cache the result, True recommended

// Returns list of tracks found
*/
SMXTrack[] Search(Text _Site, SMXSearchFilter _Filter, Boolean _UseCache) {
	declare SMXTrack[] Tracks;
	
	declare Result = Http::SyncGET_Result("""https://{{{_Site}}}.mania-exchange.com/tracksearch2/search?api=on{{{Private_BuildSearchParams(_Filter)}}}""", _UseCache);
	
	declare SMXSearchResult ResultTracks;
	declare JsonSuccess = ResultTracks.fromjson(Result);
	foreach(Track,ResultTracks.results) {
		Tracks.add(Track);
	}
	return Tracks;
}

/*
// SMXMappack[] SearchMappack(Text _Site, SMXSearchMappackFilter _Filter, Boolean _UseCache)
// Searches for all filtered mappacks synchronously.

// Text _Site - "tm" or "sm" exchange
// SMXSearchMappackFilter _Filter - Search filter applied
// Boolean _UseCache - If to cache the result, True recommended

// Returns list of mappacks found
*/
SMXMappack[] SearchMappack(Text _Site, SMXSearchMappackFilter _Filter, Boolean _UseCache) {
	declare SMXMappack[] Mappacks;
	declare Result = Http::SyncGET_Result("""https://{{{_Site}}}.mania-exchange.com/mappack/search?api=on{{{Private_BuildSearchMappackParams(_Filter)}}}""", _UseCache);
	declare JsonSuccess = Mappacks.fromjson(Result);
	return Mappacks;
}

/*
// SMXTrack[] TrackMultiple(Text _Site, Integer[] _TrackIds, Boolean _UseCache)
// Finds track information from track IDs synchronously.

// Text _Site - "tm" or "sm" exchange
// Text[] _TrackIds - Array of track IDs
// Boolean _UseCache - If to cache the result, True recommended

// Returns list of tracks found using the same indexes _TrackIds have. If track ID not found, default SMXTrack is used
*/
SMXTrack[] TrackMultiple(Text _Site, Text[] _TrackIds, Boolean _UseCache) {
	declare SMXTrack[] Tracks;
	
	declare Text TrackIdText;
	for(i,0,_TrackIds.count-1) {
		if(i!=0) TrackIdText ^= ",";
		TrackIdText ^= _TrackIds[i]^"";
	}
	declare Result = Http::SyncGET_Result("""https://api.mania-exchange.com/{{{_Site}}}/maps/{{{TrackIdText}}}""", _UseCache);
	
	declare JsonSuccess = Tracks.fromjson(Result);	
	return Tracks;
}

/*
// SMXTrack Track(Text _Site, Integer _TrackId, Boolean _UseCache)
// Finds track information from track ID synchronously.

// Text _Site - "tm" or "sm" exchange
// Text _TrackId - Track ID
// Boolean _UseCache - If to cache the result, True recommended

// Returns SMXTrack with non-default data if track found
*/
SMXTrack Track(Text _Site, Text _TrackId, Boolean _UseCache) {
	declare SMXTrack Info;
	declare Tracks = TrackMultiple(_Site, [_TrackId], _UseCache);
	if(Tracks.count > 0) Info = Tracks[0];
	return Info;
}

/*
// SMXMappack[] MappackMultiple(Text _Site, Integer[] _MappackIds, Text _Secret, Boolean _UseCache)
// Finds mappack information from mappack IDs synchronously.

// Text _Site - "tm" or "sm" exchange
// Integer[] _MappackIds - Array of Mappack IDs
// Text _Secret - Mappack secret
// Boolean _UseCache - If to cache the result, True recommended

// Returns list of mappacks found using the same indexes _MappackIds have. If mappack ID not found, default SMXMappack is used
*/
SMXMappack[] MappackMultiple(Text _Site, Integer[] _MappackIds, Text _Secret, Boolean _UseCache) {
	declare SMXMappack[] Mappacks;
	
	declare Text MappackIdText;
	for(i,0,_MappackIds.count-1) {
		if(i!=0) MappackIdText ^= ",";
		MappackIdText ^= _MappackIds[i]^"";
	}
	declare Result = Http::SyncGET_Result("""https://api.mania-exchange.com/{{{_Site}}}/mappacks/{{{MappackIdText}}}""", _UseCache);
	
	declare JsonSuccess = Mappacks.fromjson(Result);	
	return Mappacks;
}

/*
// SMXMappack Mappack(Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache)
// Finds mappack information from mappack ID synchronously.

// Text _Site - "tm" or "sm" exchange
// Integer _MappackId - Mappack ID
// Text _Secret - Mappack secret
// Boolean _UseCache - If to cache the result, True recommended

// Returns SMXMappack with non-default data if track found
*/
SMXMappack Mappack(Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache) {
	declare SMXMappack Info;
	declare Mappacks = MappackMultiple(_Site, [_MappackId], _Secret, _UseCache);
	if(Mappacks.count > 0) Info = Mappacks[0];
	return Info;
}

/*
// SMXTrack[] MappackTracks(Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache)
// Finds mappack tracks from mappack ID synchronously.

// Text _Site - "tm" or "sm" exchange
// Integer _MappackId - Mappack ID
// Text _Secret - Mappack secret
// Boolean _UseCache - If to cache the result, True recommended

// Returns tracks in the mappack
*/
SMXTrack[] MappackTracks(Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache) {
	declare SMXTrack[] Tracks;
	declare Result = Http::SyncGET_Result("""https://api.mania-exchange.com/tm/mappack/{{{_MappackId}}}/tracks/?={{{_Secret}}}""", _UseCache);
	declare JsonSuccess = Tracks.fromjson(Result);
	return Tracks;
}

/*
// SMXReplay TrackWorldRecord(Text _Site, Integer _TrackId, Boolean _UseCache)
// Gets world record of a specific track synchronously.

// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID
// Boolean _UseCache - If to cache the result, True recommended

// Returns replay information about the world record
*/
SMXReplay TrackWorldRecord(Text _Site, Integer _TrackId, Boolean _UseCache) {
	declare SMXReplay Replay;
	declare Result = Http::SyncGET_Result("""https://api.mania-exchange.com/{{{_Site}}}/tracks/worldrecord/{{{_TrackId}}}""", _UseCache);
	declare JsonSuccess = Replay.fromjson(Result);
	return Replay;
}

/*
// SMXReplay[] TrackReplays(Text _Site, Integer _TrackId, Integer _Amount, Boolean _UseCache)
// Gets specific amount of replays from a specific track synchronously.

// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID
// Integer _Amount - Amount of replays to get, max 25
// Boolean _UseCache - If to cache the result, True recommended

// Returns track replays
*/
SMXReplay[] TrackReplays(Text _Site, Integer _TrackId, Integer _Amount, Boolean _UseCache) {
	declare SMXReplay[] Replays;
	declare Result = Http::SyncGET_Result("""https://api.mania-exchange.com/{{{_Site}}}/replays/{{{_TrackId}}}/{{{_Amount}}}""", _UseCache);
	declare JsonSuccess = Replays.fromjson(Result);
	return Replays;
}

/*
// SMXReplay[] TrackReplays(Text _Site, Integer _TrackId, Boolean _UseCache)
// Gets 25 replays from a specific track synchronously.

// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID
// Boolean _UseCache - If to cache the result, True recommended

// Returns track replays
*/
SMXReplay[] TrackReplays(Text _Site, Integer _TrackId, Boolean _UseCache) {
	return TrackReplays(_Site, _TrackId, 25, _UseCache);
}

/*
// SMXEmbeddedObject[] TrackEmbeddedObjects(Text _Site, Integer _TrackId, Boolean _UseCache)
// Gets embedded objects synchronously.

// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID
// Boolean _UseCache - If to cache the result, True recommended

// Returns list of embedded objects
*/
SMXEmbeddedObject[] TrackEmbeddedObjects(Text _Site, Integer _TrackId, Boolean _UseCache) {
	declare SMXEmbeddedObject[] Objects;
	declare Result = Http::SyncGET_Result("""https://api.mania-exchange.com/{{{_Site}}}/tracks/embeddedobjects/{{{_TrackId}}}""", _UseCache);
	declare JsonSuccess = Objects.fromjson(Result);
	return Objects;
}

/*
// Text TrackScreenshotUrl(Text _Site, Integer _TrackId, Text _Type)
// Constructs track screenshot URL compatible with ManiaPlanet quads.

// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID
// Text _Type

// Returns constructed URL
*/
Text TrackScreenshotUrl(Text _Site, Integer _TrackId, Text _Type) {
	return """https://{{{_Site}}}.mania-exchange.com/tracks/screenshot/{{{_Type}}}/{{{_TrackId}}}?.jpg""";
}

/*
// Text TrackThumbnailUrl(Text _Site, Integer _TrackId)
// Constructs track thumbnail URL compatible with ManiaPlanet quads.

// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID

// Returns constructed URL
*/
Text TrackThumbnailUrl(Text _Site, Integer _TrackId) {
	return """https://{{{_Site}}}.mania-exchange.com/tracks/thumbnail/{{{_TrackId}}}?.jpg""";
}

/*
// Text MappackThumbnailUrl(Text _Site, Integer _MappackId)
// Constructs mappack thumbnail URL compatible with ManiaPlanet quads.

// Text _Site - "tm" or "sm" exchange
// Integer _MappackId - Mappack ID

// Returns constructed URL
*/
Text MappackThumbnailUrl(Text _Site, Integer _MappackId) {
	return """https://{{{_Site}}}.mania-exchange.com/mappacks/thumbnail/{{{_MappackId}}}?.jpg""";
}

/*
// Text TrackDownloadUrl(Text _Site, Integer _TrackId)
// Constructs track download URL.

// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID

// Returns constructed URL
*/
Text TrackDownloadUrl(Text _Site, Integer _TrackId) {
	return """https://{{{_Site}}}.mania-exchange.com/tracks/download/{{{_TrackId}}}""";
}

/*
// Text MappackDownloadUrl(Text _Site, Integer _TrackId, Text _Secret)
// Constructs mappack download URL.

// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID
// Text _Secret - Mappack secret

// Returns constructed URL
*/
Text MappackDownloadUrl(Text _Site, Integer _TrackId, Text _Secret) {
	return """https://{{{_Site}}}.mania-exchange.com/mappacks/download/{{{_TrackId}}}?secret={{{_Secret}}}""";
}

/*
// Boolean AsyncSearch(Text _Name, Text _Site, SMXSearchFilter _Filter, Boolean _UseCache)
// Searches for all filtered maps asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// SMXSearchFilter _Filter - Search filter applied
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncSearch(Text _Name, Text _Site, SMXSearchFilter _Filter, Boolean _UseCache) {
	return Http::AsyncGET(_Name, """https://{{{_Site}}}.mania-exchange.com/tracksearch2/search?api=on{{{Private_BuildSearchParams(_Filter)}}}""", _UseCache);
}

/*
// SMXTrack[] GetAsyncSearchResult(Text _Name)
// Gets result from AsyncSearch request.

// Text _Name - Custom request name

// Returns list of tracks found
*/
SMXTrack[] GetAsyncSearchResult(Text _Name) {
	declare SMXTrack[] SearchResult;
	
	if(Http::IsCompleted(_Name, True)) {
		if(Http::IsSuccessful(_Name)) {
			declare SMXSearchResult ResultTracks;
			declare JsonSuccess = ResultTracks.fromjson(Http::GetResult(_Name));
			foreach(R, ResultTracks.results) {
				SearchResult.add(R);
			}
		}
		Http::Destroy(_Name);
	}
	
	return SearchResult;
}

/*
// Boolean AsyncSearchMappack(Text _Name, Text _Site, SMXSearchMappackFilter _Filter, Boolean _UseCache)
// Searches for all filtered mappacks asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// SMXSearchMappackFilter _Filter - Search filter applied
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncSearchMappack(Text _Name, Text _Site, SMXSearchMappackFilter _Filter, Boolean _UseCache) {
	return Http::AsyncGET(_Name, """https://{{{_Site}}}.mania-exchange.com/mappack/search?api=on{{{Private_BuildSearchMappackParams(_Filter)}}}""", _UseCache);
}

/*
// SMXMappack[] GetAsyncSearchMappackResult(Text _Name)
// Gets result from AsyncSearchMappack request.

// Text _Name - Custom request name

// Returns list of mappacks found
*/
SMXMappack[] GetAsyncSearchMappackResult(Text _Name) {
	declare SMXMappack[] SearchResult;
	
	if(Http::IsCompleted(_Name, True)) {
		if(Http::IsSuccessful(_Name)) {
			declare JsonSuccess = SearchResult.fromjson(Http::GetResult(_Name));
		}
		Http::Destroy(_Name);
	}
	
	return SearchResult;
}

/*
// Boolean AsyncTrackMultiple(Text _Name, Text _Site, Integer[] _TrackIds, Boolean _UseCache)
// Finds track information from track IDs asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// Text[] _TrackIds - Array of track IDs
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncTrackMultiple(Text _Name, Text _Site, Text[] _TrackIds, Boolean _UseCache) {
	declare Text TrackIdText;
	if(_TrackIds.count > 0) {
		TrackIdText ^= _TrackIds[0];
		for(i,1,_TrackIds.count-1) TrackIdText ^= ","^_TrackIds[i];
	}
	return Http::AsyncGET(_Name,"""https://api.mania-exchange.com/{{{_Site}}}/maps/{{{TrackIdText}}}""", _UseCache);
}

/*
// SMXTrack[] GetAsyncTrackMultipleResult(Text _Name)
// Gets result from AsyncTrackMultiple request.

// Text _Name - Custom request name

// Returns list of tracks found using the same indexes _TrackIds have. If track ID not found, default SMXTrack is used
*/
SMXTrack[] GetAsyncTrackMultipleResult(Text _Name) {
	declare SMXTrack[] TrackMultipleResult;
	
	if(Http::IsCompleted(_Name, True)) {
		if(Http::IsSuccessful(_Name)) {
			declare JsonSuccess = TrackMultipleResult.fromjson(Http::GetResult(_Name));
		}
		Http::Destroy(_Name);
	}
	
	return TrackMultipleResult;
}

/*
// Boolean AsyncTrack(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache)
// Finds track information from track ID asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// Text[] _TrackId - Track ID
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncTrack(Text _Name, Text _Site, Text _TrackId, Boolean _UseCache) {
	return AsyncTrackMultiple(_Name, _Site, [_TrackId], _UseCache);
}

/*
// SMXTrack GetAsyncTrackResult(Text _Name)
// Gets result from AsyncTrack request.

// Text _Name - Custom request name

// Returns SMXTrack with non-default data if track found
*/
SMXTrack GetAsyncTrackResult(Text _Name) {
	declare SMXTrack Info;
	declare Tracks = GetAsyncTrackMultipleResult(_Name);
	if(Tracks.count > 0) Info = Tracks[0];
	return Info;
}

/*
// Boolean AsyncMappackMultiple(Text _Name, Text _Site, Integer[] _MappackIds, Text _Secret, Boolean _UseCache)
// Finds mappack information from mappack IDs asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// Integer[] _MappackIds - Array of mappack IDs
// Text _Secret - Mappack secret
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncMappackMultiple(Text _Name, Text _Site, Integer[] _MappackIds, Text _Secret, Boolean _UseCache) {
	declare Text MappackIdText;
	if(_MappackIds.count > 0) {
		MappackIdText ^= _MappackIds[0];
		for(i,1,_MappackIds.count-1) MappackIdText ^= ","^_MappackIds[i];
	}
	return Http::AsyncGET(_Name,"""https://api.mania-exchange.com/{{{_Site}}}/mappacks/{{{MappackIdText}}}/?={{{_Secret}}}""", _UseCache);
}

/*
// SMXMappack[] GetAsyncMappackMultipleResult(Text _Name)
// Gets result from AsyncMappackMultiple request.

// Text _Name - Custom request name

// Returns list of mappacks found using the same indexes _MappackIds have. If mappack ID not found, default SMXMappack is used
*/
SMXMappack[] GetAsyncMappackMultipleResult(Text _Name) {
	declare SMXMappack[] MappackMultipleResult;
	
	if(Http::IsCompleted(_Name, True)) {
		if(Http::IsSuccessful(_Name)) {
			declare JsonSuccess = MappackMultipleResult.fromjson(Http::GetResult(_Name));
		}
		Http::Destroy(_Name);
	}
	
	return MappackMultipleResult;
}

/*
// Boolean AsyncMappack(Text _Name, Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache)
// Finds mappack information from mappack ID asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// Integer _MappackId - Mappack ID
// Text _Secret - Mappack secret
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncMappack(Text _Name, Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache) {
	return AsyncMappackMultiple(_Name, _Site, [_MappackId], _Secret, _UseCache);
}

/*
// SMXMappack GetAsyncMappackResult(Text _Name)
// Gets result from AsyncMappack request.

// Text _Name - Custom request name

// Returns SMXMappack with non-default data if mappack found
*/
SMXMappack GetAsyncMappackResult(Text _Name) {
	declare SMXMappack Info;
	declare Mappacks = GetAsyncMappackMultipleResult(_Name);
	if(Mappacks.count > 0) Info = Mappacks[0];
	return Info;
}

/*
// Boolean AsyncMappackTracks(Text _Name, Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache)
// Finds mappack tracks from mappack ID asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// Integer _MappackId - Mappack ID
// Text _Secret - Mappack secret
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncMappackTracks(Text _Name, Text _Site, Integer _MappackId, Text _Secret, Boolean _UseCache) {
	return Http::AsyncGET(_Name,"""https://api.mania-exchange.com/{{{_Site}}}/mappacks/{{{_MappackId}}}/tracks/?={{{_Secret}}}""", _UseCache);
}

/*
// SMXTrack[] GetAsyncMappackTracksResult(Text _Name)
// Gets result from AsyncMappackTracks request.

// Text _Name - Custom request name

// Returns tracks in the mappack
*/
SMXTrack[] GetAsyncMappackTracksResult(Text _Name) {
	declare SMXTrack[] MappackTracksResult;
	
	if(Http::IsCompleted(_Name, True)) {
		if(Http::IsSuccessful(_Name)) {
			declare JsonSuccess = MappackTracksResult.fromjson(Http::GetResult(_Name));
		}
		Http::Destroy(_Name);
	}
	
	return MappackTracksResult;
}

/*
// Boolean AsyncTrackWorldRecord(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache)
// Gets world record of a specific track asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncTrackWorldRecord(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache) {
	return Http::AsyncGET(_Name,"""https://api.mania-exchange.com/{{{_Site}}}/tracks/worldrecord/{{{_TrackId}}}""", _UseCache);
}

/*
// SMXReplay GetAsyncTrackWorldRecordResult(Text _Name)
// Gets result from AsyncTrackWorldRecord request.

// Text _Name - Custom request name

// Returns replay information about the world record
*/
SMXReplay GetAsyncTrackWorldRecordResult(Text _Name) {
	declare SMXReplay WorldRecord;
	if(Http::IsCompleted(_Name, True)) {
		if(Http::IsSuccessful(_Name))
			declare JsonSuccess = WorldRecord.fromjson(Http::GetResult(_Name));
		Http::Destroy(_Name);
	}
	return WorldRecord;
}

/*
// Boolean AsyncTrackReplays(Text _Name, Text _Site, Integer _TrackId, Integer _Amount, Boolean _UseCache)
// Gets specific amount of replays from a specific track asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID
// Integer _Amount - Amount of replays to get, max 25
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncTrackReplays(Text _Name, Text _Site, Integer _TrackId, Integer _Amount, Boolean _UseCache) {
	return Http::AsyncGET(_Name,"""https://api.mania-exchange.com/{{{_Site}}}/replays/{{{_TrackId}}}/{{{_Amount}}}""", _UseCache);
}

/*
// Boolean AsyncTrackReplays(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache)
// Gets 25 replays from a specific track asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncTrackReplays(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache) {
	return AsyncTrackReplays(_Name, _Site, _TrackId, 25, _UseCache);
}

/*
// SMXReplay[] GetAsyncTrackReplaysResult(Text _Name)
// Gets result from AsyncTrackReplays request.

// Text _Name - Custom request name

// Returns track replays
*/
SMXReplay[] GetAsyncTrackReplaysResult(Text _Name) {
	declare SMXReplay[] TrackReplaysResult;
	
	if(Http::IsCompleted(_Name, True)) {
		if(Http::IsSuccessful(_Name)) {
			declare JsonSuccess = TrackReplaysResult.fromjson(Http::GetResult(_Name));
		}
		Http::Destroy(_Name);
	}
	return TrackReplaysResult;
}

/*
// Boolean AsyncTrackEmbeddedObjects(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache)
// Gets embedded objects asynchronously.

// Text _Name - Custom request name
// Text _Site - "tm" or "sm" exchange
// Integer _TrackId - Track ID
// Boolean _UseCache - If to cache the result, True recommended

// Returns True if request is possible
*/
Boolean AsyncTrackEmbeddedObjects(Text _Name, Text _Site, Integer _TrackId, Boolean _UseCache) {
	return Http::AsyncGET(_Name,"""https://api.mania-exchange.com/{{{_Site}}}/tracks/embeddedobjects/{{{_TrackId}}}""", _UseCache);
}

/*
// SMXEmbeddedObject[] GetAsyncTrackEmbeddedObjectsResult(Text _Name)
// Gets result from AsyncTrackEmbeddedObjects request.

// Text _Name - Custom request name

// Returns list of embedded objects
*/
SMXEmbeddedObject[] GetAsyncTrackEmbeddedObjectsResult(Text _Name) {
	declare SMXEmbeddedObject[] TrackEmbeddedObjectsResult;
	
	if(Http::IsCompleted(_Name, True)) {
		if(Http::IsSuccessful(_Name)) {
			declare JsonSuccess = TrackEmbeddedObjectsResult.fromjson(Http::GetResult(_Name));
		}
		Http::Destroy(_Name);
	}
	return TrackEmbeddedObjectsResult;
}

/*
// CHttpRequest AsyncGet(Text _Name)
// Gets asynchonous request, completed or pending.

// Text _Name - Identification name

// Returns request that can or cannot be in the progress
*/
CHttpRequest AsyncGet(Text _Name) {
	return Http::Get(_Name);
}

/*
// Void AsyncDestroy(Text _Name)
// Destroys an aynchonous request.

// Text _Name - Identification name
*/
Void AsyncDestroy(Text _Name) {
	Http::Destroy(_Name);
}

/*
// Boolean AsyncIsCompleted(Text _Name, Boolean _NoLog)
// Checks if the asynchronous request was completed.

// Text _Name - Identification name
// Boolean _NoLog - If to not inform to the console

// Returns True if the request is completed but not destroyed.
*/
Boolean AsyncIsCompleted(Text _Name, Boolean _NoLog) {
	return Http::IsCompleted(_Name, _NoLog);
}

/*
// Boolean AsyncIsCompleted(Text _Name)
// Checks if the asynchronous request was completed.

// Text _Name - Identification name

// Returns True if the request is completed but not destroyed.
*/
Boolean AsyncIsCompleted(Text _Name) {
	return AsyncIsCompleted(_Name, False);
}

/*
// Boolean AsyncIsSuccessful(Text _Name)
// Checks if the asynchonous request was completed successfully.

// Text _Name - Identification name

// Returns True if the request is completed with a positive response (between 200 inclusively and 300 exclusively HTTP code).
*/
Boolean AsyncIsSuccessful(Text _Name) {
	return Http::IsSuccessful(_Name);
}

/*
// Integer AsyncGetStatusCode(Text _Name, Boolean _NoLog)
// Gets status code of the asynchronous request.

// Text _Name - Identification name
// Boolean _NoLog - If to not inform to the console

// Returns status code number of a completed request, or 0 if the request is not completed or does not exist.
*/
Integer AsyncGetStatusCode(Text _Name, Boolean _NoLog) {
	return Http::GetStatusCode(_Name, _NoLog);
}

/*
// Integer AsyncGetStatusCode(Text _Name)
// Gets status code of the asynchronous request.

// Text _Name - Identification name

// Returns status code number of a completed request, or 0 if the request is not completed or does not exist.
*/
Integer AsyncGetStatusCode(Text _Name) {
	return AsyncGetStatusCode(_Name, False);
}

/*
// Text AsyncGetResult(Text _Name)
// Gets result of the asynchronous request.

// Text _Name - Identification name

// Returns result of a completed request, or empty string if the request is not completed or does not exist.
*/
Text AsyncGetResult(Text _Name) {
	return Http::GetResult(_Name);
}