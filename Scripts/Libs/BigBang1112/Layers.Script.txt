/*
// Layers.Script.txt
// by BigBang1112
// part of Universe Library Set

// Layers library similar to Nadeo's one that supports CManiaApp.

// This library does not depend on any other library from the Universe Library Set.
// You can use this library independently, although it's recommended to use the whole set.
*/

/*
// Compatible contexts:
// - CManiaApp
*/

/*
// Boolean Exists(Text _LayerName)
// CUILayer Get(Text _LayerName)
// CUILayer Get(Ident _LayerId)
// Text GetName(Ident _LayerId)
// Text GetName(CUILayer _Layer)
// Void Destroy(Text _LayerName)
// Void DestroyAll()
// Void Create(Text _LayerName, Text _LayerManialink, Boolean IsVisible, CUILayer::EUILayerType _LayerType)
// Void Create(Text _LayerName, Text _LayerManialink, Boolean IsVisible)
// Void Create(Text _LayerName, Text _LayerManialink)
// Void Create(Text _LayerName)
// Void SetType(Text _LayerName, CUILayer::EUILayerType _LayerType)
// Void SetAnimationIn(Text _LayerName, CUILayer::EUILayerAnimation _Animation)
// Void SetAnimationOut(Text _LayerName, CUILayer::EUILayerAnimation _Animation)
// Void SetAnimationInOut(Text _LayerName, CUILayer::EUILayerAnimation _Animation)
// Void Show(Text _LayerName)
// Void ShowOnly(Text _LayerName)
// Void Hide(Text _LayerName)
// Void SendEvent(Text _LayerName, Text _Type, Text[] _Data)
// Void SendEvent(Text _LayerName, Text _Type, Text _Data)
// Void SendEvent(Text _LayerName, Text _Type)
*/

declare Ident[Text] G_Layers;

Boolean Exists(Text _LayerName) {
	if(G_Layers.existskey(_LayerName)) return True;
	return False;
}

CUILayer Get(Text _LayerName) {
	if(Exists(_LayerName)) return UILayers[G_Layers[_LayerName]];
	return Null;
}

CUILayer Get(Ident _LayerId) {
	if(G_Layers.exists(_LayerId)) return UILayers[_LayerId];
	return Null;
}

Text GetName(Ident _LayerId) {
	if(G_Layers.exists(_LayerId)) return G_Layers.keyof(_LayerId);
	return "";
}

Text GetName(CUILayer _Layer) {
	if (_Layer == Null) return "";
	return GetName(_Layer.Id);
}

Void Destroy(Text _LayerName) {
	if(!Exists(_LayerName)) return;
	UILayerDestroy(UILayers[G_Layers[_LayerName]]);
	declare Removed = G_Layers.removekey(_LayerName);
}

Void DestroyAll() {
	foreach(LayerName => LayerId in G_Layers) {
		Destroy(LayerName);
	}
}

Void Create(Text _LayerName, Text _LayerManialink, Boolean _IsVisible, Boolean _ShowEvent, CUILayer::EUILayerType _LayerType) {
	if(Exists(_LayerName)) Destroy(_LayerName);
	declare NewLayer = UILayerCreate();
	NewLayer.ManialinkPage = _LayerManialink;
	if(_ShowEvent) LayerCustomEvent(NewLayer, "Show", []);
	NewLayer.IsVisible = _IsVisible;
	NewLayer.Type = _LayerType;
	G_Layers[_LayerName] = NewLayer.Id;
}

Void Create(Text _LayerName, Text _LayerManialink, Boolean _IsVisible, Boolean _ShowEvent) {
	Create(_LayerName, _LayerManialink, _IsVisible, _ShowEvent, CUILayer::EUILayerType::Normal);
}

Void Create(Text _LayerName, Text _LayerManialink, Boolean _IsVisible) {
	Create(_LayerName, _LayerManialink, _IsVisible, False, CUILayer::EUILayerType::Normal);
}

Void Create(Text _LayerName, Text _LayerManialink) {
	Create(_LayerName, _LayerManialink, False);
}

Void Create(Text _LayerName) {
	Create(_LayerName, "", False);
}

Void Update(Text _LayerName, Text _LayerManialink) {
	declare Layer <=> Get(_LayerName);
	if(Layer == Null) return;
	Layer.ManialinkPage = _LayerManialink;
}

Void SetType(Text _LayerName, CUILayer::EUILayerType _LayerType) {
	declare Layer <=> Get(_LayerName);
	if(Layer == Null) return;
	Layer.Type = _LayerType;
}

Void SetAnimationIn(Text _LayerName, CUILayer::EUILayerAnimation _Animation) {
	declare Layer <=> Get(_LayerName);
	if(Layer == Null) return;
	Layer.InAnimation = _Animation;
}

Void SetAnimationOut(Text _LayerName, CUILayer::EUILayerAnimation _Animation) {
	declare Layer <=> Get(_LayerName);
	if(Layer == Null) return;
	Layer.OutAnimation = _Animation;
}

Void SetAnimationInOut(Text _LayerName, CUILayer::EUILayerAnimation _Animation) {
	declare Layer <=> Get(_LayerName);
	if (Layer == Null) return;
	Layer.InOutAnimation = _Animation;
}

Void Show(Text _LayerName, Boolean _ShowEvent) {
	declare Layer <=> Get(_LayerName);
	if(Layer == Null) return;
	if(_ShowEvent) LayerCustomEvent(Layer, "Show", []);
	Layer.IsVisible = True;
}

Void Show(Text _LayerName) {
	Show(_LayerName, False);
}

Void Hide(Text _LayerName, Boolean _HideEvent) {
	declare Layer <=> Get(_LayerName);
	if(Layer == Null) return;
	if(_HideEvent) LayerCustomEvent(Layer, "Hide", []);
	else Get(_LayerName).IsVisible = False;
}

Void Hide(Text _LayerName) {
	Hide(_LayerName, False);
}

Void ShowOnly(Text _LayerName, Boolean _ShowEvent, Boolean _HideEvent) {
	foreach(Layer,G_Layers) Hide(_LayerName, _HideEvent);
	Show(_LayerName, _ShowEvent);
}

Void ShowOnly(Text _LayerName) {
	ShowOnly(_LayerName, False, False);
}

Void SendEvent(Text _LayerName, Text _Type, Text[] _Data) {
	LayerCustomEvent(Get(_LayerName), _Type, _Data);
}

Void SendEvent(Text _LayerName, Text _Type, Text _Data) {
	LayerCustomEvent(Get(_LayerName), _Type, [_Data]);
}

Void SendEvent(Text _LayerName, Text _Type) {
	LayerCustomEvent(Get(_LayerName), _Type, []);
}

Void Event(CManiaAppEvent _Event) {
	if(_Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		if(G_Layers.exists(_Event.CustomEventLayer.Id)) {
			if(_Event.CustomEventType == "Hide_Response") {
				_Event.CustomEventLayer.IsVisible = False;
			}
		}
	}
}