/*
// Time.Script.txt
// by BigBang1112
// part of Universe Library Set

// Various time related functions.

// This library does not depend on any other library from the Universe Library Set.
// You can use this library independently, although it's recommended to use the whole set.
*/

/*
// Compatible contexts:
// - CManiaApp
// - CMode
// - CServerPlugin
*/

/*
// Void Watch_Create(Text _WatchName)
// Void Watch_Remove(Text _WatchName)
// Boolean Watch_Start(Text _WatchName)
// Integer Watch_Track(Text _WatchName)
// Integer Watch_Stop(Text _WatchName)
// Boolean Watch_Pause(Text _WatchName)
// Boolean Watch_Unpause(Text _WatchName)
// Void Stamp_Create(Text _StampName, Integer _Offset)
// Void Stamp_Create(Text _StampName)
// Boolean Stamp_CreateOnce(Text _StampName, Integer _Offset)
// Boolean Stamp_CreateOnce(Text _StampName)
// Void Stamp_Remove(Text _StampName) 
// Boolean Stamp_Reached(Text _StampName)
*/

#Include "TextLib" as TextLib

#Struct SPause {
	Integer Start;
	Integer Time;
}

#Struct SWatch {
	Integer StartTime;
	SPause[] Pauses;
}

#Struct SStamp {
	Integer Time;
}

declare SWatch[Text] Watches;
declare SStamp[Text] Stamps;

Void Watch_Create(Text _WatchName) {
	declare SWatch Watch;
	Watch.StartTime = -1;
	Watches[_WatchName] = Watch;
}

Void Watch_Remove(Text _WatchName) {
	declare Removed = Watches.removekey(_WatchName);
}

Boolean Watch_Start(Text _WatchName) {
	if(Watches[_WatchName].StartTime == -1)
		Watches[_WatchName].StartTime = Now;
	else return False;
	return True;
}

Integer Watch_Track(Text _WatchName) {
	declare Time = Now - Watches[_WatchName].StartTime;
	foreach(Pause, Watches[_WatchName].Pauses) Time -= Pause.Time;
	return Time;
}

Integer Watch_Stop(Text _WatchName) {
	declare EndTime = Watch_Track(_WatchName);
	Watch_Create(_WatchName);
	return EndTime;
}

Boolean Watch_Pause(Text _WatchName) {
	if(Watches[_WatchName].Pauses.count > 0 && Watches[_WatchName].Pauses[Watches[_WatchName].Pauses.count-1].Time != -1) {
		declare SPause Pause;
		Pause.Start = Now;
		Pause.Time = -1;
		Watches[_WatchName].Pauses.add(Pause);
		return True;
	}

	return False;
}

Boolean Watch_Unpause(Text _WatchName) {
	if(Watches[_WatchName].Pauses.count > 0 && Watches[_WatchName].Pauses[Watches[_WatchName].Pauses.count-1].Time == -1) {
		declare LastPause = Watches[_WatchName].Pauses[Watches[_WatchName].Pauses.count-1];
		LastPause.Time = Now - LastPause.Start;
		return True;
	}

	return False;
}

Void Stamp_Create(Text _StampName, Integer _Offset) {
	declare SStamp Stamp;
	Stamp.Time = Now + _Offset;
	Stamps[_StampName] = Stamp;
}

Void Stamp_Create(Text _StampName) {
	Stamp_Create(_StampName, 0);
}

Boolean Stamp_CreateOnce(Text _StampName, Integer _Offset) {
	if(Stamps.existskey(_StampName)) return False;
	Stamp_Create(_StampName, _Offset);
	return True;
}

Boolean Stamp_CreateOnce(Text _StampName) {
	return Stamp_CreateOnce(_StampName, 0);
}

Void Stamp_Remove(Text _StampName) {
	declare Removed = Stamps.removekey(_StampName);
}

Boolean Stamp_Reached(Text _StampName) {
	if(Stamps.existskey(_StampName))
	if(Now >= Stamps[_StampName].Time) {
		Stamp_Remove(_StampName);
		return True;
	}
	return False;
}

declare Real H;

Real[] GetTimeOpacities() {
	declare Time = TextLib::Split(" ", System.CurrentLocalDateText)[1];
	declare Hour = TextLib::ToReal(TextLib::Split(":",Time)[0]);
	declare Minute = TextLib::ToReal(TextLib::Split(":",Time)[1]);
	declare RealHour = Hour + Minute/60;
	
	declare Opacities = [0.,0.,0.,0.];
	if(RealHour >= 4 && RealHour <= 8) {
		Opacities[0] = (RealHour-4)/4.;
		Opacities[1] = 0.;
		Opacities[2] = 0.;
		Opacities[3] = 1-(RealHour-4)/4.;
	}
	else if(RealHour >= 8 && RealHour <= 12) {
		Opacities[0] = 1-(RealHour-8)/4.;
		Opacities[1] = (RealHour-8)/4.;
		Opacities[2] = 0.;
		Opacities[3] = 0.;
	}
	else if(RealHour >= 12 && RealHour <= 14) {
		Opacities[0] = 0.;
		Opacities[1] = 1.;
		Opacities[2] = 0.;
		Opacities[3] = 0.;
	}
	else if(RealHour >= 14 && RealHour <= 18) {
		Opacities[0] = 0.;
		Opacities[1] = 1-(RealHour-14)/4.;
		Opacities[2] = (RealHour-14)/4.;
		Opacities[3] = 0.;
	}
	else if(RealHour >= 18 && RealHour <= 22) {
		Opacities[0] = 0.;
		Opacities[1] = 0.;
		Opacities[2] = 1-(RealHour-18)/4.;
		Opacities[3] = (RealHour-18)/4.;
	}
	else if(RealHour >= 22 || RealHour <= 4) {
		Opacities[0] = 0.;
		Opacities[1] = 0.;
		Opacities[2] = 0.;
		Opacities[3] = 1.;
	}
	return Opacities;
}