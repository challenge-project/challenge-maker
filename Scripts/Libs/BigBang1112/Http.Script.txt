/*
// Http.Script.txt
// by BigBang1112
// part of Universe Library Set

// Better readable and simplified HTTP request flow.
// Async requests do not require declaring variables.
// Does not touch problematic event system.

// This library does depend on more libraries from the Universe Library Set:
// - Log.Script.txt
// You only need to use the libraries above, although it's recommended to use the whole set.
*/

/*
// Compatible contexts:
// - CManiaApp
// - CMode
// - CServerPlugin
*/

/*
// CHttpRequest SyncGET(Text _Url, Boolean _UseCache, Text _AdditionalHeaders, Boolean _NoLog)
// CHttpRequest SyncGET(Text _Url, Boolean _UseCache, Text _AdditionalHeaders)
// CHttpRequest SyncGET(Text _Url, Boolean _UseCache)
// CHttpRequest SyncGET(Text _Url)
// Text SyncGET_Result(Text _Url, Boolean _UseCache, Text _AdditionalHeaders, Boolean _NoLog)
// Text SyncGET_Result(Text _Url, Boolean _UseCache, Text _AdditionalHeaders)
// Text SyncGET_Result(Text _Url, Boolean _UseCache)
// Text SyncGET_Result(Text _Url)
// CHttpRequest SyncPOST(Text _Url, Text _Resource, Text _AdditionalHeaders, Boolean _NoLog)
// CHttpRequest SyncPOST(Text _Url, Text _Resource, Text _AdditionalHeaders)
// CHttpRequest SyncPOST(Text _Url, Text _Resource)
// Text SyncPOST_Result(Text _Url, Text _Resource, Text _AdditionalHeaders, Boolean _NoLog)
// Text SyncPOST_Result(Text _Url, Text _Resource, Text _AdditionalHeaders)
// Text SyncPOST_Result(Text _Url, Text _Resource)
// CHttpRequest SyncPOSTFile(Text _Url, Text _FileName, Text _AdditionalHeaders, Boolean _NoLog)
// CHttpRequest SyncPOSTFile(Text _Url, Text _FileName, Text _AdditionalHeaders)
// CHttpRequest SyncPOSTFile(Text _Url, Text _FileName)
// Text SyncPOSTFile_Result(Text _Url, Text _FileName, Text _AdditionalHeaders, Boolean _NoLog)
// Text SyncPOSTFile_Result(Text _Url, Text _FileName, Text _AdditionalHeaders)
// Text SyncPOSTFile_Result(Text _Url, Text _FileName)

// Boolean AsyncGET(Text _Name, Text _Url, Boolean _UseCache, Text _AdditionalHeaders, Boolean _NoLog)
// Boolean AsyncGET(Text _Name, Text _Url, Boolean _UseCache, Text _AdditionalHeaders)
// Boolean AsyncGET(Text _Name, Text _Url, Boolean _UseCache)
// Boolean AsyncGET(Text _Name, Text _Url)
// Boolean AsyncPOST(Text _Name, Text _Url, Text _Resource, Text _AdditionalHeaders, Boolean _NoLog)
// Boolean AsyncPOST(Text _Name, Text _Url, Text _Resource, Text _AdditionalHeaders)
// Boolean AsyncPOST(Text _Name, Text _Url, Text _Resource)
// Boolean AsyncPOSTFile(Text _Name, Text _Url, Text _FileName, Text _AdditionalHeaders, Boolean _NoLog)
// Boolean AsyncPOSTFile(Text _Name, Text _Url, Text _FileName, Text _AdditionalHeaders)
// Boolean AsyncPOSTFile(Text _Name, Text _Url, Text _FileName)

// Void Destroy(Text _Name)
// Boolean IsCompleted(Text _Name)
// Boolean IsSuccessful(Text _Name)
// Integer GetStatusCode(Text _Name)
*/

#Include "Libs/BigBang1112/Log.Script.txt" as Log

#Struct SRequest {
	Integer Timestamp;
	Ident Request;
}

#Const C_StatusCode_Offline 10006

declare SRequest[Text] G_Requests;

/*
// CHttpRequest SyncGET(Text _Url, Boolean _UseCache, Text _AdditionalHeaders, Boolean _NoLog)
// Requests an URL as GET synchronously.

// Text _Url - Url to request
// Boolean _UseCache - If to cache the result, True recommended for expensive requests
// Text _AdditionalHeaders - More info to the request
// Boolean _NoLog - If to not inform to the console

// Returns finished/completed request, should be destroyed manually after being used
*/
CHttpRequest SyncGET(Text _Url, Boolean _UseCache, Text _AdditionalHeaders, Boolean _NoLog) {
	if(Http.SlotsAvailable == 0) return Null;
	
	if(!_NoLog) log("[HTTP] Sync requesting GET: " ^ _Url);
	
	declare Request = Http.CreateGet(_Url, _UseCache, _AdditionalHeaders);
	wait(Request.IsCompleted);
	return Request;
}

CHttpRequest SyncGET(Text _Url, Boolean _UseCache, Text _AdditionalHeaders) {
	return SyncGET(_Url, _UseCache, _AdditionalHeaders, False);
}

/*
// CHttpRequest SyncGET(Text _Url, Boolean _UseCache)
// Requests an URL as GET synchronously.

// Text _Url - Url to request
// Boolean _UseCache - If to cache the result, True recommended for expensive requests

// Returns finished/completed request, should be destroyed manually after being used
*/
CHttpRequest SyncGET(Text _Url, Boolean _UseCache) {
	return SyncGET(_Url, _UseCache, "");
}

/*
// CHttpRequest SyncGET(Text _Url)
// Requests an URL as GET synchronously.

// Text _Url - Url to request

// Returns uncached finished/completed request, should be destroyed manually after being used
*/
CHttpRequest SyncGET(Text _Url) {
	return SyncGET(_Url, False, "");
}

/*
// Text SyncGET_Result(Text _Url, Boolean _UseCache, Text _AdditionalHeaders, Boolean _NoLog)
// Requests an URL as GET synchronously as result.

// Text _Url - Url to request
// Boolean _UseCache - If to cache the result, True recommended for expensive requests
// Text _AdditionalHeaders - More info to the request
// Boolean _NoLog - If to not inform to the console

// Returns request result, or empty string if unsuccessful
*/
Text SyncGET_Result(Text _Url, Boolean _UseCache, Text _AdditionalHeaders, Boolean _NoLog) {	
	declare Request = SyncGET(_Url, _UseCache, _AdditionalHeaders, _NoLog);
	if(Request.StatusCode >= 200 && Request.StatusCode < 300) {
		declare Result = Request.Result;
		Http.Destroy(Request);
		return Result;
	}
	return "";
}

Text SyncGET_Result(Text _Url, Boolean _UseCache, Text _AdditionalHeaders) {	
	return SyncGET_Result(_Url, _UseCache, _AdditionalHeaders, False);
}

/*
// Text SyncGET_Result(Text _Url, Boolean _UseCache)
// Requests an URL as GET synchronously as result.

// Text _Url - Url to request
// Boolean _UseCache - If to cache the result, True recommended for expensive requests

// Returns request result, or empty string if unsuccessful
*/
Text SyncGET_Result(Text _Url, Boolean _UseCache) {
	return SyncGET_Result(_Url, _UseCache, "");
}

/*
// Text SyncGET_Result(Text _Url)
// Requests an URL as GET synchronously as result.

// Text _Url - Url to request

// Returns request result, or empty string if unsuccessful
*/
Text SyncGET_Result(Text _Url) {
	return SyncGET_Result(_Url, False, "");
}

/*
// CHttpRequest SyncPOST(Text _Url, Text _Resource, Text _AdditionalHeaders, Boolean _NoLog)
// Requests an URL with text content as POST synchronously.

// Text _Url - Url to request
// Text _Resource - Text to provide for the request
// Text _AdditionalHeaders - More info to the request
// Boolean _NoLog - If to not inform to the console

// Returns finished/completed request, should be destroyed manually after being used.
*/
CHttpRequest SyncPOST(Text _Url, Text _Resource, Text _AdditionalHeaders, Boolean _NoLog) {
	if(Http.SlotsAvailable == 0) return Null;
	
	if(!_NoLog) Log::Info("HTTP", "Sync requesting POST: " ^ _Url);
	
	declare Request = Http.CreatePost(_Url, _Resource, _AdditionalHeaders);
	wait(Request.IsCompleted);
	return Request;
}

CHttpRequest SyncPOST(Text _Url, Text _Resource, Text _AdditionalHeaders) {
	return SyncPOST(_Url, _Resource, _AdditionalHeaders, False);
}

/*
// CHttpRequest SyncPOST(Text _Url, Text _Resource)
// Requests an URL with text content as POST synchronously.

// Text _Url - Url to request
// Text _Resource - Text to provide for the request

// Returns finished/completed request, should be destroyed manually after being used.
*/
CHttpRequest SyncPOST(Text _Url, Text _Resource) {
	return SyncPOST(_Url, _Resource, "");
}

/*
// Text SyncPOST_Result(Text _Url, Text _Resource, Text _AdditionalHeaders, Boolean _NoLog)
// Requests an URL with text content as POST synchronously as result.

// Text _Url - Url to request
// Text _Resource - Text to provide for the request
// Text _AdditionalHeaders - More info to the request
// Boolean _NoLog - If to not inform to the console

// Returns request result, or empty string if unsuccessful.
*/
Text SyncPOST_Result(Text _Url, Text _Resource, Text _AdditionalHeaders, Boolean _NoLog) {
	declare Request = SyncPOST(_Url, _Resource, _AdditionalHeaders, _NoLog);
	if(Request.StatusCode >= 200 && Request.StatusCode < 300) {
		declare Result = Request.Result;
		Http.Destroy(Request);
		return Result;
	}
	return "";
}

Text SyncPOST_Result(Text _Url, Text _Resource, Text _AdditionalHeaders) {
	return SyncPOST_Result(_Url, _Resource, _AdditionalHeaders, False);
}

/*
// Text SyncPOST_Result(Text _Url, Text _Resource)
// Requests an URL with text content as POST synchronously as result.

// Text _Url - Url to request
// Text _Resource - Text to provide for the request

// Returns request result, or empty string if unsuccessful.
*/
Text SyncPOST_Result(Text _Url, Text _Resource) {
	return SyncPOST_Result(_Url, _Resource, "");
}

/*
// CHttpRequest SyncPOSTFile(Text _Url, Text _FileName, Text _AdditionalHeaders, Boolean _NoLog)
// Requests an URL with file content as POST synchronously.

// Text _Url - Url to request
// Text _FileName - File name relative to Maniaplanet folder
// Text _AdditionalHeaders - More info to the request
// Boolean _NoLog - If to not inform to the console

// Returns finished/completed request, should be destroyed manually after being used.
*/
CHttpRequest SyncPOSTFile(Text _Url, Text _FileName, Text _AdditionalHeaders, Boolean _NoLog) {
	if(Http.SlotsAvailable == 0) return Null;
	
	if(!_NoLog) Log::Info("HTTP", "Sync requesting POST FILE: " ^ _Url);
	
	declare Request = Http.CreatePostFile(_Url, _FileName, _AdditionalHeaders);
	if(Request == Null) return Request;
	wait(Request.IsCompleted);
	return Request;
}

CHttpRequest SyncPOSTFile(Text _Url, Text _FileName, Text _AdditionalHeaders) {
	return SyncPOSTFile(_Url, _FileName, _AdditionalHeaders, False);
}

/*
// CHttpRequest SyncPOSTFile(Text _Url, Text _FileName)
// Requests an URL with file content as POST synchronously.

// Text _Url - Url to request
// Text _FileName - File name relative to Maniaplanet folder

// Returns finished/completed request, should be destroyed manually after being used.
*/
CHttpRequest SyncPOSTFile(Text _Url, Text _FileName) {
	return SyncPOSTFile(_Url, _FileName, "");
}

/*
// Text SyncPOSTFile_Result(Text _Url, Text _FileName, Text _AdditionalHeaders, Boolean _NoLog)
// Requests an URL with file content as POST synchronously as result.

// Text _Url - Url to request
// Text _FileName - File name relative to Maniaplanet folder
// Text _AdditionalHeaders - More info to the request
// Boolean _NoLog - If to not inform to the console

// Returns request result, or empty string if unsuccessful.
*/
Text SyncPOSTFile_Result(Text _Url, Text _FileName, Text _AdditionalHeaders, Boolean _NoLog) {
	declare Request = SyncPOSTFile(_Url, _FileName, _AdditionalHeaders, _NoLog);
	if(Request.StatusCode >= 200 && Request.StatusCode < 300) {
		declare Result = Request.Result;
		Http.Destroy(Request);
		return Result;
	}
	return "";
}

Text SyncPOSTFile_Result(Text _Url, Text _FileName, Text _AdditionalHeaders) {
	return SyncPOSTFile_Result(_Url, _FileName, _AdditionalHeaders, False);
}

/*
// Text SyncPOSTFile_Result(Text _Url, Text _FileName)
// Requests an URL with file content as POST synchronously as result.

// Text _Url - Url to request
// Text _FileName - File name relative to Maniaplanet folder

// Returns request result, or empty string if unsuccessful.
*/
Text SyncPOSTFile_Result(Text _Url, Text _FileName) {
	return SyncPOSTFile_Result(_Url, _FileName, "");
}

/*
// Boolean AsyncGET(Text _Name, Text _Url, Boolean _UseCache, Text _AdditionalHeaders, Boolean _NoLog)
// Requests an URL as GET asynchronously.

// Text _Name - Identification name
// Text _Url - Url to request
// Boolean _UseCache - If to cache the result, True recommended for expensive requests
// Text _AdditionalHeaders - More info to the request
// Boolean _NoLog - If to not inform to the console

// Returns True if the request is possible to create, otherwise False.
*/
Boolean AsyncGET(Text _Name, Text _Url, Boolean _UseCache, Text _AdditionalHeaders, Boolean _NoLog) {
	if(Http.SlotsAvailable == 0) return False;
	
	if(!_NoLog) Log::Info("HTTP", "Async requesting GET: " ^ _Url ^ """ ({{{_Name}}})""");
	
	if(G_Requests.existskey(_Name)) Http.Destroy(Http.Requests[G_Requests[_Name].Request]);
	
	declare SRequest R;
	R.Timestamp = Now;
	R.Request = Http.CreateGet(_Url, _UseCache, _AdditionalHeaders).Id;
	G_Requests[_Name] = R;
	
	return True;
}

Boolean AsyncGET(Text _Name, Text _Url, Boolean _UseCache, Text _AdditionalHeaders) {
	return AsyncGET(_Name, _Url, _UseCache, _AdditionalHeaders, False);
}

/*
// Boolean AsyncGET(Text _Name, Text _Url, Boolean _UseCache)
// Requests an URL as GET asynchronously.

// Text _Name - Identification name
// Text _Url - Url to request
// Boolean _UseCache - If to cache the result, True recommended for expensive requests

// Returns True if the request is possible to create, otherwise False.
*/
Boolean AsyncGET(Text _Name, Text _Url, Boolean _UseCache) {
	return AsyncGET(_Name, _Url, _UseCache, "");
}

/*
// Boolean AsyncGET(Text _Name, Text _Url)
// Requests an URL as GET asynchronously.

// Text _Name - Identification name
// Text _Url - Url to request

// Returns True if the request is possible to create, otherwise False.
*/
Boolean AsyncGET(Text _Name, Text _Url) {
	return AsyncGET(_Name, _Url, False, "");
}

/*
// Boolean AsyncPOST(Text _Name, Text _Url, Text _Resource, Text _AdditionalHeaders, Boolean _NoLog)
// Requests an URL with text content as POST asynchronously.

// Text _Name - Identification name
// Text _Url - Url to request
// Text _Resource - Text to provide for the request
// Text _AdditionalHeaders - More info to the request
// Boolean _NoLog - If to not inform to the console

// Returns True if the request is possible to create, otherwise False.
*/
Boolean AsyncPOST(Text _Name, Text _Url, Text _Resource, Text _AdditionalHeaders, Boolean _NoLog) {
	if(Http.SlotsAvailable == 0) return False;
	
	if(!_NoLog) Log::Info("HTTP", "Async requesting POST: " ^ _Url ^ """ ({{{_Name}}})""");
	
	if(G_Requests.existskey(_Name)) Http.Destroy(Http.Requests[G_Requests[_Name].Request]);
	
	declare SRequest R;
	R.Timestamp = Now;
	R.Request = Http.CreatePost(_Url, _Resource, _AdditionalHeaders).Id;
	G_Requests[_Name] = R;

	return True;
}

Boolean AsyncPOST(Text _Name, Text _Url, Text _Resource, Text _AdditionalHeaders) {
	return AsyncPOST(_Name, _Url, _Resource, _AdditionalHeaders, False);
}

/*
// Boolean AsyncPOST(Text _Name, Text _Url, Text _Resource)
// Requests an URL with text content as POST asynchronously.

// Text _Name - Identification name
// Text _Url - Url to request
// Text _Resource - Text to provide for the request

// Returns True if the request is possible to create, otherwise False.
*/
Boolean AsyncPOST(Text _Name, Text _Url, Text _Resource) {
	return AsyncPOST(_Name, _Url, _Resource, "");
}

/*
// Boolean AsyncPOSTFile(Text _Name, Text _Url, Text _FileName, Text _AdditionalHeaders, Boolean _NoLog)
// Requests an URL with file content as POST asynchronously.

// Text _Name - Identification name
// Text _Url - Url to request
// Text _FileName - File name relative to Maniaplanet folder
// Text _AdditionalHeaders - More info to the request
// Boolean _NoLog - If to not inform to the console

// Returns True if the request is possible to create, otherwise False.
*/
Boolean AsyncPOSTFile(Text _Name, Text _Url, Text _FileName, Text _AdditionalHeaders, Boolean _NoLog) {
	if(Http.SlotsAvailable == 0) return False;
	
	if(!_NoLog) Log::Info("HTTP", "requesting POST FILE: " ^ _Url ^ """ ({{{_Name}}})""");
	
	if(G_Requests.existskey(_Name)) Http.Destroy(Http.Requests[G_Requests[_Name].Request]);
	
	declare SRequest R;
	R.Timestamp = Now;
	R.Request = Http.CreatePostFile(_Url, _FileName, _AdditionalHeaders).Id;
	G_Requests[_Name] = R;

	return True;
}

/*
// Boolean AsyncPOSTFile(Text _Name, Text _Url, Text _FileName)
// Requests an URL with file content as POST asynchronously.

// Text _Name - Identification name
// Text _Url - Url to request
// Text _FileName - File name relative to Maniaplanet folder

// Returns True if the request is possible to create, otherwise False.
*/
Boolean AsyncPOSTFile(Text _Name, Text _Url, Text _FileName) {
	return AsyncPOST(_Name, _Url, _FileName, "");
}

/*
// CHttpRequest Get(Text _Name)
// Gets asynchonous request, completed or pending.

// Text _Name - Identification name

// Returns request that can or cannot be in the progress.
*/
CHttpRequest Get(Text _Name) {
	if(!G_Requests.existskey(_Name)) return Null;
	return Http.Requests[G_Requests[_Name].Request];
}

/*
// Void Destroy(Text _Name)
// Destroys an aynchonous request.

// Text _Name - Identification name
*/
Void Destroy(Text _Name) {
	if(!G_Requests.existskey(_Name)) return;
	Http.Destroy(Http.Requests[G_Requests[_Name].Request]);
	declare Removed = G_Requests.removekey(_Name);
}

/*
// Boolean IsCompleted(Text _Name)
// Checks if the asynchronous request was completed.

// Text _Name - Identification name
// Boolean _NoLog - If to not inform to the console

// Returns True if the request is completed but not destroyed.
*/
Boolean IsCompleted(Text _Name, Boolean _NoLog) {
	if(!G_Requests.existskey(_Name)) return False;
	declare IsCompleted = Get(_Name).IsCompleted;
	declare Time = Now - G_Requests[_Name].Timestamp;
	if(IsCompleted && !_NoLog)
		Log::Info("HTTP", "Async request completed" ^ """ ({{{_Name}}})""", Time);
	return IsCompleted;
}

Boolean IsCompleted(Text _Name) {
	return IsCompleted(_Name, False);
}

/*
// Text GetResult(Text _Name)
// Gets result of the asynchronous request.

// Text _Name - Identification name

// Returns result of a completed request, or nothing if the request is not completed or does not exist.
*/
Text GetResult(Text _Name) {
	if(!IsCompleted(_Name, True)) return "";
	return Get(_Name).Result;
}

/*
// Boolean IsSuccessfulStatusCode(Integer _StatusCode)
// If status code is between 200 inclusively and 300 exclusively.

// Integer _StatusCode

// Returns True if the number is between 200 inclusively and 300 exclusively.
*/
Boolean IsSuccessfulStatusCode(Integer _StatusCode) {
	return _StatusCode >= 200 && _StatusCode < 300;
}

/*
// Integer GetStatusCode(Text _Name)
// Gets status code of the asynchronous request.

// Text _Name - Identification name
// Boolean _NoLog - If to not inform to the console

// Returns status code number of a completed request, or 0 if the request is not completed or does not exist.
*/
Integer GetStatusCode(Text _Name, Boolean _NoLog) {
	if(!IsCompleted(_Name, True)) return 0;
	declare StatusCode = Get(_Name).StatusCode;
	if(!_NoLog) {
		if(IsSuccessfulStatusCode(StatusCode))
			Log::Info("HTTP", "Async request status code: " ^ StatusCode ^ """ ({{{_Name}}})""");
		else
			Log::Warn("HTTP", "Async request status code: " ^ StatusCode ^ """ ({{{_Name}}})""");
	}
	return StatusCode;
}

Integer GetStatusCode(Text _Name) {
	return GetStatusCode(_Name, False);
}

/*
// Boolean IsSuccessful(Text _Name)
// Checks if the asynchonous request was completed successfully.

// Text _Name - Identification name

// Returns True if the request is completed with a positive response (between 200 inclusively and 300 exclusively HTTP code).
*/
Boolean IsSuccessful(Text _Name) {
	if(!G_Requests.existskey(_Name)) return False;
	return IsCompleted(_Name, True) && IsSuccessfulStatusCode(GetStatusCode(_Name, True));
}