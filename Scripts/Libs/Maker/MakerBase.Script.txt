#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/Task.Script.txt" as Task
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/File.Script.txt" as File

#Struct SChallengeTitleSettings {
	Text Type;
}

#Struct SMetadata {
	Text Name;
	Text AuthorLogin;
	Text AuthorNickname;
	Text Description;
	Text CompatibleCollections;
}

#Struct SScriptInfo {
	Text Name;
	Text Type;
	SMetadata Metadata;
}

#Struct SChallenge {
	Text Name;
	Text Type;
}

#Struct SGroup {
	Text Name;
	Text TextColor;
	Text BackgroundColor;
	Text Image;
}

#Struct SCampaign {
	Text Name;
	Text Folder;
	Text Image;
	SGroup[] Groups;
}

Void UpdateStats() {
	declare SCampaign[] Campaigns for This;
	Layers::SendEvent("ManageTitle", "UpdateCampaignStats", Campaigns.count^"");
}

Text GetCampaignsFile() {
	declare SChallengeTitleSettings Settings for This;
	if(Settings.Type == "Nadeo") return "Media/Campaigns_Nadeo.json";
	return "Media/Campaigns.json";
}

declare CTaskResult_MapList MapList;

CMapInfo[] GetAllCampaignMaps(SCampaign[] _Campaigns) {
	declare CMapInfo[] MapInfos;

	foreach(Campaign,_Campaigns) {
		for(I,0,Campaign.Groups.count-1) {
			declare Group = Campaign.Groups[I];
			MapList = Task::SyncMapList(DataFileMgr.Map_GetFilteredGameList(2, Campaign.Folder^"/Default/"^I, False));
			
			foreach(MapInfo,MapList.MapInfos) {
				MapInfos.add(MapInfo);
			}
		}
	}
	return MapInfos;
}

Text[] ChallengesToTextArray(SScriptInfo[][] _Challenges) {
	declare Text[] Final;
	foreach(Challenge, _Challenges) {
		declare Text[] SubChallenges;
		foreach(Sub,Challenge) SubChallenges.add(Sub.Metadata.Name);
		Final.add(TextLib::Join("+",SubChallenges));
	}
	return Final;
}

SScriptInfo SChallengeToSScriptInfo(SChallenge _Challenge) {
	declare SScriptInfo Script;
	
	declare Text ScriptContent;
	
	Script.Name = _Challenge.Name;
	Script.Type = _Challenge.Type;
	if(_Challenge.Type == "Official") ScriptContent = File::Read("Media/Challenges/"^_Challenge.Name);
				
	declare LayerAPI = UILayerCreate();
	LayerAPI.ManialinkPage = Manialink::Construct("",File::Read("Media/Base/API_Base.Script.txt")^"""
{{{Dictionary::TranslateAllPhrases(File::Read("Media/Base/API.Script.txt"))}}}

{{{Dictionary::TranslateAllPhrases(ScriptContent)}}}

"""^File::Read("Media/Base/API_Main_Metadata.Script.txt"));
	
	declare Received = False;
	while(!Received) {
		foreach(Event,PendingEvents) {
			if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent)
			if(LayerAPI == Event.CustomEventLayer) {
				declare SMetadata Metadata;
				declare JsonSuccess = Metadata.fromjson(Event.CustomEventData[0]);
				if(Metadata.AuthorLogin != "") {
					Script.Metadata = Metadata;
					Received = True;
					break;
				}
			}
		}
		yield;
	}
	
	UILayerDestroy(LayerAPI);
	
	return Script;
}

Void UpdateBuilder(Text _LayerName, Text _ManialinkFile, Integer _Scroll, Integer _Campaign, Boolean _IsEditMode, Text[] _Challenges) {
	declare OriginalManialink = Manialink::FromFile(_ManialinkFile, True, ["Audio", "SlideText"], Settings::Get().Theme);

	declare SCampaign[] Campaigns for This;
	declare SChallenge[][] Challenges for This;
	declare SScriptInfo[][] Scripts;
	declare SChallengeTitleSettings Settings for This;
	declare NadeoCampaignMode = 0;
	if(!_IsEditMode) NadeoCampaignMode = 1;
	
	declare IncludeAdds = _IsEditMode;
	
	declare CampaignListBuild = """<frame id="FRAME_CAMPAIGN_MENU" data-startscroll="{{{_Scroll}}}" data-startcampaign="{{{_Campaign}}}" data-type="{{{Settings.Type}}}" """;
	if(Campaigns.existskey(_Campaign))
		CampaignListBuild ^= """data-startcampaignname="{{{Campaigns[_Campaign].Name}}}" data-startcampaignfolder="{{{Campaigns[_Campaign].Folder}}}" data-startcampaignimage="{{{Campaigns[_Campaign].Image}}}" """;
	CampaignListBuild ^= ">";
	
	declare CampaignPadBuild = """<frame id="FRAME_CAMPAIGNS">""";
	
	declare CampaignChallengeBuild = """<frame id="FRAME_CHALLENGES">""";
	for(I,0,Challenges.count-1) {
		declare Challenge = Challenges[I];
		declare SScriptInfo[] Ss;
		declare Text[] Chs;
		foreach(C,Challenge) {
			declare Sc = SChallengeToSScriptInfo(C);
			Ss.add(Sc);
			Chs.add(Sc.Metadata.Name);
		}
		Scripts.add(Ss);
		
		CampaignChallengeBuild ^= """<frame pos="{{{I*45}}}" data-challenge="{{{TextLib::Join("+", Chs)}}}">
		<quad z-index="0" size="45 8" bgcolor="024" halign="center" valign="center" scriptevents="1" id="QUAD_CHALLENGE_HOLD"/>
		<frame z-index="1" clip="True" clipsizen="40 8">
			<label pos="0 0.3" size="200 8" halign="center" valign="center" text="{{{TextLib::Join(" + ", Chs)}}}" id="LABEL_CHALLENGE" textfont="RajdhaniMono" textsize="3"/>
		</frame>
		</frame>""";
	}
	CampaignChallengeBuild ^= """</frame>""";
	
	declare Integer LargestCampaignHeight;
	for(I, 0, Campaigns.count-1) {
		declare Campaign = Campaigns[I];
		CampaignListBuild ^= "\n"^"""	<frame pos="{{{I*45*5}}} 0" id="FRAME_CAMPAIGN" data-campaignname="{{{Campaign.Name}}}">""";
		
		CampaignPadBuild ^= """<frame pos="{{{I*45}}}" data-campaignid="{{{I}}}">
			<quad size="45 18" halign="center" valign="center" bgcolor="F0F" image="file://{{{Campaign.Image}}}" scriptevents="1" id="QUAD_CAMPAIGN"/>
			<label pos="17.5 4" z-index="2" size="10 10" text="" halign="center" valign="center" textcolor="C00" textsize="4" opacity=".9" textemboss="1" scriptevents="1" style="TextCardMedium" id="LABEL_CAMPAIGN_REMOVE" hidden="{{{NadeoCampaignMode}}}"/>
		</frame>""";
		
		declare CTaskResult_MapList[Text] ChallengeMapLists;
		foreach(Ch,_Challenges)
			ChallengeMapLists[Ch] = Task::SyncMapList(DataFileMgr.Map_GetFilteredGameList(2, Campaign.Folder^"/"^Ch, True));
		
		declare GroupList = Task::SyncMapList(DataFileMgr.Map_GetFilteredGameList(2, Campaign.Folder^"/Default", False));
		
		declare Height = 0; // Height for scrollbar scrollability
		declare TotalMaps = 0; // Total maps for group positioning
		
		declare GroupPositionY = 0;
		
		declare AddGroup = 1-NadeoCampaignMode;
		
		// Should be called only in campaign
		declare CMapInfo[Text][Text] ChallangMaps;
		ChallangMaps.clear();
		foreach(Ch => Task,ChallengeMapLists) {
			declare CMapInfo[Text] InnerMaps;
			InnerMaps.clear();
			wait(!Task.IsProcessing);
			foreach(Map,Task.MapInfos) {
				declare File = TextLib::Split("\\", Map.FileName);
				//log("("^Map.CollectionName^") "^Ch^": "^File[File.count-1] ^ " " ^ Map.MapUid);
				InnerMaps[File[File.count-1]] <=> Map;
			}
			ChallangMaps[Ch] = InnerMaps;
		}
		//
		
		for(J, 0, Campaign.Groups.count-1+AddGroup) {
			declare GroupName = "GROUP"^J;
			declare GroupTextColor = "FFF";
			declare GroupBackgroundColor = "000";
			if(Campaign.Groups.existskey(J)) {
				GroupName = Campaign.Groups[J].Name;
				GroupTextColor = Campaign.Groups[J].TextColor;
				GroupBackgroundColor = Campaign.Groups[J].BackgroundColor;
			}
			
			if(J < Campaign.Groups.count) {
				CampaignListBuild ^= "\n"^"""	<frame pos="0 {{{GroupPositionY}}}" z-index="2" id="FRAME_GROUP">
					<quad z-index="0" size="225 15" bgcolor="{{{GroupBackgroundColor}}}" halign="center" valign="center" scriptevents="1"/>
					<entry z-index="1" size="200 10" textprefix="$o$i" default="{{{GroupName}}}" halign="center" valign="center2" textsize="6" textfont="RajdhaniMono" pos="0 -0.4" textcolor="{{{GroupTextColor}}}" id="ENTRY_GROUP" data-campaignid="{{{I}}}" data-groupid="{{{J}}}" hidden="{{{NadeoCampaignMode}}}"/>
					<label z-index="1" size="200 10" textprefix="$o$i" text="{{{GroupName}}}" halign="center" valign="center2" textsize="6" textfont="RajdhaniMono" pos="0 -0.4" textcolor="{{{GroupTextColor}}}" id="LABEL_GROUP" data-campaignid="{{{I}}}" data-groupid="{{{J}}}" hidden="{{{1-NadeoCampaignMode}}}"/>
					<label pos="107.5 2.5" z-index="2" size="10 10" text="" halign="center" valign="center" textcolor="C00" textsize="4" opacity=".9" textemboss="1" scriptevents="1" style="TextCardMedium" id="LABEL_GROUP_REMOVE" data-campaignid="{{{I}}}" data-groupid="{{{J}}}" hidden="{{{NadeoCampaignMode}}}"/>
				</frame>""";
				
				declare LastBoxPos = 0;
				
				CampaignListBuild ^= "\n"^"""		<frame pos="0 {{{GroupPositionY-30}}}">""";
					
				if(J < GroupList.SubFolders.count) {
					declare GroupFolder = GroupList.SubFolders[J];
					
					declare MapList = Task::SyncMapList(DataFileMgr.Map_GetGameList(GroupFolder, False));
					
					if(IncludeAdds)
						Height += MathLib::CeilingInteger(MapList.MapInfos.count/5.)*45;
					else
						Height += MathLib::FloorInteger(MapList.MapInfos.count/5.)*45;
					
					LastBoxPos = MapList.MapInfos.count;
						
					for(K, 0, MapList.MapInfos.count-1) {
						declare ThumbnailPositionX = -90+(K%5)*45;
						declare ThumbnailPositionY = MathLib::FloorInteger(K/5.)*-45;
						
						declare MapInfo <=> MapList.MapInfos[K];
						CampaignListBuild ^= "\n"^"""			<frame pos="{{{ThumbnailPositionX}}} {{{ThumbnailPositionY}}}" id="FRAME_MAP" data-name="{{{MapInfo.Name}}}" data-author="{{{MapInfo.AuthorNickName}}}" data-uid="{{{MapInfo.MapUid}}}" data-filename="{{{MapInfo.FileName}}}" data-style="{{{MapInfo.MapStyle}}}" data-env="{{{MapInfo.CollectionName}}}" data-defaultcar="{{{MapInfo.CollectionName}}}Car" z-index="0">""";
						
						declare File = TextLib::Split("\\", MapInfo.FileName);		
						
						// Should be called only in campaign
						foreach(Ch => MapSet, ChallangMaps) {
							CampaignListBuild ^= """<frame id="FRAME_CHALLENGE_INFO" data-challenge="{{{Ch}}}" """;
							if(MapSet.existskey(File[File.count-1])) {
								declare DatChallMap <=> MapSet[File[File.count-1]];
								CampaignListBuild ^= """data-uid="{{{DatChallMap.MapUid}}}" data-filename="{{{DatChallMap.FileName}}}" data-valid="{{{DatChallMap.IsPlayable}}}" """;
							} 
							CampaignListBuild ^= "/>";
						}
						//
						
						CampaignListBuild ^= """<quad z-index="-1" size="45 45" halign="center" valign="center" bgcolor="FFFF" style="UIConstruction_Buttons" substyle="BgTools" hidden="1"/>
						<quad z-index="0" size="45 45" halign="center" valign="center" bgcolor="FFFF" image="file://Thumbnails/MapUid/{{{MapInfo.MapUid}}}" id="QUAD_MAP" scriptevents="1" hidden="0"/>
						<frame z-index="1" pos="-19.5 19.5" id="FRAME_NAME" clip="True" clipposn="19.5 -5" clipsizen="39 10">
							<label size="200 10" text="{{{MapInfo.Name}}}" textsize="8" textfont="Oswald" id="LABEL_NAME" textemboss="1"/>
						</frame>
						<label pos="-19.5 -14.75" z-index="1" size="40 5" text="?/?" textsize="3" textfont="Gotham/Gotham-Bold" id="LABEL_RANK" valign="bottom" textemboss="1" hidden="0"/>
						<label pos="-19.5 -19.5" z-index="1" size="40 4" text="?" textsize="2" textfont="Gotham/Gotham-Bold" id="LABEL_SP" valign="bottom" textcolor="0C0" textemboss="1" hidden="0"/>
						<label pos="17.5 17.5" z-index="2" size="10 10" text="" halign="center" valign="center" textcolor="C00" textsize="4" opacity=".9" textemboss="1" scriptevents="1" style="TextCardMedium" id="LABEL_MAP_REMOVE" data-campaignid="{{{I}}}" data-groupid="{{{J}}}" data-mapid="{{{K}}}" data-mapfile="{{{MapInfo.FileName}}}" hidden="{{{NadeoCampaignMode}}}"/>
						<quad z-index="4" size="45 45" halign="center" valign="center" bgcolor="111C" id="QUAD_MAP_BLOCK" scriptevents="1" hidden="1"/>
						</frame>""";
					}
					
					GroupPositionY += MathLib::CeilingInteger((MapList.MapInfos.count+AddGroup-NadeoCampaignMode)/5.)*(-45);
					
					DataFileMgr.TaskResult_Release(MapList.Id);
				}
				
				if(IncludeAdds) {
					declare PlusPos = LastBoxPos;
					declare PlusPositionX = -90+(PlusPos%5)*45;
					declare PlusPositionY = MathLib::FloorInteger(PlusPos/5.)*-45;
						
					CampaignListBuild ^= "\n"^"""			<frame pos="{{{PlusPositionX}}} {{{PlusPositionY}}}" id="FRAME_CONSTRUCT_MAP">
						<quad pos="0 0" z-index="0" size="45 45" halign="center" style="UIConstruction_Buttons" substyle="BgTools" valign="center"/>
						<label pos="0 0" z-index="1" size="45 45" text="" halign="center" valign="center" textcolor="333" textsize="9" opacity=".9"/>
						<label pos="20 20" z-index="1" size="40 10" text="{{{Dictionary::Get("MAP")}}}" textcolor="333" textsize="3" opacity=".9" textfont="RajdhaniMono" halign="right"/>
						<quad pos="0 0" z-index="2" size="45 45" halign="center" style="Bgs1InRace" substyle="BgCardInventoryItem" scriptevents="1" valign="center" colorize="FFF" opacity=".5" id="QUAD_ADDMAP" data-campaignid="{{{I}}}" data-groupid="{{{J}}}"/>
					</frame>""";
					
					if(PlusPos == 0) { // Should be defined only in Builder mode xd
						GroupPositionY -= 45;
						Height += 45;
					}
				}
					
				CampaignListBuild ^= "\n"^"""		</frame>""";
			
				Height += 15;
				GroupPositionY -= 15;
			}
			else if(IncludeAdds) {
				CampaignListBuild ^= "\n"^"""			<frame pos="0 {{{GroupPositionY}}}" id="FRAME_CONSTRUCT_GROUP">
					<quad pos="0 0" z-index="0" size="225 15" halign="center" style="UIConstruction_Buttons" substyle="BgEditors" valign="center"/>
					<label pos="0 0" z-index="1" size="225 15" text="" halign="center" valign="center" textcolor="333" textsize="6" opacity=".9"/>
					<label pos="110 5" z-index="1" size="80 15" text="{{{Dictionary::Get("GROUP")}}}" textcolor="333" textsize="3" opacity=".9" textfont="RajdhaniMono" halign="right"/>
					<quad pos="0 0" z-index="2" size="225 15" halign="center" style="Bgs1InRace" substyle="BgCardInventoryItem" scriptevents="1" valign="center" colorize="FA0" opacity=".5" data-campaignid="{{{I}}}" id="QUAD_ADDGROUP"/>
				</frame>""";
				Height += 15;
			}
		}
		
		CampaignListBuild ^= "</frame>";
		
		if(Height > LargestCampaignHeight) {
			LargestCampaignHeight = Height;
		}
		
		DataFileMgr.TaskResult_Release(GroupList.Id);
		foreach(MapList,ChallengeMapLists)
			DataFileMgr.TaskResult_Release(MapList.Id);
	}
	
	CampaignListBuild ^= """<quad id="QUAD_CAMPAIGN_MENU" pos="-112.5 7.5" size="{{{Campaigns.count*45*5}}} {{{LargestCampaignHeight}}}" z-index="-1" scriptevents="1"/>""";
	
	CampaignListBuild ^= "</frame>";
	CampaignPadBuild ^= "\n"^"""</frame>""";
	
	CampaignListBuild = Dictionary::TranslateAllPhrases(CampaignListBuild);
	CampaignPadBuild = Dictionary::TranslateAllPhrases(CampaignPadBuild);
	CampaignChallengeBuild = Dictionary::TranslateAllPhrases(CampaignChallengeBuild);
	
	declare Manialink = TextLib::Replace(OriginalManialink, """<frame id="FRAME_CAMPAIGN_MENU"/>""", CampaignListBuild);
	Manialink = TextLib::Replace(Manialink, """<frame id="FRAME_CAMPAIGNS"/>""", CampaignPadBuild);
	Manialink = TextLib::Replace(Manialink, """<frame id="FRAME_CHALLENGES"/>""", CampaignChallengeBuild);
	
	Layers::Update(_LayerName, Manialink);
	
	declare Text CampaignType for Layers::Page(_LayerName);
	CampaignType = Settings.Type;
	if(Settings.Type == "Nadeo")
		Layers::SendEvent(_LayerName, "NadeoCampaign");
	else if(Settings.Type == "Custom")
		Layers::SendEvent(_LayerName, "CustomCampaign");
	
	declare CampaignNum = _Campaign;
	if(Campaigns.count > 0) {
		if(CampaignNum < Campaigns.count) {
			declare Campaign = Campaigns[CampaignNum];
			Layers::SendEvent(_LayerName, "ChangeCampaign", CampaignNum);
			Layers::SendEvent(_LayerName, "CampaignChanged", [Campaign.Name, Campaign.Folder, Campaign.Image]);
		}
		else {
			while(CampaignNum > Campaigns.count-1) {
				CampaignNum -= 1;
			}
			declare Campaign = Campaigns[CampaignNum];
			Layers::SendEvent(_LayerName, "ChangeCampaign", CampaignNum);
			Layers::SendEvent(_LayerName, "CampaignChanged", [Campaign.Name, Campaign.Folder, Campaign.Image]);
		}
	}
	else Layers::SendEvent(_LayerName, "CampaignChanged", []);
	
	if(_IsEditMode)
		TitleEdition.File_WriteText(GetCampaignsFile(), Campaigns.tojson());
}