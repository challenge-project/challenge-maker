#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "TimeLib" as TimeLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Task.Script.txt" as Task
#Include "Libs/BigBang1112/Map.Script.txt" as Map

#Include "Libs/Challenge/LoadMap.Script.txt" as LoadMap

#Include "Libs/Maker/MakerBase.Script.txt" as MakerBase

#Struct SChallengeMapInfo {
	Map::SMapInfo OriginalMap;
	Map::SMapInfo ModifiedMap;
	Integer Challenge;
	MakerBase::SMapProgress Progress;
}

Text ToDifferentChallengeMapName(Text _MapFileName, Text[] _Challenge) {
	declare DeconstructedMapName = TextLib::Split("\\",_MapFileName);
	declare ChallengeMapName = "";
	if(DeconstructedMapName.existskey(DeconstructedMapName.count-3)) {
		DeconstructedMapName[DeconstructedMapName.count-3] = TextLib::Join("+", _Challenge);
		ChallengeMapName = TextLib::Join("\\", DeconstructedMapName);
	}
	return ChallengeMapName;
}

Void UpdateChallenges() {
	declare MakerBase::SChallenge[][] Challenges for This;
	declare MakerBase::SScriptInfo[][] Scripts for Layers::Page("Modifier");
	Scripts.clear();
	
	foreach(Challenge, Challenges) {
		declare MakerBase::SScriptInfo[] ChallengeScripts;
		foreach(SubChallenge, Challenge) {
			ChallengeScripts.add(MakerBase::SChallengeToSScriptInfo(SubChallenge));
		}
		Scripts.add(ChallengeScripts);
	}
}

Void UpdateTimings(Integer _TotalMapCount) {
	declare MakerBase::SProgress Progress for This;
	
	declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
	
	declare Integer CompletedCount for This;
	declare Integer TotalCount for This;
	declare Real TimeSpent for This;
	declare Real AvgLength for This;
	declare Real TimeLeft for This;
	
	declare Integer ComputeCount for This;
	ComputeCount = 0;
	
	CompletedCount = 0;
	TotalCount = _TotalMapCount;
	
	TimeSpent = 0.;
	foreach(OriMapUid => ModifiedUids, Progress.Maps) {
		//foreach(M,ChallengeMaps) {
			//if(M.OriginalMap.MapUid == OriMapUid) {
				foreach(ModifiedUid => ModifInfo, ModifiedUids) {
					if(ModifInfo.Time != -1) {
						TimeSpent += ModifInfo.Time;
						CompletedCount += 1;
					}
					if(ModifInfo.Possible == 1 && !ModifInfo.Computed)
						ComputeCount += 1;
				}
				//break;
			//} doenst count maps that are part of progress but not campaign
		//} though this really lags bulk modification, it will be better to remove progress completely on campaign change
	}
	
	Layers::SendEvent("Modifier", "UpdateTimeSpent", (TimeSpent*1000)^"");
	
	AvgLength = -1.;
	if(CompletedCount > 0) AvgLength = TimeSpent/CompletedCount;
	Layers::SendEvent("Modifier", "UpdateAvgLength", MathLib::NearestInteger(AvgLength*1000)^"");
	
	TimeLeft = -1.;
	if(TotalCount > 0 && AvgLength != -1) TimeLeft = AvgLength*(TotalCount-CompletedCount);
	Layers::SendEvent("Modifier", "UpdateTimeLeft", MathLib::NearestInteger(TimeLeft*1000)^"");
}

Void UpdateProgress() {
	declare MakerBase::SChallenge[][] Challenges for This; // JSON-defined picked challenges
	declare CMapInfo[] CampaignMaps for This;
	declare MakerBase::SProgress Progress for This;
	
	Layers::SendEvent("Modifier", "LoadingProgress", "0");
	
	declare MakerBase::SCampaign[] Campaigns for This;
	CampaignMaps = MakerBase::GetAllCampaignMaps(Campaigns);
	
	declare MakerBase::SScriptInfo[][] Scripts for Layers::Page("Modifier"); // Actual challenge scripts
	declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
	ChallengeMaps.clear();
	
	declare Integer[Text] AmountLeft for This;
	AmountLeft = ["Modified" => 0, "Computed" => 0, "Possible" => 0];
	
	declare MapWaitSpace = 0;
	declare CurrentMapWaitSpace = 0;
	
	declare CurrentMap = 0.;
	foreach(Map,CampaignMaps) {
		declare ScriptId = 0;
		foreach(Script,Scripts) {
			declare SChallengeMapInfo MapInfo;
			MapInfo.OriginalMap = Map::ToSMapInfo(Map);
			MapInfo.Progress.Time = -1;
			
			declare Text[] Challenge;
			foreach(S, Script) Challenge.add(S.Metadata.Name);
				
			if(Progress.Maps.existskey(MapInfo.OriginalMap.MapUid)) {
				MapInfo.ModifiedMap = Map::FromFileName(ToDifferentChallengeMapName(Map.FileName, Challenge));
				
				if(Progress.Maps.existskey(Map.MapUid) && Progress.Maps[Map.MapUid].existskey(MapInfo.ModifiedMap.MapUid)) {
					MapInfo.Progress.Modified = Progress.Maps[Map.MapUid][MapInfo.ModifiedMap.MapUid].Modified;
					MapInfo.Progress.Computed = Progress.Maps[Map.MapUid][MapInfo.ModifiedMap.MapUid].Computed;
					MapInfo.Progress.Possible = Progress.Maps[Map.MapUid][MapInfo.ModifiedMap.MapUid].Possible;
					MapInfo.Progress.Time = Progress.Maps[Map.MapUid][MapInfo.ModifiedMap.MapUid].Time;
				}
				else {
					// if map not modified
				}
			}
			else {
				// if map not touched
			}
			
			if(!MapInfo.Progress.Modified) {AmountLeft["Modified"] += 1; }
			if(!MapInfo.Progress.Computed) AmountLeft["Computed"] += 1;
			if(MapInfo.Progress.Possible == 0 || MapInfo.Progress.Possible == 2) AmountLeft["Possible"] += 1;
		
			MapInfo.Challenge = ScriptId;
			ChallengeMaps.add(MapInfo);
			
			ScriptId+=1;
		}
		CurrentMap += 1;
		Layers::SendEvent("Modifier", "LoadingProgress", (CurrentMap/CampaignMaps.count)^"");
		
		if(CurrentMapWaitSpace > MapWaitSpace) {
			yield;
			CurrentMapWaitSpace = 0;
		}
		else CurrentMapWaitSpace += 1;
	}
	
	UpdateTimings(ChallengeMaps.count);
	Layers::SendEvent("Modifier", "UpdateAmountLeft", AmountLeft["Modified"]^"/"^AmountLeft["Possible"]);
	Layers::SendEvent("Modifier", "RefreshList");
	
	if(AmountLeft["Possible"] == 0) {
		if(ChallengeMaps.count > 0)
			Layers::SendEvent("Modifier", "ComputeMode");
		else
			Layers::SendEvent("Modifier", "NoMode");
	}
	else if(AmountLeft["Modified"] == 0)
		Layers::SendEvent("Modifier", "SolveMode");
	else
		Layers::SendEvent("Modifier", "ModifyMode");
}

Void UpdateFromFiles() {
	declare MakerBase::SChallengeTitleSettings Settings for This;
	declare JsonSettings = Settings.fromjson(TitleEdition.File_ReadText("Media/Settings.json")); // Should be responsive
	
	declare MakerBase::SChallenge[][] Challenges for This;
	declare JsonChallenges = Challenges.fromjson(TitleEdition.File_ReadText("Media/Challenges.json")); // Should be responsive
	
	declare MakerBase::SCampaign[] Campaigns for This;
	declare JsonSuccess = Campaigns.fromjson(TitleEdition.File_ReadText(MakerBase::GetCampaignsFile())); // Should be responsive
}

Void Init() {
	Layers::Create("Modifier", Manialink::FromFile("Media/Manialinks/Maker/Modifier", True, ["Audio"], Settings::Get().Theme));
	Layers::Create("StartModifier", Manialink::FromFile("Media/Manialinks/Maker/StartModifier", True, ["Audio"], Settings::Get().Theme));
	Layers::Create("StartCompute", Manialink::FromFile("Media/Manialinks/Maker/StartCompute", True, ["Audio"], Settings::Get().Theme));
	Layers::Create("StartRedoThumbnails", Manialink::FromFile("Media/Manialinks/Maker/StartRedoThumbnails", True, ["Audio"], Settings::Get().Theme));
	
	UpdateFromFiles();
	
	declare MakerBase::SChallengeTitleSettings Settings for This;
	declare MakerBase::SCampaign[] Campaigns for This;
	
	declare MakerBase::SProgress Progress for This;
	declare JsonProgress = Progress.fromjson(TitleEdition.File_ReadText("Media/Progress.json"));
	
	declare Boolean IsReloaded for This;
	IsReloaded = False;
	
	UpdateChallenges();
}

Void FixCalculatedMaps() {
	declare MakerBase::SProgress Progress for This;
	foreach(OriginalMap => ModifiedMaps in Progress.Maps) {
		foreach(ModifiedMap => Info in ModifiedMaps) {
			declare Map = Map::FromUid(ModifiedMap);
			if(!Map.IsPlayable && Info.Computed) {
				LoadMap::Edit(Map, "Shadow.Script.txt", """<settings>
			<setting name="S_Enable" type="boolean" value="True"/>
		</settings>""");
			}
		}
	}
}

Void Start() {
	if (!TitleEdition.File_Exists("Media/Challenges.json", CTitleEdition::EDrive::Title)) {
		TitleEdition.File_WriteText("Media/Challenges.json", """[
	[
		{
			"Name": "Reverse.Script.txt",
			"Type": "Official"
		}
	],
	[
		{
			"Name": "Checkpointless.Script.txt",
			"Type": "Official"
		}
	],
	[
		{
			"Name": "Reverse.Script.txt",
			"Type": "Official"
		},
		{
			"Name": "Checkpointless.Script.txt",
			"Type": "Official"
		}
	]
]""");
	}
}

Void Event(CManiaAppEvent _Event) {
	declare Boolean IsUpdatingProgress for Layers::Page("Modifier");
	declare Boolean IsReloaded for This;

	declare Event <=> _Event;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(Event.CustomEventLayer) {
			case Layers::Get("Modifier"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Layers::Hide("Modifier", True);
						Layers::Show("EditTitle", True);
						Layers::Show("ManageTitle", True);
					}
					case "Show": {
						UpdateFromFiles();
						IsUpdatingProgress = True;
					}
					case "ModifyMap": {
						declare MapId = TextLib::ToInteger(Event.CustomEventData[0]);
						
						declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
						declare Map = ChallengeMaps[MapId];
						
						if(Map.Progress.Modified) {
							switch(Map.Progress.Possible) {
								case -1: {
									
								}
								case 0: {
									declare Integer[] ModificationIds for This;
									ModificationIds.add(MapId);
								}
								case 1: {
									declare Map::SMapInfo PlayThisMap for This;
									PlayThisMap = Map.ModifiedMap;
								}
								case 2: {
									declare Boolean RepairMap for This;
									declare Integer RepairMap_Id for This;
									
									RepairMap = True;
									RepairMap_Id = MapId;
								}
							}
						}
						else {
							declare Integer[] ModificationIds for This;
							ModificationIds.add(MapId);
						}
					}
					case "Refresh": {
						UpdateFromFiles();
						IsUpdatingProgress = True;
						IsReloaded = False;
					}
					case "ModifyAll": {
						switch(Event.CustomEventData[0]) {
							case "Modify": {
								declare Integer CompletedCount for This;
								declare Integer TotalCount for This;
								declare Real TimeSpent for This;
								declare Real AvgLength for This;
								declare Real TimeLeft for This;
								
								declare Integer ComplCount for Layers::Page("StartModifier");
								declare Integer MaxCount for Layers::Page("StartModifier");
								declare Real AverageLength for Layers::Page("StartModifier");
								declare Integer UserComplCount for Layers::Page("StartModifier");
								
								ComplCount = CompletedCount;
								MaxCount = TotalCount;
								AverageLength = AvgLength;
								UserComplCount = TotalCount-CompletedCount;
							
								Layers::Show("StartModifier", True);
							}
							case "Solve": {
								declare Boolean RepairMap for This;
								declare Integer RepairMap_Id for This;
								
								declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
								for(I,0,ChallengeMaps.count-1) {
									declare Map = ChallengeMaps[I];
									if(Map.Progress.Possible == 2) {
										RepairMap = True;
										RepairMap_Id = I;
										break;
									}
								}
							}
							case "Compute": {
								declare Integer ComputeCount for This;
								declare Integer ComputCount for Layers::Page("StartCompute");
								declare Integer UserComputCount for Layers::Page("StartCompute");
								
								ComputCount = ComputeCount;
								UserComputCount = ComputCount;
								Layers::Show("StartCompute", True);
							}
							case "RedoThumbnails": {
								declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
								
								declare Integer RedoThumbnailCount for This;
								declare Integer RedoCount for Layers::Page("StartRedoThumbnails");
								declare Integer UserRedoCount for Layers::Page("StartRedoThumbnails");
								
								RedoCount = ChallengeMaps.count;
								UserRedoCount = ChallengeMaps.count;
								Layers::Show("StartRedoThumbnails", True);
							}
						}
					}
					case "SpecificTestMap": {
						declare Map::SMapInfo PlayThisMap for This;
						declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
						PlayThisMap = ChallengeMaps[TextLib::ToInteger(Event.CustomEventData[0])].ModifiedMap;
					}
					case "SpecificRemodifyMap": {
						declare Integer[] ModificationIds for This;
						ModificationIds.add(TextLib::ToInteger(Event.CustomEventData[0]));
					}
					case "SpecificComputeShadows": {
						declare Integer[] ComputationIds for This;
						ComputationIds.add(TextLib::ToInteger(Event.CustomEventData[0]));
					}
					case "SpecificRedoThumbnail": {
						declare Integer[] RedoThumbnailIds for This;
						RedoThumbnailIds.add(TextLib::ToInteger(Event.CustomEventData[0]));
					}
				}
			}
			case Layers::Get("StartModifier"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Layers::Hide("StartModifier", False);
					}
					case "Start": {
						declare Count = TextLib::ToInteger(Event.CustomEventData[0]);
						
						declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
						
						declare Integer[] ModificationIds for This;
						
						declare Counter = 0;
						for(I,0,ChallengeMaps.count-1) {
							if(Counter == Count) break;
							if(!ChallengeMaps[I].Progress.Modified) {
								ModificationIds.add(I);
								Counter += 1;
							}
						}
					}
				}
			}
			case Layers::Get("StartCompute"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Layers::Hide("StartCompute", False);
					}
					case "Start": {
						declare Count = TextLib::ToInteger(Event.CustomEventData[0]);
						
						declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
						
						declare Integer[] ComputationIds for This;
						
						declare Counter = 0;
						for(I,0,ChallengeMaps.count-1) {
							if(Counter == Count) break;
							if(ChallengeMaps[I].Progress.Possible == 1 && !ChallengeMaps[I].Progress.Computed) {
								ComputationIds.add(I);
								Counter += 1;
							}
						}
					}
				}
			}
			case Layers::Get("StartRedoThumbnails"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Layers::Hide("StartRedoThumbnails", False);
					}
					case "Start": {
						declare Count = TextLib::ToInteger(Event.CustomEventData[0]);
						
						declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
						
						declare Integer[] RedoThumbnailIds for This;
						
						declare Counter = 0;
						for(I,0,ChallengeMaps.count-1) {
							if(Counter == Count) break;
							RedoThumbnailIds.add(I);
						}
					}
				}
			}
		}
	}
}

Void Async() {
	
}

Void Loop() {
	declare Integer[] ModificationIds for This;
	declare Boolean IsReloaded for This;
	
	declare ModificationCounter = 0;
	foreach(ModifId, ModificationIds) {
		if(ModificationCounter == 0)
			Layers::Hide("StartModifier", False); // When modification starts
	
		declare Time_ModificationStart = TimeLib::GetCurrent();
		
		declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
		if(!ChallengeMaps.existskey(ModifId)) { log("Bruh the ID " ^ ModifId ^ "doesn't even exist"); continue; }
		declare ChallengeMap = ChallengeMaps[ModifId];
		
		declare Map::SMapInfo OriginalMapInfo for LocalUser;
		OriginalMapInfo = ChallengeMap.OriginalMap;
		declare MakerBase::SScriptInfo[] CHALLENGE_SCRIPTS for LocalUser;
		declare MakerBase::SScriptInfo[][] Scripts for Layers::Page("Modifier");
		CHALLENGE_SCRIPTS = Scripts[ChallengeMap.Challenge];
		
		declare OldMapUid = ChallengeMap.ModifiedMap.MapUid; // Cuz MapUID changed in map editor
		
		declare Text[] Challenges;
		foreach(Script, CHALLENGE_SCRIPTS) Challenges.add(Script.Metadata.Name);
		
		declare ChallengeMapName = ToDifferentChallengeMapName(ChallengeMap.OriginalMap.FileName, Challenges);
		
		if(Map::Exists(ChallengeMapName)) {
			declare Deconst = TextLib::Split("\\", ChallengeMapName);
			declare Removed = Deconst.removekey(Deconst.count-1);
			TitleEdition.File_Move("Maps\\"^ChallengeMapName, "Maps\\"^TextLib::Join("\\", Deconst)^"\\Old\\"^TimeLib::GetCurrent()^"\\", False);
			wait(!Map::Exists(ChallengeMapName));
			
			ChallengeMap.Progress.Modified = False;
			ChallengeMap.Progress.Computed = False;
			ChallengeMap.Progress.Possible = 0;
			ChallengeMap.Progress.Time = 0;
		}
		
		LoadMap::EditFromBase(ChallengeMap.OriginalMap, "Challenge.Script.txt", "Modifier.Script.txt", """<settings>
		<setting name="S_Build" type="boolean" value="True"/>
		<setting name="S_FastMode" type="boolean" value="True"/>
		<setting name="S_FastMode_MapSave" type="text" value="{{{ChallengeMapName}}}"/>
	</settings>""");
		wait(Map::Exists(ChallengeMapName));
		
		ChallengeMap.ModifiedMap = Map::FromFileName(ChallengeMapName);
		
		declare Time_ModificationEnd = TimeLib::GetCurrent();
		declare Delta = TimeLib::GetDelta(Time_ModificationEnd, Time_ModificationStart);
		
		declare Integer ProblemResult for LocalUser;
		
		// define Modified and Possible
		ChallengeMap.Progress.Modified = True;
		ChallengeMap.Progress.Possible = ProblemResult; // wrong
		ChallengeMap.Progress.Time = Delta;
		
		ChallengeMaps[ModifId] = ChallengeMap;
		
		// set some progress.json
		declare MakerBase::SProgress Progress for This;
		if(!Progress.Maps.existskey(ChallengeMap.OriginalMap.MapUid)) Progress.Maps[ChallengeMap.OriginalMap.MapUid] = [];
		else declare Removed = Progress.Maps[ChallengeMap.OriginalMap.MapUid].removekey(OldMapUid);
		Progress.Maps[ChallengeMap.OriginalMap.MapUid][ChallengeMap.ModifiedMap.MapUid] = ChallengeMap.Progress;
		TitleEdition.File_WriteText("Media/Progress.json",Progress.tojson());
		
		// Update all of the timings
		UpdateTimings(ChallengeMaps.count);
		
		declare Integer[Text] AmountLeft for This;
		if(ChallengeMap.Progress.Modified) AmountLeft["Modified"] -= 1;
		if(ChallengeMap.Progress.Computed) AmountLeft["Computed"] -= 1;
		if(ChallengeMap.Progress.Possible == -1 || ChallengeMap.Progress.Possible == 1) AmountLeft["Possible"] -= 1;
		Layers::SendEvent("Modifier", "UpdateAmountLeft", AmountLeft["Modified"]^"/"^AmountLeft["Possible"]);
		
		// Refresh the look of the list
		Layers::SendEvent("Modifier", "RefreshList");
			
		ModificationCounter += 1;
		
		if(ModificationCounter == ModificationIds.count) {
			// when modification ends
		}
	}
	if(ModificationIds.count > 0) ModificationIds.clear();
	
	declare Boolean IsUpdatingProgress for Layers::Page("Modifier");
	if(IsUpdatingProgress) {
		if(!IsReloaded) {
			UpdateProgress();
			IsReloaded = True;
		}
		IsUpdatingProgress = False;
	}
	
	declare Boolean RepairMap for This;
	if(RepairMap) {
		declare Integer RepairMap_Id for This;
		declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
		
		declare Map = ChallengeMaps[RepairMap_Id];
		declare OldMapUid = Map.ModifiedMap.MapUid; // Cuz MapUID changed in map editor
		
		LoadMap::Edit(Map.ModifiedMap, "Modifier.Script.txt", """<settings>
	<setting name="S_Build" type="boolean" value="True"/>
	<setting name="S_FastMode_MapSave" type="text" value="{{{Map.ModifiedMap.FileName}}}"/>
</settings>""");

		Map.ModifiedMap = Map::FromFileName(Map.ModifiedMap.FileName);
		
		declare Integer ProblemResult for LocalUser;
		
		// define Possible
		Map.Progress.Possible = ProblemResult; // wrong
		
		ChallengeMaps[RepairMap_Id] = Map;
		
		// set some progress.json
		declare MakerBase::SProgress Progress for This;
		if(!Progress.Maps.existskey(Map.OriginalMap.MapUid)) Progress.Maps[Map.OriginalMap.MapUid] = [];
		else declare Removed = Progress.Maps[Map.OriginalMap.MapUid].removekey(OldMapUid);
		Progress.Maps[Map.OriginalMap.MapUid][Map.ModifiedMap.MapUid] = Map.Progress;
		TitleEdition.File_WriteText("Media/Progress.json",Progress.tojson());
		
		// Update all of the timings
		UpdateTimings(ChallengeMaps.count);
		
		declare Integer[Text] AmountLeft for This;
		if(Map.Progress.Possible == -1 || Map.Progress.Possible == 1) AmountLeft["Possible"] -= 1;
		Layers::SendEvent("Modifier", "UpdateAmountLeft", AmountLeft["Modified"]^"/"^AmountLeft["Possible"]);
		
		// Refresh the look of the list
		Layers::SendEvent("Modifier", "RefreshList");
		
		RepairMap = False;
	}
	
	declare Integer[] ComputationIds for This;
	declare ComputationCounter = 0;
	foreach(CompId, ComputationIds) {
		if(ComputationCounter == 0)
			Layers::Hide("StartCompute", False); // When modification starts
	
		declare Time_ModificationStart = TimeLib::GetCurrent();
		
		declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
		if(!ChallengeMaps.existskey(CompId)) { log("Bruh the ID " ^ CompId ^ "doesn't even exist"); continue; }
		declare ChallengeMap = ChallengeMaps[CompId];
		
		LoadMap::Edit(ChallengeMap.ModifiedMap, "Shadow.Script.txt", """<settings>
			<setting name="S_Enable" type="boolean" value="True"/>
		</settings>""");
		
		declare Time_ModificationEnd = TimeLib::GetCurrent();
		declare Delta = TimeLib::GetDelta(Time_ModificationEnd, Time_ModificationStart);
		
		ChallengeMap.Progress.Computed = True;
		
		ChallengeMaps[CompId] = ChallengeMap;
		
		// set some progress.json
		declare MakerBase::SProgress Progress for This;
		Progress.Maps[ChallengeMap.OriginalMap.MapUid][ChallengeMap.ModifiedMap.MapUid] = ChallengeMap.Progress;
		TitleEdition.File_WriteText("Media/Progress.json",Progress.tojson());
		
		// Update all of the timings
		UpdateTimings(ChallengeMaps.count);
		
		declare Integer[Text] AmountLeft for This;
		if(ChallengeMap.Progress.Computed) AmountLeft["Computed"] -= 1;
		
		// Refresh the look of the list
		Layers::SendEvent("Modifier", "RefreshList");
			
		ComputationCounter += 1;
		
		if(ComputationCounter == ComputationIds.count) {
			// when modification ends
		}
	}
	if(ComputationIds.count > 0) ComputationIds.clear();
	
	declare Integer[] RedoThumbnailIds for This;
	declare RedoThumbnailsCounter = 0;
	foreach(RedoThumbnailId, RedoThumbnailIds) {
		if(RedoThumbnailsCounter == 0)
			Layers::Hide("StartRedoThumbnails", False); // When modification starts
	
		declare Time_ModificationStart = TimeLib::GetCurrent();
		
		declare SChallengeMapInfo[] ChallengeMaps for Layers::Page("Modifier");
		if(!ChallengeMaps.existskey(RedoThumbnailId)) { log("Bruh the ID " ^ RedoThumbnailId ^ " doesn't even exist"); continue; }
		declare ChallengeMap = ChallengeMaps[RedoThumbnailId];
		
		LoadMap::Edit(ChallengeMap.ModifiedMap, "Rethumbnail.Script.txt", """<settings>
			<setting name="S_Enable" type="boolean" value="True"/>
		</settings>""");
		
		declare Time_ModificationEnd = TimeLib::GetCurrent();
		declare Delta = TimeLib::GetDelta(Time_ModificationEnd, Time_ModificationStart);
		
		ChallengeMaps[RedoThumbnailId] = ChallengeMap;
		
		// Refresh the look of the list
		Layers::SendEvent("Modifier", "RefreshList");
			
		RedoThumbnailsCounter += 1;
		
		if(RedoThumbnailsCounter == RedoThumbnailIds.count) {
			// when modification ends
		}
	}
	if(RedoThumbnailIds.count > 0) RedoThumbnailIds.clear();

	declare Map::SMapInfo PlayThisMap for This;
	if(PlayThisMap.MapUid != "") {
		LoadMap::Play(PlayThisMap);
		PlayThisMap.MapUid = "";
	}
}