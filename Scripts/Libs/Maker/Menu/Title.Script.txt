#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary

#Include "Libs/Maker/MakerBase.Script.txt" as MakerBase
#Include "Libs/Challenge/Vehicle.Script.txt" as Vehicle

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status

#Struct STitle {
	Real Time;
	Boolean Exists;
	Boolean Approved;
	Text BanReason;
}

#Struct SPublishTitleParams {
	Text TitleId;
	Text UserToken;
	Text Description;
}

Void Init() {
	Layers::Create("EditTitle", Manialink::FromFile("Media/Manialinks/Maker/EditTitle", True, ["Audio"], Settings::Get().Theme));
	Layers::Create("ManageTitle", Manialink::FromFile("Media/Manialinks/Maker/ManageTitle", True, ["Audio"], Settings::Get().Theme));
	
	declare Title <=> TitleEdition.EditedTitleInfo;
	Layers::SendEvent("EditTitle", "Change", [Title.TitleId^"", Title.DisplayName, Title.Description,
		Title.InfoUrl, Title.DownloadUrl, Title.Packaging_ImageFileName]);
}

Void Start() {
	Layers::Show("EditTitle", True);
	Layers::Show("ManageTitle", True);
	
	declare Boolean StartBuildTitle for This;
	StartBuildTitle = False;
	
	MakerBase::UpdateStats();
}

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(Event.CustomEventLayer) {
			case Layers::Get("ManageTitle"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Menu_Quit();
					}
					case "OpenExplorer": {
						//TitleEdition.SetTitleCampaign(6, "ValleyCar","Campaigns\\Valley\\", True, True);
						TitleEdition.SaveTitleDesc();
						TitleEdition.OpenTitleFolderInExplorer();
					}
					case "ImportFile": {
						TitleEdition.Dialog_ImportFiles();
					}
					case "Builder": {
						Layers::Show("Builder", True);
						Layers::Hide("EditTitle", True);
						Layers::Hide("ManageTitle", True);
					}
					case "Modifier": {
						Layers::Show("Modifier", True);
						Layers::Hide("EditTitle", True);
						Layers::Hide("ManageTitle", True);
					}
					case "Preview": {
						Layers::Show("Campaign", True);
						Layers::Hide("EditTitle", True);
						Layers::Hide("ManageTitle", True);
					}
				}
			}
			case Layers::Get("EditTitle"): {
				switch(Event.CustomEventType) {
					case "UpdateTitle": {
						if(TitleEdition == Null) return;
						declare DisplayName = Event.CustomEventData[1];
						declare Description = Event.CustomEventData[2];
						declare InfoUrl = Event.CustomEventData[3];
						declare DownloadUrl = Event.CustomEventData[4];

						TitleEdition.EditedTitleInfo.DisplayName = DisplayName;
						TitleEdition.EditedTitleInfo.Description = Description;
						TitleEdition.EditedTitleInfo.InfoUrl = InfoUrl;
						TitleEdition.EditedTitleInfo.DownloadUrl = DownloadUrl;
						
						TitleEdition.SaveTitleDesc();
					}
					case "BuildTitle": {
						declare Boolean StartBuildTitle for This;
						StartBuildTitle = True;
					}
					case "PublishTitle": {
						declare Text CHALLENGE_TOKEN for LocalUser;
						
						declare SPublishTitleParams Params;
						Params.UserToken = CHALLENGE_TOKEN;
						Params.TitleId = TitleEdition.EditedTitleId;
						Params.Description = TitleEdition.EditedTitleInfo.Description;
						
						declare Success = Http::AsyncPOST("PUBLISHTITLE", Service_Status::LastStatus(LocalUser).Global.Service^"/ingame/publishtitle.php", Params.tojson());
					}
				}
			}
		}
	}
}

Void Async() {
	if(Http::IsCompleted("TITLE")) {
		if(Http::IsSuccessful("TITLE")) {
			declare STitle Title for Layers::Page("EditTitle");
			declare Success = Title.fromjson(Http::GetResult("TITLE"));
			Layers::SendEvent("EditTitle", "UpdatePublish");
		}
	}
}

Void BuildPackage() {
	declare MakerBase::SCampaign[] Campaigns;
	declare JsonSuccess = Campaigns.fromjson(TitleEdition.File_ReadText(MakerBase::GetCampaignsFile()));
	
	declare MakerBase::SChallenge[][] Challenges for This;
	declare JsonChallenges = Challenges.fromjson(TitleEdition.File_ReadText("Media/Challenges.json"));
	
	declare Vehicles = Vehicle::FromFile("Media/Vehicle.json");
	declare Counter = 0;
	for(I,0,Vehicles.count-1)
		TitleEdition.SetTitleCampaign(I, Vehicles[I].Name, "Maps/Campaigns/", True, True);
	
	declare PckCr <=> TitleEdition.PackCreator;
	declare TitleInfo <=> TitleEdition.EditedTitleInfo;
	
	if(PckCr.CurrentPack == Null) {
		PckCr.RegisterPackForEditedTitle();
		wait(!PckCr.RegisterPack_IsInProgess);
	}
	if(PckCr.CurrentPack == Null) {
		Dialog_Message(_("Could not register the pack"));
		return;
	}
	if(TitleInfo.DisplayName == "")
		TitleInfo.DisplayName = TitleEdition.EditedTitleId;
	if(TitleInfo.Description == "")
		TitleInfo.Description = TextLib::Compose(_("Made in maker '%1'."), LoadedTitle.Name);
		
	TitleInfo.Menus_ManiaAppFileName = "Media/Apps/Menu_Campaign.Script.txt";
	TitleEdition.SaveTitleDesc();
	
	declare Pack = PckCr.Build_Begin(PckCr.CurrentPack, TitleInfo);
	PckCr.Build_AddFolder(Pack, "Media/");
	PckCr.Build_AddFolder(Pack, "Maps/Campaigns/");
	PckCr.Build_AddFolder(Pack, "Scripts/");
	PckCr.Build_AddFolder(Pack, "Blocks/");
	PckCr.Build_AddFolder(Pack, "Items/");
	PckCr.Build_AddFolder(Pack, "Skins/");
	PckCr.Build_AddFolder(Pack, "Maps/", False, True, False, False);
	PckCr.Build_AddFolder(Pack, "Scripts/");
	PckCr.Build_AddFile(Pack, "Scripts/Modes/TrackMania/SkinSelect.Script.txt");
	PckCr.Build_AddFile(Pack, "Scripts/Modes/TrackMania/Replay.Script.txt");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/CanyonCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/StadiumCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/ValleyCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/LagoonCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/DesertCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/SnowCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/RallyCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/IslandCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/BayCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/CoastCar.Item.Gbx");
	PckCr.Build_Generate(Pack, False);
	wait(PckCr.Build_IsGenerated(Pack));
	declare Success = (PckCr.Build_ErrorMessage(Pack) == "");
	declare ErrorMessage = PckCr.Build_ErrorMessage(Pack);
	PckCr.Build_End(Pack);
}

Void Loop() {
	declare Boolean StartBuildTitle for This;
	if(StartBuildTitle && TitleEdition.TitleMaker != Null) {
		BuildPackage();
		StartBuildTitle = False;
	}
}