#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Task.Script.txt" as Task
#Include "Libs/BigBang1112/Map.Script.txt" as Map

#Include "Libs/Maker/MakerBase.Script.txt" as MakerBase
#Include "Libs/Challenge/Vehicle.Script.txt" as Vehicle

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status
#Include "Libs/Challenge/Service/Map.Script.txt" as Service_Map

#Struct STitle {
	Real Time;
	Boolean Exists;
	Boolean Approved;
	Text BanReason;
	Integer[] ReleaseDate;
	Integer[] EnvimixDate;
	Integer[] UnitedEnvimixDate;
}

#Struct SPublishTitleParams {
	Text TitleId;
	Text UserToken;
	Text Description;
	Text ReleaseDate;
	Text EnvimixDate;
	Text UnitedEnvimixDate;
}

#Struct SPublishTitleResponse {
	Boolean Added;
	Boolean Updated;
	Boolean Occupied;
}

#Struct SPublicMapInfo {
	Text MapUid;
	Text Name;
	Text Author;
	Text OriginalUid;
	Text OriginalName;
	Text OriginalAuthor;
	Text Environment;
	Integer Laps;
	Text Campaign;
	Text TitleId;
	Text Challenge;
}

#Struct SPublishAllParams {
	Text UserToken;
	Text TitleId;
	SPublicMapInfo[] Maps;
}

Void RequestTitleInfo() {
	declare Text CHALLENGE_TOKEN for LocalUser;
	if(TitleEdition == Null)
		declare Success = Http::AsyncPOST("TITLE", Service_Status::LastStatus(LocalUser).Global.Service^"/title.php?"^LoadedTitle.TitleId, CHALLENGE_TOKEN); // change this to LoadedTitle.TitleId
	else
		declare Success = Http::AsyncPOST("TITLE", Service_Status::LastStatus(LocalUser).Global.Service^"/title.php?"^TitleEdition.EditedTitleId, CHALLENGE_TOKEN);
}

Void Init() {
	Layers::Create("EditTitle", Manialink::FromFile("Media/Manialinks/Maker/EditTitle", True, ["Audio"], Settings::Get().Theme));
	Layers::Create("ManageTitle", Manialink::FromFile("Media/Manialinks/Maker/ManageTitle", True, ["Audio"], Settings::Get().Theme));
	
	declare Title <=> TitleEdition.EditedTitleInfo;
	Layers::SendEvent("EditTitle", "Change", [Title.TitleId^"", Title.DisplayName, Title.Description,
		Title.InfoUrl, Title.DownloadUrl, Title.Packaging_ImageFileName]);
}

Void Start() {
	Layers::Show("EditTitle", True);
	Layers::Show("ManageTitle", True);
	
	declare Boolean StartBuildTitle for This;
	StartBuildTitle = False;
	
	MakerBase::UpdateStats();
}

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(Event.CustomEventLayer) {
			case Layers::Get("ManageTitle"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Menu_Quit();
					}
					case "OpenExplorer": {
						//TitleEdition.SetTitleCampaign(6, "ValleyCar","Campaigns\\Valley\\", True, True);
						TitleEdition.SaveTitleDesc();
						TitleEdition.OpenTitleFolderInExplorer();
					}
					case "ImportFile": {
						TitleEdition.Dialog_ImportFiles();
					}
					case "Builder": {
						Layers::Show("Builder", True);
						Layers::Hide("EditTitle", True);
						Layers::Hide("ManageTitle", True);
					}
					case "Modifier": {
						Layers::Show("Modifier", True);
						Layers::Hide("EditTitle", True);
						Layers::Hide("ManageTitle", True);
					}
					case "Preview": {
						Layers::Show("Campaign", True);
						Layers::Hide("EditTitle", True);
						Layers::Hide("ManageTitle", True);
					}
				}
			}
			case Layers::Get("EditTitle"): {
				switch(Event.CustomEventType) {
					case "UpdateTitle": {
						if(TitleEdition == Null) return;
						declare DisplayName = Event.CustomEventData[1];
						declare Description = Event.CustomEventData[2];
						declare InfoUrl = Event.CustomEventData[3];
						declare DownloadUrl = Event.CustomEventData[4];

						TitleEdition.EditedTitleInfo.DisplayName = DisplayName;
						TitleEdition.EditedTitleInfo.Description = Description;
						TitleEdition.EditedTitleInfo.InfoUrl = InfoUrl;
						TitleEdition.EditedTitleInfo.DownloadUrl = DownloadUrl;
						
						TitleEdition.SaveTitleDesc();
					}
					case "BuildTitle": {
						declare Boolean StartBuildTitle for This;
						StartBuildTitle = True;
					}
					case "PublishTitle": {
						declare Text CHALLENGE_TOKEN for LocalUser;

						declare Description = TitleEdition.EditedTitleInfo.Description;
						if(Description == "") {
							Dialog_Message("Please provide an attractive title description of your Challenge project for approval.");
						}
						else {
							declare SPublishTitleParams Params;
							Params.UserToken = CHALLENGE_TOKEN;
							Params.TitleId = TitleEdition.EditedTitleId;
							Params.Description = TitleEdition.EditedTitleInfo.Description;
							
							declare Success = Http::AsyncPOST("PUBLISHTITLE", Service_Status::LastStatus(LocalUser).Global.Service^"/ingame/publishtitle.php", Params.tojson());
						}
						
						RequestTitleInfo();
					}
					case "PublishMetadata": {
						declare Text CHALLENGE_TOKEN for LocalUser;
						
						declare SPublishTitleParams Params;
						Params.UserToken = CHALLENGE_TOKEN;
						Params.TitleId = TitleEdition.EditedTitleId;
						Params.Description = TitleEdition.EditedTitleInfo.Description;
						Params.ReleaseDate = Event.CustomEventData[0];
						Params.EnvimixDate = Event.CustomEventData[1];
						Params.UnitedEnvimixDate = Event.CustomEventData[2];
						
						declare Success = Http::AsyncPOST("PUBLISHTITLE", Service_Status::LastStatus(LocalUser).Global.Service^"/ingame/publishtitle.php", Params.tojson());
					}
					case "RequestPublication": {
						RequestTitleInfo();
						Task::Async_DataFileMgr("ALL_CAMPAIGN_MAPS", DataFileMgr.Map_GetGameList("Campaigns", True));
					}
					case "PublishMap": {
						declare SPublicMapInfo Map;
						declare Json = Map.fromjson(Event.CustomEventData[0]);
						
						declare Text CHALLENGE_TOKEN for LocalUser;
						
						declare Service_Map::SPublishParams Params;
						Params.UserToken = CHALLENGE_TOKEN;
						Params.MapUid = Map.MapUid;
						Params.MapName = Map.Name;
						Params.MapAuthor = Map.Author;
						Params.OriginalMapUid = Map.OriginalUid;
						Params.OriginalMapName = Map.OriginalName;
						Params.OriginalMapAuthor = Map.OriginalAuthor;
						Params.TitleId = Map.TitleId;
						Params.Environment = Map.Environment;
						Params.Campaign = Map.Campaign;
						foreach(Modifier in TextLib::Split("+", Map.Challenge))
							Params.Modifiers.add(Modifier);
						
						declare Success = Service_Map::AsyncPublish("PUBLISHMAP", LocalUser, Params);
					}
					case "PublishAllMaps": {
						declare Text CHALLENGE_TOKEN for LocalUser;
						declare SPublishAllParams Params;
						Params.UserToken = CHALLENGE_TOKEN;
						Params.TitleId = TitleEdition.EditedTitleId;
						declare Json = Params.Maps.fromjson(Event.CustomEventData[0]);
						
						declare Success = Http::AsyncPOST("PUBLISHALLMAPS", Service_Status::LastStatus(LocalUser).Global.Service^"/ingame/publishmaps.php", Params.tojson());
					}
				}
			}
		}
	}
}

Void Async() {
	if(Http::IsCompleted("TITLE")) {
		if(Http::IsSuccessful("TITLE")) {
			declare STitle Title for Layers::Page("EditTitle");
			declare Success = Title.fromjson(Http::GetResult("TITLE"));
			Layers::SendEvent("EditTitle", "UpdatePublish");
		}
	}
	if(Http::IsCompleted("PUBLISHTITLE")) {
		if(Http::IsSuccessful("PUBLISHTITLE")) {
			declare Text CHALLENGE_TOKEN for LocalUser;
			declare SPublishTitleResponse Response;
			declare Success = Response.fromjson(Http::GetResult("PUBLISHTITLE"));
			if(Response.Added) {
				Dialog_Message("Your title has been successfully submitted for approval.\nTo speedup the approval time, don't worry to contact $h[bigbang1112]BigBang1112$h on Discord about your submission.");
			}
			else if(Response.Updated) {
				Dialog_Message("You have successfully updated your title metadata.");
			}
			else if(Response.Occupied) {
				Dialog_Message("Your title hasn't been submitted, most likely due to its ID already existing.\nConsider choosing a different title pack ID/name.");
			}
			
			RequestTitleInfo();
			Http::Destroy("PUBLISHTITLE");
		}
	}
	if(Http::IsCompleted("MAPS")) {
		if(Http::IsSuccessful("MAPS")) {
			declare SPublicMapInfo[Text] PublishedMaps for Layers::Page("EditTitle");
			declare Success = PublishedMaps.fromjson(Http::GetResult("MAPS"));
			
			Layers::SendEvent("EditTitle", "UpdatePublishableMaps");
			
			Http::Destroy("MAPS");
		}
	}
	if(Http::IsCompleted("PUBLISHMAP")) {
		if(Http::IsSuccessful("PUBLISHMAP")) {
			declare Map = Service_Map::GetAsyncPublishResult("PUBLISHMAP");
			declare Success = Http::AsyncGET("MAPS", Service_Status::LastStatus(LocalUser).Global.Service^"/maps.php?title="^TitleEdition.EditedTitleId);
		}
	}
	if(Http::IsCompleted("PUBLISHALLMAPS")) {
		if(Http::IsSuccessful("PUBLISHALLMAPS")) {
			log(Http::GetResult("PUBLISHALLMAPS"));
			declare Success = Http::AsyncGET("MAPS", Service_Status::LastStatus(LocalUser).Global.Service^"/maps.php?title="^TitleEdition.EditedTitleId);
		}
		Http::Destroy("PUBLISHALLMAPS");
	}
	
	if(Task::IsCompleted("ALL_CAMPAIGN_MAPS")) {
		if(Task::IsSuccessful("ALL_CAMPAIGN_MAPS")) {
			declare Maps = Task::ToMapList(Task::Get("ALL_CAMPAIGN_MAPS"));
			
			declare SPublicMapInfo[] PublishableMaps for Layers::Page("EditTitle");
			PublishableMaps.clear();
			
			declare MakerBase::SProgress Progress for This;
			
			declare Yielder = 0;
			foreach(OriginalMap => ModifiedMaps in Progress.Maps) {
				foreach(ModifiedMap => Info in ModifiedMaps) {
					foreach(MapInfo in Maps.MapInfos) {
						if(MapInfo.MapUid == ModifiedMap && MapInfo.IsPlayable) {
							declare Folders = TextLib::Split("/", TextLib::Replace(MapInfo.FileName, "\\", "/"));
							declare Campaign = Folders[Folders.count-4];
							
							declare CMapInfo OriginalMapInfo;
							declare Text[] OriginalLocation;
							foreach(Fold in Folders) OriginalLocation.add(Fold);
							OriginalLocation[OriginalLocation.count-3] = "Default";
							foreach(AnotherMapInfo in Maps.MapInfos) {
								if(AnotherMapInfo.FileName == TextLib::Join("/", OriginalLocation)
								|| AnotherMapInfo.FileName == TextLib::Join("\\", OriginalLocation)) {
									OriginalMapInfo <=> AnotherMapInfo;
									break;
								}
							}
							
							declare SPublicMapInfo M;
							M.MapUid = MapInfo.MapUid;
							M.Name = MapInfo.Name;
							M.Author = MapInfo.AuthorNickName;
							M.OriginalUid = OriginalMapInfo.MapUid;
							M.OriginalName = OriginalMapInfo.Name;
							M.OriginalAuthor = OriginalMapInfo.AuthorNickName;
							M.Environment = MapInfo.CollectionName;
							M.Laps = MapInfo.TMObjective_NbLaps;
							M.Campaign = Campaign;
							M.TitleId = TitleEdition.EditedTitleId;
							M.Challenge = MapInfo.MapStyle;
							PublishableMaps.add(M);
							
							break;
						}
					}
				}
				Yielder += 1;
				if(Yielder > 20) {
					yield;
					Yielder = 0;
				}
			}
			
			Layers::SendEvent("EditTitle", "UpdatePublishableMaps");
			
			declare Success = Http::AsyncGET("MAPS", Service_Status::LastStatus(LocalUser).Global.Service^"/maps.php?title="^TitleEdition.EditedTitleId);
			
			Task::Destroy_DataFileMgr("ALL_CAMPAIGN_MAPS");
		}
	}
}

Void BuildPackage() {
	declare MakerBase::SCampaign[] Campaigns;
	declare JsonSuccess = Campaigns.fromjson(TitleEdition.File_ReadText(MakerBase::GetCampaignsFile()));
	
	declare MakerBase::SChallenge[][] Challenges for This;
	declare JsonChallenges = Challenges.fromjson(TitleEdition.File_ReadText("Media/Challenges.json"));
	
	declare Vehicles = Vehicle::FromFile("Media/Vehicle.json");
	declare Counter = 0;
	for(I,0,Vehicles.count-1)
		TitleEdition.SetTitleCampaign(I, Vehicles[I].Name, "Maps/Campaigns/", True, True);
	
	declare PckCr <=> TitleEdition.PackCreator;
	declare TitleInfo <=> TitleEdition.EditedTitleInfo;
	
	if(PckCr.CurrentPack == Null) {
		PckCr.RegisterPackForEditedTitle();
		wait(!PckCr.RegisterPack_IsInProgess);
	}
	if(PckCr.CurrentPack == Null) {
		Dialog_Message(_("Could not register the pack"));
		return;
	}
	if(TitleInfo.DisplayName == "")
		TitleInfo.DisplayName = TitleEdition.EditedTitleId;
	if(TitleInfo.Description == "")
		TitleInfo.Description = TextLib::Compose(_("Made in maker '%1'."), LoadedTitle.Name);
		
	TitleInfo.Menus_ManiaAppFileName = "Media/Apps/Menu_Campaign.Script.txt";
	TitleEdition.SaveTitleDesc();
	
	declare Pack = PckCr.Build_Begin(PckCr.CurrentPack, TitleInfo);
	PckCr.Build_AddFolder(Pack, "Media/");
	PckCr.Build_AddFolder(Pack, "Maps/Campaigns/");
	PckCr.Build_AddFolder(Pack, "Scripts/");
	PckCr.Build_AddFolder(Pack, "Blocks/");
	PckCr.Build_AddFolder(Pack, "Items/");
	PckCr.Build_AddFolder(Pack, "Skins/");
	PckCr.Build_AddFolder(Pack, "Maps/", False, True, False, False);
	PckCr.Build_AddFolder(Pack, "Scripts/");
	PckCr.Build_AddFile(Pack, "Scripts/Modes/TrackMania/SkinSelect.Script.txt");
	PckCr.Build_AddFile(Pack, "Scripts/Modes/TrackMania/Replay.Script.txt");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/CanyonCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/StadiumCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/ValleyCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/LagoonCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/DesertCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/SnowCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/RallyCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/IslandCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/BayCar.Item.Gbx");
	PckCr.Build_AddFile(Pack, "Items/Vehicles/CoastCar.Item.Gbx");
	PckCr.Build_Generate(Pack, False);
	wait(PckCr.Build_IsGenerated(Pack));
	declare Success = (PckCr.Build_ErrorMessage(Pack) == "");
	declare ErrorMessage = PckCr.Build_ErrorMessage(Pack);
	PckCr.Build_End(Pack);
}

Void Loop() {
	declare Boolean StartBuildTitle for This;
	if(StartBuildTitle && TitleEdition.TitleMaker != Null) {
		BuildPackage();
		StartBuildTitle = False;
	}
}