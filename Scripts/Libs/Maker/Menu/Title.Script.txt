#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary

#Include "Libs/Maker/MakerBase.Script.txt" as MakerBase
#Include "Libs/Challenge/Vehicle.Script.txt" as Vehicle

Void Init() {
	Layers::Create("EditTitle", Manialink::FromFile("Media/Manialinks/Maker/EditTitle", True, ["Audio"], Settings::Get().Theme));
	Layers::Create("ManageTitle", Manialink::FromFile("Media/Manialinks/Maker/ManageTitle", True, ["Audio"], Settings::Get().Theme));
	
	declare Title <=> TitleEdition.EditedTitleInfo;
	Layers::SendEvent("EditTitle", "Change", [Title.TitleId^"", Title.DisplayName, Title.Description,
		Title.InfoUrl, Title.DownloadUrl]);
}

Void Start() {
	Layers::Show("EditTitle",True);
	Layers::Show("ManageTitle",True);
	
	declare Boolean StartBuildTitle for This;
	StartBuildTitle = False;
	
	MakerBase::UpdateStats();
}

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(Event.CustomEventLayer) {
			case Layers::Get("ManageTitle"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Menu_Quit();
					}
					case "OpenExplorer": {
						//TitleEdition.SetTitleCampaign(6, "ValleyCar","Campaigns\\Valley\\", True, True);
						TitleEdition.SaveTitleDesc();
						TitleEdition.OpenTitleFolderInExplorer();
					}
					case "ImportFile": {
						TitleEdition.Dialog_ImportFiles();
					}
					case "Builder": {
						Layers::Show("Builder", True);
						Layers::Hide("EditTitle", False);
						Layers::Hide("ManageTitle", False);
					}
					case "Modifier": {
						Layers::Show("Modifier", True);
						Layers::Hide("EditTitle", False);
						Layers::Hide("ManageTitle", False);
					}
					case "Preview": {
						Layers::Show("Campaign", True);
						Layers::Hide("EditTitle", False);
						Layers::Hide("ManageTitle", False);
					}
				}
			}
			case Layers::Get("EditTitle"): {
				switch(Event.CustomEventType) {
					case "UpdateTitle": {
						if(TitleEdition == Null) return;
						declare DisplayName = Event.CustomEventData[1];
						declare Description = Event.CustomEventData[2];
						declare InfoUrl = Event.CustomEventData[3];
						declare DownloadUrl = Event.CustomEventData[4];

						TitleEdition.EditedTitleInfo.DisplayName = DisplayName;
						TitleEdition.EditedTitleInfo.Description = Description;
						TitleEdition.EditedTitleInfo.InfoUrl = InfoUrl;
						TitleEdition.EditedTitleInfo.DownloadUrl = DownloadUrl;
						
						TitleEdition.SaveTitleDesc();
					}
					case "BuildTitle": {
						declare Boolean StartBuildTitle for This;
						StartBuildTitle = True;
					}
				}
			}
		}
	}
}

Void Async() {
	
}

Void BuildPackage() {
	declare MakerBase::SCampaign[] Campaigns;
	declare JsonSuccess = Campaigns.fromjson(File::Read(MakerBase::GetCampaignsFile()));
	
	declare Vehicles = Vehicle::FromFile("Media/Vehicle.json");
	declare Counter = 0;
	for(I,0,Campaigns.count-1) {
		for(J,0,Vehicles.count-1) {
			TitleEdition.SetTitleCampaign(Counter, Vehicles[J].Name, Campaigns[I].Folder, True, True);
			Counter += 1;
		}
	}
	
	declare PckCr <=> TitleEdition.PackCreator;
	
	if(PckCr.CurrentPack == Null) {
		PckCr.RegisterPackForEditedTitle();
		wait(!PckCr.RegisterPack_IsInProgess);
	}
	if(PckCr.CurrentPack == Null) {
		Dialog_Message(_("Could not register the pack"));
		return;
	}
	if(TitleEdition.EditedTitleInfo.DisplayName == "")
		TitleEdition.EditedTitleInfo.DisplayName = TitleEdition.EditedTitleId;
	if(TitleEdition.EditedTitleInfo.Description == "")
		TitleEdition.EditedTitleInfo.Description = TextLib::Compose(_("Made in maker '%1'."), LoadedTitle.Name);
	
	declare Pack = PckCr.Build_Begin(PckCr.CurrentPack, TitleEdition.EditedTitleInfo);
	PckCr.Build_Generate(Pack, False);
	wait(PckCr.Build_IsGenerated(Pack));
	declare Success = (PckCr.Build_ErrorMessage(Pack) == "");
	declare ErrorMessage = PckCr.Build_ErrorMessage(Pack);
	PckCr.Build_End(Pack);
	
	TitleEdition.SaveTitleDesc();
}

Void Loop() {
	declare Boolean StartBuildTitle for This;
	if(StartBuildTitle && TitleEdition.TitleMaker != Null) {
		BuildPackage();
		StartBuildTitle = False;
	}
}