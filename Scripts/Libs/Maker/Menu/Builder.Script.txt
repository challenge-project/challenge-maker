#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Task.Script.txt" as Task

#Include "Libs/Maker/CampaignBuilder.Script.txt" as CampaignBuilder
#Include "Libs/Maker/MakerBase.Script.txt" as MakerBase

Void UpdateSettings(Integer _Scroll) {
	declare MakerBase::SChallengeTitleSettings Settings for This;
	TitleEdition.File_WriteText("Media/Settings.json", Settings.tojson());
	
	CampaignBuilder::UpdateBuilder("Builder", "Media/Manialinks/Maker/Builder", _Scroll, Settings.Type == "Custom");
	CampaignBuilder::UpdateBuilder("Campaign", "Media/Manialinks/Campaign/Campaign", 0, False);
}

Void Init() {
	Layers::Create("Builder", "");
	
	declare MakerBase::SChallengeTitleSettings Settings for This;
	declare JsonSuccess2 = Settings.fromjson(File::Read("Media/Settings.json")); // Should be responsive
	
	declare CampaignBuilder::SCampaign[] Campaigns for This;
	declare JsonSuccess = Campaigns.fromjson(File::Read(CampaignBuilder::GetCampaignsFile())); // Should be responsive

	CampaignBuilder::UpdateBuilder("Builder", "Media/Manialinks/Maker/Builder", 0, Settings.Type == "Custom");
}

Void Start() {

}

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;
	
	declare Boolean Changed for This;
	declare Integer LastScroll for This;
	declare Boolean SettingsChanged for This;
	declare MakerBase::SChallengeTitleSettings Settings for This;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(Event.CustomEventLayer) {
			case Layers::Get("Builder"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Layers::Hide("Builder", False);
						Layers::Show("EditTitle", True);
						Layers::Show("ManageTitle", True);
						
						declare Boolean IsReloaded for This;
						IsReloaded = False;
					}
					case "AddGroup": {
						if(Settings.Type == "Nadeo") return;
						
						declare Scroll = TextLib::ToInteger(Event.CustomEventData[0]);
						declare CampaignId = TextLib::ToInteger(Event.CustomEventData[1]);
						
						declare CampaignBuilder::SCampaign[] Campaigns for This;
						declare CampaignBuilder::SGroup Group;
						Group.BackgroundColor = "000";
						
						if(!Campaigns.existskey(CampaignId)) return;
						Campaigns[CampaignId].Groups.add(Group);
						
						LastScroll = Scroll;
						Changed = True;
					}
					case "RemoveGroup": {
						if(Settings.Type == "Nadeo") return;
						
						declare Scroll = TextLib::ToInteger(Event.CustomEventData[0]);
						declare CampaignId = TextLib::ToInteger(Event.CustomEventData[1]);
						declare GroupId = TextLib::ToInteger(Event.CustomEventData[2]);
						
						declare CampaignBuilder::SCampaign[] Campaigns for This;
						
						if(!Campaigns.existskey(CampaignId)) return;
						declare Removed = Campaigns[CampaignId].Groups.removekey(GroupId);
						
						LastScroll = Scroll;
						Changed = True;
					}
					case "AddMap": {
						if(Settings.Type == "Nadeo") return;
						
						declare Scroll = TextLib::ToInteger(Event.CustomEventData[0]);
						
						// some map file add to add here
						
						LastScroll = Scroll;
						Changed = True;
					}
					case "RemoveMap": {
						if(Settings.Type == "Nadeo") return;
						
						declare Scroll = TextLib::ToInteger(Event.CustomEventData[0]);
						declare CampaignId = TextLib::ToInteger(Event.CustomEventData[1]);
						declare GroupId = TextLib::ToInteger(Event.CustomEventData[2]);
						declare MapFile = Event.CustomEventData[3];
						
						TitleEdition.File_Delete("Maps/"^MapFile);
						
						LastScroll = Scroll;
						Changed = True;
					}
					case "UpdateCampaignFile": {
						if(Settings.Type == "Nadeo") return;
						
						declare CampaignBuilder::SCampaign[] Campaigns for This;
						TitleEdition.File_WriteText(CampaignBuilder::GetCampaignsFile(), Campaigns.tojson());
					}
					case "UpdateGroup": {
						if(Settings.Type == "Nadeo") return;
					
						declare CampaignId = TextLib::ToInteger(Event.CustomEventData[0]);
						declare GroupId = TextLib::ToInteger(Event.CustomEventData[1]);
						declare Value = Event.CustomEventData[2];
						
						declare CampaignBuilder::SCampaign[] Campaigns for This;
						if(!Campaigns.existskey(CampaignId)) return;
						if(!Campaigns[CampaignId].Groups.existskey(GroupId)) return;
						Campaigns[CampaignId].Groups[GroupId].Name = Value;
						
						TitleEdition.File_WriteText(CampaignBuilder::GetCampaignsFile(), Campaigns.tojson());
					}
					case "ChangeType": {
						declare Type = Event.CustomEventData[0];
						
						if(Type == "Nadeo") {
							Settings.Type = "Nadeo";
							SettingsChanged = True;

							Layers::SendEvent("Builder", "NadeoCampaign");
						}
						else if(Type == "Custom") {
							Settings.Type = "Custom";
							SettingsChanged = True;
							Layers::SendEvent("Builder", "CustomCampaign");
						}
						
						declare CampaignBuilder::SCampaign[] Campaigns for This;
						declare JsonSuccess = Campaigns.fromjson(File::Read(CampaignBuilder::GetCampaignsFile())); // Should be responsive
					}
				}
			}
		}
	}
}

Void Async() {
	
}

Void Loop() {
	declare Boolean Changed for This;
	declare Integer LastScroll for This;
	declare Boolean SettingsChanged for This;
	declare MakerBase::SChallengeTitleSettings Settings for This;
	
	if(Changed) {
		CampaignBuilder::UpdateBuilder("Builder", "Media/Manialinks/Maker/Builder", LastScroll, Settings.Type == "Custom");
		Changed = False;
	}
	if(SettingsChanged) {
		UpdateSettings(LastScroll);
		SettingsChanged = False;
	}
}