#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Task.Script.txt" as Task

#Include "Libs/Maker/MakerBase.Script.txt" as MakerBase

Void UpdateSettings(Integer _Scroll, Integer _Campaign) {
	declare MakerBase::SChallengeTitleSettings Settings for This;
	TitleEdition.File_WriteText("Media/Settings.json", Settings.tojson());
	
	MakerBase::UpdateBuilder("Builder", "Media/Manialinks/Maker/Builder", _Scroll, _Campaign, Settings.Type == "Custom", []);
	
	declare MakerBase::SScriptInfo[][] Scripts_Campaign for Layers::Page("Campaign");
	MakerBase::UpdateBuilder("Campaign", "Media/Manialinks/Campaign/Campaign", 0, 0, False, MakerBase::ChallengesToTextArray(Scripts_Campaign));
}

Void Init() {
	Layers::Create("Builder", "");
	
	declare MakerBase::SChallengeTitleSettings Settings for This;
	declare JsonSuccess2 = Settings.fromjson(TitleEdition.File_ReadText("Media/Settings.json")); // Should be responsive
	
	declare MakerBase::SCampaign[] Campaigns for This;
	declare JsonSuccess = Campaigns.fromjson(TitleEdition.File_ReadText(MakerBase::GetCampaignsFile())); // Should be responsive

	MakerBase::UpdateBuilder("Builder", "Media/Manialinks/Maker/Builder", 0, 0, Settings.Type == "Custom", []);
}

Void Start() {
	
}

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;
	
	declare Boolean Changed for This;
	declare Integer LastScroll for This;
	declare Boolean SettingsChanged for This;
	declare MakerBase::SChallengeTitleSettings Settings for This;
	declare Boolean GoToLast for This;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(Event.CustomEventLayer) {
			case Layers::Get("Builder"): {
				switch(Event.CustomEventType) {
					case "Exit": {
						Layers::Hide("Builder", False);
						Layers::Show("EditTitle", True);
						Layers::Show("ManageTitle", True);
						
						MakerBase::UpdateStats();
						
						declare Boolean IsReloaded for This;
						IsReloaded = False;
					}
					case "AddGroup": {
						if(Settings.Type == "Nadeo") return;
						
						declare Scroll = TextLib::ToInteger(Event.CustomEventData[0]);
						declare CampaignId = TextLib::ToInteger(Event.CustomEventData[1]);
						
						declare MakerBase::SCampaign[] Campaigns for This;
						declare MakerBase::SGroup Group;
						Group.BackgroundColor = "000";
						
						if(!Campaigns.existskey(CampaignId)) return;
						Campaigns[CampaignId].Groups.add(Group);
						
						LastScroll = Scroll;
						Changed = True;
					}
					case "RemoveGroup": {
						if(Settings.Type == "Nadeo") return;
						
						declare Scroll = TextLib::ToInteger(Event.CustomEventData[0]);
						declare CampaignId = TextLib::ToInteger(Event.CustomEventData[1]);
						declare GroupId = TextLib::ToInteger(Event.CustomEventData[2]);
						
						declare MakerBase::SCampaign[] Campaigns for This;
						
						if(!Campaigns.existskey(CampaignId)) return;
						declare Removed = Campaigns[CampaignId].Groups.removekey(GroupId);
						
						LastScroll = Scroll;
						Changed = True;
					}
					case "AddMap": {
						if(Settings.Type == "Nadeo") return;
						
						declare Scroll = TextLib::ToInteger(Event.CustomEventData[0]);
						// some map file add to add here
						
						//LastScroll = Scroll;
						//Changed = True;
					}
					case "RemoveMap": {
						if(Settings.Type == "Nadeo") return;
						
						declare Scroll = TextLib::ToInteger(Event.CustomEventData[0]);
						declare CampaignId = TextLib::ToInteger(Event.CustomEventData[1]);
						declare GroupId = TextLib::ToInteger(Event.CustomEventData[2]);
						declare MapFile = Event.CustomEventData[3];
						
						TitleEdition.File_Delete("Maps/"^MapFile);
						
						LastScroll = Scroll;
						Changed = True;
					}
					case "AddCampaign": {
						declare MakerBase::SCampaign[] Campaigns for This;
						
						declare MakerBase::SCampaign Campaign;
						Campaign.Name = Event.CustomEventData[0];
						if(Campaign.Name == "") return;
						Campaigns.add(Campaign);
						
						GoToLast = True;
						Changed = True;
					}
					case "RemoveCampaign": {
						declare CampaignId = TextLib::ToInteger(Event.CustomEventData[0]);
						
						declare MakerBase::SCampaign[] Campaigns for This;
						if(CampaignId == -1 || !Campaigns.existskey(CampaignId)) return;
						declare Removed = Campaigns.removekey(CampaignId);
						
						declare Integer CurrentCampaign for Layers::Page("Builder");
						declare CampNum = CurrentCampaign;
						
						if(Removed) Changed = True;
					}
					case "UpdateCampaignFile": {
						if(Settings.Type == "Nadeo") return;
						
						declare MakerBase::SCampaign[] Campaigns for This;
						TitleEdition.File_WriteText(MakerBase::GetCampaignsFile(), Campaigns.tojson());
					}
					case "UpdateGroup": {
						if(Settings.Type == "Nadeo") return;
					
						declare CampaignId = TextLib::ToInteger(Event.CustomEventData[0]);
						declare GroupId = TextLib::ToInteger(Event.CustomEventData[1]);
						declare Value = Event.CustomEventData[2];
						
						declare MakerBase::SCampaign[] Campaigns for This;
						if(!Campaigns.existskey(CampaignId)) return;
						if(!Campaigns[CampaignId].Groups.existskey(GroupId)) return;
						Campaigns[CampaignId].Groups[GroupId].Name = Value;
						
						TitleEdition.File_WriteText(MakerBase::GetCampaignsFile(), Campaigns.tojson());
					}
					case "ChangeType": {
						declare Type = Event.CustomEventData[0];
						
						if(Type == "Nadeo") {
							Settings.Type = "Nadeo";
							SettingsChanged = True;

							Layers::SendEvent("Builder", "NadeoCampaign");
						}
						else if(Type == "Custom") {
							Settings.Type = "Custom";
							SettingsChanged = True;
							Layers::SendEvent("Builder", "CustomCampaign");
						}
						
						declare MakerBase::SCampaign[] Campaigns for This;
						declare JsonSuccess = Campaigns.fromjson(TitleEdition.File_ReadText(MakerBase::GetCampaignsFile())); // Should be responsive
					}
					case "CampaignChanged": {
						declare CampaignId = TextLib::ToInteger(Event.CustomEventData[0]);
						
						declare MakerBase::SCampaign[] Campaigns for This;
						if(CampaignId >= 0 && Campaigns.count > 0) {
							declare Campaign = Campaigns[CampaignId];
							Layers::SendEvent("Builder", "CampaignChanged", [Campaign.Name, Campaign.Folder, Campaign.Image]);
						}
						else
							Layers::SendEvent("Builder", "CampaignChanged", []);
					}
					case "Campaign_DisplayName": {
						declare MakerBase::SCampaign[] Campaigns for This;
						declare Index = TextLib::ToInteger(Event.CustomEventData[0]);
						declare Campaign = Campaigns[Index];
						Campaign.Name = Event.CustomEventData[1];
						Campaigns[Index] = Campaign;
						Changed = True;
					}
					case "Campaign_MapFolder": {
						declare MakerBase::SCampaign[] Campaigns for This;
						declare Index = TextLib::ToInteger(Event.CustomEventData[0]);
						declare Campaign = Campaigns[Index];
						Campaign.Folder = Event.CustomEventData[1];
						Campaigns[Index] = Campaign;
						Changed = True;
					}
					case "Campaign_Image": {
						declare MakerBase::SCampaign[] Campaigns for This;
						declare Index = TextLib::ToInteger(Event.CustomEventData[0]);
						declare Campaign = Campaigns[Index];
						Campaign.Image = Event.CustomEventData[1];
						Campaigns[Index] = Campaign;
						Changed = True;
					}
					case "OpenMapsFolder": {
						declare MakerBase::SCampaign[] Campaigns for This;
						declare Index = TextLib::ToInteger(Event.CustomEventData[0]);
						if(Campaigns.existskey(Index)) {
							declare Campaign = Campaigns[Index];
							declare Success = OpenFileInExplorer("WorkTitles\\"^TitleEdition.EditedTitleId^"\\Maps\\Campaigns\\"^Campaign.Name^"\\");
							if(!Success) {
								declare Success2 = OpenFileInExplorer("WorkTitles\\"^TitleEdition.EditedTitleId^"\\Maps\\Campaigns\\"^Campaign.Name^"\\");
							}
						}
						
						declare Success = OpenFileInExplorer("WorkTitles\\"^TitleEdition.EditedTitleId^"\\Maps\\Campaigns\\");
					}
					case "Refresh": {
						declare Scroll = TextLib::ToInteger(Event.CustomEventData[0]);
						LastScroll = Scroll;
						DataFileMgr.Map_RefreshFromDisk();
						Changed = True;
					}
				}
			}
		}
	}
}

Void Async() {
	
}

Void Loop() {
	declare Boolean Changed for This;
	declare Integer LastScroll for This;
	declare Boolean SettingsChanged for This;
	declare MakerBase::SCampaign[] Campaigns for This;
	declare MakerBase::SChallengeTitleSettings Settings for This;
	declare Integer CurrentCampaign for Layers::Page("Builder");
	
	declare Boolean GoToLast for This;
	
	if(Changed) {
		if(GoToLast) CurrentCampaign = Campaigns.count-1;
		MakerBase::UpdateBuilder("Builder", "Media/Manialinks/Maker/Builder", LastScroll, CurrentCampaign, Settings.Type == "Custom", []);
		MakerBase::UpdateBuilder("Campaign", "Media/Manialinks/Campaign/Campaign", LastScroll, CurrentCampaign, False, ["Reverse", "Checkpointless", "Reverse+Checkpointless"]);
		Changed = False;
	}
	if(SettingsChanged) {
		UpdateSettings(LastScroll, CurrentCampaign);
		SettingsChanged = False;
	}
	
	GoToLast = False;
}