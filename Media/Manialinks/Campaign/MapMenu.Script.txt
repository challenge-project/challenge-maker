#Struct SRecord {
	Text Login;
	Text Nickname;
	Integer Time;
	Real Distance;
	Integer Stunts;
	Text Driven;
}

Text TimeToTextWithMilli(Integer _Time) {
	return TextLib::TimeToText(_Time, True)^TextLib::SubText(""^_Time, TextLib::Length(""^_Time)-1, 1);
}

Void UpdateGhosts(Text _Car) {
	declare Text[Text][Text] GhostRecords for Page;
	if(_Car == "")
		GhostRecords.clear();

	foreach(Control,(Page.GetFirstChild("FRAME_RECORDS") as CMlFrame).Controls) {
		if(_Car == "") {
			(Control as CMlLabel).Style = "TextStaticMedium";
			Control.DataAttributeSet("url", "");
			Control.DataAttributeSet("filename", "");
		}
		else if(GhostRecords.existskey(_Car)) {
			if(Control.DataAttributeGet("login") == GhostRecords[_Car]["Login"]
			&& Control.DataAttributeGet("time") == GhostRecords[_Car]["Time"]) {
				Control.DataAttributeSet("url", GhostRecords[_Car]["Url"]);
				Control.DataAttributeSet("filename", GhostRecords[_Car]["FileName"]);
				declare Label = (Control as CMlLabel);
				Label.Style = "TextCardRaceRank";
				Label.SetText("$fffï€ˆ$z " ^ Label.Value);
			}
		}
	}
}

Void Update(Text _Uid, Integer _CurrentCar, Boolean _NoAnim) {
	declare Text[] Cars for Page;
	declare SRecord[Text] Validations for Page;
	declare SRecord[][Text] Records for Page;
	declare Boolean ValidationReceived for Page;

	(Page.GetFirstChild("LABEL_CAR") as CMlLabel).SetText(Cars[_CurrentCar]);
	
	if(Validations.existskey(Cars[_CurrentCar])) {
		declare Validation = Validations[Cars[_CurrentCar]];
		if(Validation.Nickname == "")
			(Page.GetFirstChild("LABEL_VALIDATION") as CMlLabel).SetText("{{{{VALIDATED_BY}}}} " ^ Validation.Login);
		else
			(Page.GetFirstChild("LABEL_VALIDATION") as CMlLabel).SetText("{{{{VALIDATED_BY}}}} " ^ Validation.Nickname);
	}
	else if(ValidationReceived)
		(Page.GetFirstChild("LABEL_VALIDATION") as CMlLabel).SetText("{{{{NOT_YET_VALIDATED}}}}");
	else
		(Page.GetFirstChild("LABEL_VALIDATION") as CMlLabel).SetText("...");

	declare Record = ScoreMgr.Map_GetRecord(NullId, _Uid, Cars[_CurrentCar]);
	if(Record == -1)
		(Page.GetFirstChild("LABEL_PB_TIME") as CMlLabel).SetText("-:--.---");
	else
		(Page.GetFirstChild("LABEL_PB_TIME") as CMlLabel).SetText(TimeToTextWithMilli(Record));

	declare Frame_Records = (Page.GetFirstChild("FRAME_RECORDS") as CMlFrame);
	
	declare RankOffset = 0;

	for(I,0,Frame_Records.Controls.count-1) {
		declare Label = (Frame_Records.Controls[I] as CMlLabel);
		if(Records.existskey(Cars[_CurrentCar]) && Records[Cars[_CurrentCar]].existskey(I)) {
			declare EnvRecords = Records[Cars[_CurrentCar]];
			declare Record = EnvRecords[I];

			declare Rank = I+1;
			if(Records[Cars[_CurrentCar]].existskey(I-1)) {
				if(Record.Time == Records[Cars[_CurrentCar]][I-1].Time)
					RankOffset += 1;
				else
					RankOffset = 0;
			}
			Rank = I+1-RankOffset;

			Label.Style = "TextStaticMedium";
			Label.DataAttributeSet("login", Record.Login);
			Label.DataAttributeSet("time", Record.Time^"");
			Label.DataAttributeSet("url", "");
			Label.DataAttributeSet("filename", "");

			if(Record.Nickname == "")
				Label.SetText(Rank^") "^Record.Login^" / "^TimeToTextWithMilli(Record.Time));
			else
				Label.SetText(Rank^") "^Record.Nickname^"$z / "^TimeToTextWithMilli(Record.Time));
			
			if(!_NoAnim) {
				AnimMgr.Flush(Label);
				Label.RelativePosition_V3.X = 300.;
				AnimMgr.Add(Label, "<label hidden=\"0\" pos=\"0 "^Label.RelativePosition_V3.Y^"\"/>", Now+I*100, 500, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
		else {
			AnimMgr.Flush(Label);
			Label.Hide();
		}
	}
}

Void Update(Text _Uid, Integer _CurrentCar) {
	Update(_Uid, _CurrentCar, False);
}

***Start***
***
declare Frame_MapName_Bg = (Page.GetFirstChild("FRAME_MAPNAME_BG") as CMlFrame);
declare Frame_Label_MapName = (Page.GetFirstChild("FRAME_LABEL_MAPNAME") as CMlFrame);
declare Label_MapName = (Page.GetFirstChild("LABEL_MAPNAME") as CMlLabel);
declare Label_MapName2 = (Page.GetFirstChild("LABEL_MAPNAME_2") as CMlLabel);

declare Frame_Challenge_Bg = (Page.GetFirstChild("FRAME_CHALLENGE_BG") as CMlFrame);
declare Frame_Label_Challenge = (Page.GetFirstChild("FRAME_LABEL_CHALLENGE") as CMlFrame);
declare Label_Challenge = (Page.GetFirstChild("LABEL_CHALLENGE") as CMlLabel);
declare Label_Challenge2 = (Page.GetFirstChild("LABEL_CHALLENGE_2") as CMlLabel);

declare Frame_Records = (Page.GetFirstChild("FRAME_RECORDS") as CMlFrame);
declare Frame_MapMenu = (Page.GetFirstChild("FRAME_MAPMENU") as CMlFrame);

declare Quad_Background = (Page.GetFirstChild("QUAD_BACKGROUND") as CMlQuad);

declare LabelDistance = 15;

declare Name = "";
declare Author = "";
declare Uid = "";
declare Style = "";
declare FileName = "";
declare Environment = "";

declare Zones = TextLib::Split("|", LocalUser.ZonePath);
declare Integer CurrentZone for Page;
CurrentZone = 0;

declare Text[] Cars for Page;
declare CurrentCar = 0;
declare Boolean ValidationReceived for Page;
declare Boolean RecordsReceived for Page;

declare End = -1;

(Page.GetFirstChild("LABEL_PB_NICKNAME") as CMlLabel).SetText(LocalUser.Name);

EnableMenuNavigation(True, False, Null, 1);
***

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_BUTTON_EXIT": {
					SendCustomEvent("Exit", []);
				}
				case "QUAD_BUTTON_START": {
					SendCustomEvent("Start", [FileName]);
				}
				case "QUAD_ZONE_NEXT": {
					if(Zones.count == 0) continue;
					if(CurrentZone < Zones.count-1)
						CurrentZone += 1;
					else CurrentZone = 0;

					declare Text[] ZonesToJoin;
					for(I,0,CurrentZone)
						ZonesToJoin.add(Zones[I]);

					(Page.GetFirstChild("LABEL_ZONE") as CMlLabel).SetText(Zones[CurrentZone]);
					SendCustomEvent("ChangeZone",[TextLib::Join("|", ZonesToJoin), Uid]);
				}
				case "QUAD_ZONE_PREVIOUS": {
					if(Zones.count == 0) continue;
					if(CurrentZone > 0)
						CurrentZone -= 1;
					else CurrentZone = Zones.count-1;

					declare Text[] ZonesToJoin;
					for(I,0,CurrentZone)
						ZonesToJoin.add(Zones[I]);

					(Page.GetFirstChild("LABEL_ZONE") as CMlLabel).SetText(Zones[CurrentZone]);
					SendCustomEvent("ChangeZone",[TextLib::Join("|", ZonesToJoin), Uid]);
				}
				case "QUAD_CAR_NEXT": {
					if(Cars.count == 0) continue;
					if(CurrentCar < Cars.count-1)
						CurrentCar += 1;
					else CurrentCar = 0;

					Update(Uid, CurrentCar);
					UpdateGhosts(Cars[CurrentCar]);
				}
				case "QUAD_CAR_PREVIOUS": {
					if(Cars.count == 0) continue;
					if(CurrentCar > 0)
						CurrentCar -= 1;
					else CurrentCar = Cars.count-1;

					Update(Uid, CurrentCar);
					UpdateGhosts(Cars[CurrentCar]);
				}
			}

			if(Event.Control.Parent.ControlId == "FRAME_RECORDS") {
				if(Event.Control.DataAttributeGet("url") == "") {
					log("Ghost for this record unfortunately not available.");
				}
				else {
					log("Downloading " ^ Event.Control.DataAttributeGet("url") ^ "...");
					SendCustomEvent("ViewGhost", [Event.Control.DataAttributeGet("url"), Event.Control.DataAttributeGet("filename"), FileName]);
				}
			}
		}
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "Map": {
					Name = Event.CustomEventData[0];
					Author = Event.CustomEventData[1];
					Uid = Event.CustomEventData[2];
					Style = TextLib::ToUpperCase(TextLib::Join(" + ", TextLib::Split("+", Event.CustomEventData[3])));
					FileName = Event.CustomEventData[4];
					Environment = Event.CustomEventData[5];

					SlideText_Set(Label_MapName, Label_MapName2, Name, LabelDistance);
					SlideText_Set(Label_Challenge, Label_Challenge2, Style, LabelDistance);

					CurrentZone = 0;
					(Page.GetFirstChild("LABEL_ZONE") as CMlLabel).SetText(Zones[CurrentZone]);

					declare OfficialEnvs = ["Canyon", "Stadium", "Valley", "Lagoon", "Storm"];

					foreach(Env,OfficialEnvs)
						if(Environment == Env)
							for(I,0,Cars.count-1)
								if(Cars[I] == Env^"Car")
									CurrentCar = I;
					
					UpdateGhosts("");
					Update(Uid, CurrentCar);

					(Page.GetFirstChild("QUAD_THUMBNAIL") as CMlQuad).ChangeImageUrl("file://Thumbnails/MapUid/"^Uid);
					(Page.GetFirstChild("ENTRY_UID") as CMlEntry).SetText(Uid, False);
				}
				case "Validation": {
					declare SRecord[Text] Validations for Page;
					ValidationReceived = True;

					Update(Uid, CurrentCar, True);
				}
				case "Records": {
					declare SRecord[][Text] Records for Page;
					RecordsReceived = True;

					Update(Uid, CurrentCar);
				}
				case "RecordGhost": {
					declare _Car = Event.CustomEventData[0];
					declare _Login = Event.CustomEventData[1];
					declare _Nickname = Event.CustomEventData[2];
					declare _Time = Event.CustomEventData[3];
					declare _Url = Event.CustomEventData[4];
					declare _FileName = Event.CustomEventData[5];

					declare Text[Text][Text] GhostRecords for Page;
					if(!GhostRecords.existskey(_Car)) GhostRecords[_Car] = [];
					GhostRecords[_Car]["Login"] = _Login;
					GhostRecords[_Car]["Nickname"] = _Nickname;
					GhostRecords[_Car]["Time"] = _Time;
					GhostRecords[_Car]["Url"] = _Url;
					GhostRecords[_Car]["FileName"] = _FileName;

					UpdateGhosts(_Car);
				}
				case "Show": {
					End = -1;

					declare SRecord[][Text] Records for Page;
					Records.clear();
					RecordsReceived = False;
					declare SRecord[Text] Validations for Page;
					Validations.clear();
					ValidationReceived = False;

					Frame_MapMenu.RelativePosition_V3.X = -100.;
					AnimMgr.Add(Frame_MapMenu, "<label pos=\"0 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					Quad_Background.Show();
					Quad_Background.Opacity = 0.;
					AnimMgr.Add(Quad_Background, "<quad opacity=\"1\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				case "Hide": {
					End = Now;

					Quad_Background.Hide();
					AnimMgr.Add(Frame_MapMenu, "<label pos=\"-100 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);

					for(I,0,Frame_Records.Controls.count-1) {
						AnimMgr.Add(Frame_Records.Controls[I], "<label pos=\"300 "^Frame_Records.Controls[I].RelativePosition_V3.Y^"\"/>", Now+I*100, 1000, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
			}
		}
		case CMlScriptEvent::Type::MenuNavigation: {
			switch(Event.MenuNavAction) {
				case CMlScriptEvent::EMenuNavAction::Cancel: {
					
				}
				case CMlScriptEvent::EMenuNavAction::Select: {
					
				}
			}
		}
		case CMlScriptEvent::Type::KeyPress: {
			switch(Event.KeyName) {
				case "Escape": {
					SendCustomEvent("Exit", []);
				}
				case "Return": {
					SendCustomEvent("Start", [FileName]);
				}
			}
		}
	}
}

if(End != -1) {
	if(Now - End > 2000)
		SendCustomEvent("Hide_Response", []);
}

SlideText_Loop(Frame_Label_MapName, Label_MapName, Label_MapName2, LabelDistance, -.01);
SlideText_Loop(Frame_Label_Challenge, Label_Challenge, Label_Challenge2, LabelDistance, .01);
***