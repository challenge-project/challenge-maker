#Struct SPublicMap {
	Text Name;
	Text Uid;
	Text Author;
	Text OriginalName;
	Text OriginalUid;
	Text OriginalAuthor;
}

#Struct SUser {
	Text Login;
	Text Nickname;
}

#Struct SPlaysession {
	SPublicMap Map;
	SUser[] Users;
}

declare CMlQuad CurrentMapFocused;

Void PreloadMapThumbnails() {
	declare Frame_Campaign_Menu = (Page.GetFirstChild("FRAME_CAMPAIGN_MENU") as CMlFrame);
	foreach(Control, Frame_Campaign_Menu.Controls) {
		if(Control.ControlId == "FRAME_CAMPAIGN") {
			declare Frame_Campaign = (Control as CMlFrame);
			foreach(Control2, Frame_Campaign.Controls) {
				declare Frame_Group = (Control2 as CMlFrame);
				foreach(Control3, Frame_Group.Controls) {
					if(Control3.ControlId == "FRAME_MAP") {
						declare Frame_Map = (Control3 as CMlFrame);
						foreach(Control,Frame_Map.Controls) {
							if(Control.ControlId == "FRAME_CHALLENGE_INFO") {
								if(Control.DataAttributeGet("valid") == "True") {
									PreloadImage("file://Thumbnails/MapUid/"^Control.DataAttributeGet("uid"));
								}
								else {
									PreloadImage("file://Thumbnails/MapUid/"^Frame_Map.DataAttributeGet("uid"));
								}
							}
						}
					}
				}
				//yield;
			}
		}
	}
}

Void UpdateMapThumbnails(Text _Challenge) {
	declare Frame_Campaign_Menu = (Page.GetFirstChild("FRAME_CAMPAIGN_MENU") as CMlFrame);
	foreach(Control, Frame_Campaign_Menu.Controls) {
		if(Control.ControlId == "FRAME_CAMPAIGN") {
			declare Frame_Campaign = (Control as CMlFrame);
			foreach(Control2, Frame_Campaign.Controls) {
				declare Frame_Group = (Control2 as CMlFrame);
				foreach(Control3, Frame_Group.Controls) {
					if(Control3.ControlId == "FRAME_MAP") {
						declare Frame_Map = (Control3 as CMlFrame);
						foreach(Control,Frame_Map.Controls) {
							if(Control.ControlId == "FRAME_CHALLENGE_INFO") {
								if(Control.DataAttributeGet("challenge") == _Challenge) {
									if(Control.DataAttributeGet("valid") == "True") {
										(Frame_Map.GetFirstChild("QUAD_MAP") as CMlQuad).ChangeImageUrl("file://Thumbnails/MapUid/"^Control.DataAttributeGet("uid"));
										(Frame_Map.GetFirstChild("QUAD_MAP_BLOCK") as CMlQuad).Hide();
										(Frame_Map.GetFirstChild("LABEL_NAME") as CMlLabel).Opacity = 1.;
									}
									else {
										(Frame_Map.GetFirstChild("QUAD_MAP") as CMlQuad).ChangeImageUrl("file://Thumbnails/MapUid/"^Frame_Map.DataAttributeGet("uid"));
										(Frame_Map.GetFirstChild("QUAD_MAP_BLOCK") as CMlQuad).Show();
										(Frame_Map.GetFirstChild("LABEL_NAME") as CMlLabel).Opacity = .5;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

Void UpdateQuickMapInfo(CMlQuad _QuadMap) {
	declare Frame_QuickMapInfo = (Page.GetFirstChild("FRAME_QUICKMAPINFO") as CMlFrame);

	declare Text[] Challenges for Page;
	declare Integer CurrentChallenge for This;

	if(_QuadMap == Null) {
		Frame_QuickMapInfo.Hide();
	}
	else {
		declare Name = _QuadMap.Parent.DataAttributeGet("name");
		declare Author = _QuadMap.Parent.DataAttributeGet("author");
		Frame_QuickMapInfo.RelativePosition_V3 = _QuadMap.AbsolutePosition_V3;
		(Frame_QuickMapInfo.GetFirstChild("QUAD_THUMBNAIL") as CMlQuad).ChangeImageUrl(_QuadMap.ImageUrl);
		(Frame_QuickMapInfo.GetFirstChild("LABEL_NAME") as CMlLabel).SetText(Name);
		(Frame_QuickMapInfo.GetFirstChild("LABEL_CHALLENGE") as CMlLabel).SetText(TextLib::ToUpperCase(TextLib::Replace(Challenges[CurrentChallenge], "+", " + ")));
		Frame_QuickMapInfo.Show();
	}
}

***Start***
***
declare Frame_Campaigns = (Page.GetFirstChild("FRAME_CAMPAIGNS") as CMlFrame);
declare Frame_Campaign_Menu = (Page.GetFirstChild("FRAME_CAMPAIGN_MENU") as CMlFrame);
declare Frame_QuickMapInfo = (Page.GetFirstChild("FRAME_QUICKMAPINFO") as CMlFrame);
declare Quad_Scrollbar = (Page.GetFirstChild("QUAD_CAMPAIGN_SCROLL") as CMlQuad);
declare Frame_Challenges = (Page.GetFirstChild("FRAME_CHALLENGES") as CMlFrame);

declare HoldItSteady = False;
declare HoldItSteadyLoc = 0.;
declare HoldItSteadyMouse = 0.;

declare HoldItSteadyChallenge = False;
declare HoldItSteadyChallengeLoc = 0.;
declare HoldItSteadyChallengeMouse = 0.;

declare CampaignPosition = Frame_Campaigns.RelativePosition_V3.X / 45. * 225.;
declare LastCampaignPosition = Frame_Campaigns.RelativePosition_V3.X / 45. * 225.;

declare CampaignsSize = (Frame_Campaigns.Controls.count-1) * 45.;

Frame_Campaign_Menu.ScrollActive = True;
Frame_Campaign_Menu.ScrollGrid = <15.,15.>;
if(Frame_Campaign_Menu.GetFirstChild("QUAD_CAMPAIGN_MENU").Size.Y >= 150)
	Frame_Campaign_Menu.ScrollMax = <0.,Frame_Campaign_Menu.GetFirstChild("QUAD_CAMPAIGN_MENU").Size.Y-150>;
else Frame_Campaign_Menu.ScrollMax.Y = 0.;
Frame_Campaign_Menu.ScrollMin = <0.,0.>;

declare OldScrollOffset = Frame_Campaign_Menu.ScrollOffset;
declare OldScrollAnimOffset = Frame_Campaign_Menu.ScrollAnimOffset;

if(Frame_Campaign_Menu.ScrollMax.Y > 0) {
	declare VisibleRatio = 150/(150+Frame_Campaign_Menu.ScrollMax.Y);
	Quad_Scrollbar.Show();
	Quad_Scrollbar.Size.Y = 150*VisibleRatio;
	Quad_Scrollbar.RelativePosition_V3.Y = -TextLib::ToInteger(Frame_Campaign_Menu.DataAttributeGet("startscroll"))*(150-Quad_Scrollbar.Size.Y);
}

declare RevealMapInfoTime = 0;

declare CurrentCampaign = 0;
declare LastCampaign = 0;
declare Integer CurrentChallenge for This;
declare LastChallenge = 0;

declare HoldScrollbar = False;
declare HoldScrollbarPos = 0.;

declare Text[] Challenges for Page;

foreach(Control,Frame_Challenges.Controls) {
	Challenges.add(Control.DataAttributeGet("challenge"));
}

PreloadMapThumbnails();

UpdateMapThumbnails(Challenges[0]);
***

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_CAMPAIGN": {
					HoldItSteady = True;
					HoldItSteadyLoc = Frame_Campaigns.RelativePosition_V3.X;
					HoldItSteadyMouse = MouseX;
				}
				case "QUAD_BUTTON_EXIT": {
					SendCustomEvent("Exit", []);
				}
				case "QUAD_MAP": {
					declare ChallengeMapUid = Event.Control.Parent.DataAttributeGet("uid");
					declare ChallengeFileName = Event.Control.Parent.DataAttributeGet("filename");
					
					declare Challenge = "";
					foreach(Control,Event.Control.Parent.Controls) {
						if(Control.ControlId == "FRAME_CHALLENGE_INFO") {
							if(Control.DataAttributeGet("challenge") == Challenges[CurrentChallenge]) {
								Challenge = Control.DataAttributeGet("challenge");
								ChallengeMapUid = Control.DataAttributeGet("uid");
								ChallengeFileName = Control.DataAttributeGet("filename");
								log(Control.DataAttributeGet("valid"));
							}
						}
					}

					SendCustomEvent("Map", [Event.Control.Parent.DataAttributeGet("name"),
					Event.Control.Parent.DataAttributeGet("author"),
					ChallengeMapUid,
					Challenge,
					ChallengeFileName,
					Event.Control.Parent.DataAttributeGet("env")]);
				}
				case "QUAD_BACK": {
					if(Event.Control.Parent.Parent.ControlId == "FRAME_CAMPAIGN_CONTROL" && CurrentCampaign-1 >= 0) {
						AnimMgr.Add(Frame_Campaigns, "<frame pos=\""^(CurrentCampaign-1)*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					}
					else if(Event.Control.Parent.Parent.ControlId == "FRAME_CHALLENGE_CONTROL" && CurrentChallenge-1 >= 0) {
						AnimMgr.Add(Frame_Challenges, "<frame pos=\""^(CurrentChallenge-1)*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
				case "QUAD_NEXT": {
					if(Event.Control.Parent.Parent.ControlId == "FRAME_CAMPAIGN_CONTROL" && CurrentCampaign+1 < Frame_Campaigns.Controls.count) {
						AnimMgr.Add(Frame_Campaigns, "<frame pos=\""^(CurrentCampaign+1)*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					}
					else if(Event.Control.Parent.Parent.ControlId == "FRAME_CHALLENGE_CONTROL" && CurrentChallenge+1 < Frame_Challenges.Controls.count) {
						AnimMgr.Add(Frame_Challenges, "<frame pos=\""^(CurrentChallenge+1)*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
				case "QUAD_CAMPAIGN_SCROLL": {
					HoldScrollbar = True;
					HoldScrollbarPos = MouseY-Quad_Scrollbar.RelativePosition_V3.Y;
				}
				case "QUAD_CHALLENGE_HOLD": {
					HoldItSteadyChallenge = True;
					HoldItSteadyChallengeLoc = Frame_Challenges.RelativePosition_V3.X;
					HoldItSteadyChallengeMouse = MouseX;
				}
			}
		}
		case CMlScriptEvent::Type::MouseOver: {
			if(Event.ControlId == "QUAD_MAP") {
				declare Quad = (Event.Control as CMlQuad);
				CurrentMapFocused = Quad;
				RevealMapInfoTime = Now;
			}
		}
		case CMlScriptEvent::Type::MouseOut: {
			if(Event.ControlId == "QUAD_MAP") {
				CurrentMapFocused = Null; 
			}
		}
		case CMlScriptEvent::Type::MenuNavigation: {
			switch(Event.MenuNavAction) {
				case CMlScriptEvent::EMenuNavAction::ScrollUp: {
					
				}
				case CMlScriptEvent::EMenuNavAction::ScrollDown: {
					
				}
			}
		}
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "Suggest": {
					Frame_Campaigns.RelativePosition_V3.X = TextLib::ToInteger(Event.CustomEventData[0])*-45.;
					Frame_Challenges.RelativePosition_V3.X = TextLib::ToInteger(Event.CustomEventData[1])*-45.;
				}
				case "Playsessions": {
					declare SPlaysession[] Playsessions;
					declare JsonSuccess = Playsessions.fromjson(Event.CustomEventData[0]);

					declare Frame_Playsessions = (Page.GetFirstChild("FRAME_PLAYSESSIONS") as CMlFrame);

					for(I,0,Frame_Playsessions.Controls.count-1) {
						declare Frame = (Frame_Playsessions.Controls[I] as CMlFrame);
						if(Playsessions.existskey(I)) {
							declare Playsession = Playsessions[I];
							(Frame.GetFirstChild("LABEL_MAP") as CMlLabel).SetText(Playsession.Map.OriginalName);
							(Frame.GetFirstChild("LABEL_COUNT") as CMlLabel).SetText(Playsession.Users.count^"");
							(Frame.GetFirstChild("QUAD_THUMBNAIL") as CMlQuad).ChangeImageUrl("file://Thumbnails/MapUid/"^Playsession.Map.Uid);
							Frame.Show();
						}
						else {
							Frame.Hide();
						}
					}
				}
			}
		}
	}
}

CurrentCampaign = MathLib::NearestInteger(Frame_Campaigns.RelativePosition_V3.X / -45.);
if(CurrentCampaign != LastCampaign) {
	LastCampaign = CurrentCampaign;
}

if(MouseLeftButton && HoldItSteady) {
	AnimMgr.Flush(Frame_Campaigns);
	Frame_Campaigns.RelativePosition_V3.X = MathLib::Clamp(HoldItSteadyLoc - (HoldItSteadyMouse - MouseX)*3,-CampaignsSize,0.);
}
else if(HoldItSteady) {
	AnimMgr.Add(Frame_Campaigns, "<frame pos=\""^CurrentCampaign*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
	HoldItSteady = False;
}

CurrentChallenge = MathLib::NearestInteger(Frame_Challenges.RelativePosition_V3.X / -45.);
if(CurrentChallenge != LastChallenge) {
	LastChallenge = CurrentChallenge;
	UpdateMapThumbnails(Challenges[CurrentChallenge]);
}

if(MouseLeftButton && HoldItSteadyChallenge) {
	AnimMgr.Flush(Frame_Challenges);
	Frame_Challenges.RelativePosition_V3.X = MathLib::Clamp(HoldItSteadyChallengeLoc - (HoldItSteadyChallengeMouse - MouseX)*3,-(Frame_Challenges.Controls.count-1)*45.,0.);
}
else if(HoldItSteadyChallenge) {
	AnimMgr.Add(Frame_Challenges, "<frame pos=\""^MathLib::NearestInteger(Frame_Challenges.RelativePosition_V3.X / -45.)*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
	HoldItSteadyChallenge = False;
}

CampaignPosition = Frame_Campaigns.RelativePosition_V3.X / 45. * 225.;

declare VisibleRatio = 150/(150+Frame_Campaign_Menu.ScrollMax.Y);
Quad_Scrollbar.Size.Y = 150*VisibleRatio;

if(CampaignPosition != LastCampaignPosition) {
	Frame_Campaign_Menu.RelativePosition_V3.X = CampaignPosition;
	LastCampaignPosition = CampaignPosition;
}

if(HoldScrollbar && MouseLeftButton) {
	Quad_Scrollbar.RelativePosition_V3.Y = MathLib::Clamp(MouseY-HoldScrollbarPos,Quad_Scrollbar.Size.Y-150,0.);
	Frame_Campaign_Menu.ScrollOffset.Y = (MouseY-HoldScrollbarPos)/(Quad_Scrollbar.Size.Y-150)*Frame_Campaign_Menu.ScrollMax.Y;
}
else {
	if(Frame_Campaign_Menu.ScrollOffset != OldScrollOffset) {
		OldScrollOffset = Frame_Campaign_Menu.ScrollOffset;

		declare ScrollRatio = 0.;
		if(Frame_Campaign_Menu.ScrollMax.Y != 0)
			ScrollRatio = Frame_Campaign_Menu.ScrollOffset.Y / Frame_Campaign_Menu.ScrollMax.Y;
		Quad_Scrollbar.RelativePosition_V3.Y = -ScrollRatio*(150-Quad_Scrollbar.Size.Y);
	}

	HoldScrollbar = False;
}

if(Frame_Campaign_Menu.ScrollAnimOffset != OldScrollAnimOffset) {
	Frame_QuickMapInfo.RelativePosition_V3 += Frame_Campaign_Menu.ScrollAnimOffset - OldScrollAnimOffset;
	OldScrollAnimOffset = Frame_Campaign_Menu.ScrollAnimOffset;
}

UpdateQuickMapInfo(CurrentMapFocused);

declare ClipSize = AnimLib::EaseOutQuad(Now - RevealMapInfoTime, 0., 145., 500);
Frame_QuickMapInfo.ClipWindowSize = <ClipSize,ClipSize>;
//Frame_QuickMapInfo.ClipWindowRelativePosition.X = AnimLib::EaseOutQuad(Now - RevealMapInfoTime, -100., 122.5, 300);
***