#Struct SPublicMap {
	Text Name;
	Text Uid;
	Text Author;
	Text OriginalName;
	Text OriginalUid;
	Text OriginalAuthor;
}

#Struct SUser {
	Text Login;
	Text Nickname;
}

#Struct SPlaysession {
	SPublicMap Map;
	SUser[] Users;
}

#Struct STitleMapRecordZone {
	Integer Count;
	Integer Best;
	Integer Rank;
	Integer RankSP;
	Integer SP;
	Integer AP;
	Real WRPB;
}

#Struct STitleMapRecord {
	Real Difficulty;
	Real Quality;
	Integer DifficultyCount;
	Integer QualityCount;
	Integer PB;
	STitleMapRecordZone[Text] Zones;
	Text[] Star;
}

#Struct STitleMap {
	Text Name;
	STitleMapRecord[Text] Cars;
}

#Struct STitleProgress {
	Text BanReason;
	Integer Records;
	Integer SP;
	Integer AP;
	Real WRPB;
	Real Time; // in seconds
	STitleMap[Text][Text] Maps;
}

declare CMlQuad CurrentMapFocused;
declare Ident PreviousMapFocusedId;

Text[] SplitZones(Text _Zone) {
	declare Zones = TextLib::Split("|", _Zone);
	declare Text[] Result;
	declare Text[] Additive;
	foreach(Zone,Zones) {
		Additive.add(Zone);
		Result.add(TextLib::Join("|", Additive));
	}
	return Result;
}

Void UpdateMapThumbnails(Text _Challenge) {
	declare Frame_Campaign_Menu = (Page.GetFirstChild("FRAME_CAMPAIGN_MENU") as CMlFrame);
	foreach(Control, Frame_Campaign_Menu.Controls) {
		if(Control.ControlId == "FRAME_CAMPAIGN") {
			declare Frame_Campaign = (Control as CMlFrame);
			foreach(Control2, Frame_Campaign.Controls) {
				declare Frame_Group = (Control2 as CMlFrame);
				foreach(Control3, Frame_Group.Controls) {
					if(Control3.ControlId == "FRAME_MAP") {
						declare Frame_Map = (Control3 as CMlFrame);
						foreach(Control4,Frame_Map.Controls) {
							if(Control4.ControlId == "FRAME_CHALLENGE_INFO") {
								if(Control4.DataAttributeGet("challenge") == _Challenge) {
									declare Quad_Map = (Frame_Map.GetFirstChild("QUAD_MAP") as CMlQuad);
									declare Quad_Map_Anim = (Frame_Map.GetFirstChild("QUAD_MAP_ANIM") as CMlQuad);
									Quad_Map_Anim.Opacity = 1.;
									Quad_Map_Anim.ImageUrl = Quad_Map.ImageUrl;
									AnimMgr.Flush(Quad_Map_Anim);
									AnimMgr.Add(Quad_Map_Anim, "<quad opacity=\"0\" hidden=\"0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);

									AnimMgr.Add(Frame_Map.GetFirstChild("LABEL_RANK"), "<label opacity=\"0\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
									AnimMgr.Add(Frame_Map.GetFirstChild("LABEL_SP"), "<label opacity=\"0\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
									
									if(Control4.DataAttributeGet("valid") == "True") {
										Quad_Map.ImageUrl = "file://Thumbnails/MapUid/"^Control4.DataAttributeGet("uid");
										AnimMgr.Add((Frame_Map.GetFirstChild("QUAD_MAP_BLOCK") as CMlQuad), "<quad opacity=\"0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
										(Frame_Map.GetFirstChild("LABEL_NAME") as CMlLabel).Opacity = 1.;
										foreach(Control in (Frame_Map.GetFirstChild("FRAME_LOADING") as CMlFrame).Controls)
											AnimMgr.Add(Control, "<quad opacity=\"1\" hidden=\"0\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
									}
									else {
										declare Quad_Map = (Frame_Map.GetFirstChild("QUAD_MAP") as CMlQuad);
										(Frame_Map.GetFirstChild("QUAD_MAP") as CMlQuad).ChangeImageUrl("file://Thumbnails/MapUid/"^Frame_Map.DataAttributeGet("uid"));
										AnimMgr.Add((Frame_Map.GetFirstChild("QUAD_MAP_BLOCK") as CMlQuad), "<quad opacity=\"1\" hidden=\"0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
										(Frame_Map.GetFirstChild("LABEL_NAME") as CMlLabel).Opacity = .5;
										foreach(Control in (Frame_Map.GetFirstChild("FRAME_LOADING") as CMlFrame).Controls)
											AnimMgr.Add(Control, "<quad opacity=\"0\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare Integer UpdateScores;

Void UpdateQuickMapInfo(CMlQuad _QuadMap, Boolean _Reload) {
	declare Frame_QuickMapInfo = (Page.GetFirstChild("FRAME_QUICKMAPINFO") as CMlFrame);
	declare STitleProgress TitleProgress for Page;

	declare Text[] Challenges for Page;
	declare Integer CurrentChallenge for This;

	if(_QuadMap == Null) {
		Frame_QuickMapInfo.Hide();
	}
	else {
		Frame_QuickMapInfo.RelativePosition_V3 = _QuadMap.AbsolutePosition_V3;
		if(!Frame_QuickMapInfo.Visible || _Reload) {
			declare Name = _QuadMap.Parent.DataAttributeGet("name");
			declare Author = _QuadMap.Parent.DataAttributeGet("author");
			declare Car = _QuadMap.Parent.DataAttributeGet("defaultcar");
			(Frame_QuickMapInfo.GetFirstChild("QUAD_THUMBNAIL") as CMlQuad).ChangeImageUrl(_QuadMap.ImageUrl);

			declare Label_Name = (Frame_QuickMapInfo.GetFirstChild("LABEL_NAME") as CMlLabel);
			Label_Name.SetText(Name);
			if(Label_Name.ComputeWidth(Label_Name.Value) <= Label_Name.Size.X)
				Label_Name.TextSizeReal = 8.;
			while(Label_Name.ComputeWidth(Label_Name.Value) > Label_Name.Size.X)
				Label_Name.TextSizeReal -= .25;

			declare Label_Challenge = (Frame_QuickMapInfo.GetFirstChild("LABEL_CHALLENGE") as CMlLabel);
			Label_Challenge.RelativePosition_V3.Y = 20-Label_Name.ComputeHeight(Label_Name.Value);
			Label_Challenge.SetText(TextLib::ToUpperCase(TextLib::Replace(Challenges[CurrentChallenge], "+", " + ")));

			declare MapExists = False;

			foreach(Campaign => Maps, TitleProgress.Maps) {
				foreach(Control,_QuadMap.Parent.Controls) {
					if(Control.ControlId == "FRAME_CHALLENGE_INFO" && Control.DataAttributeGet("challenge") == Challenges[CurrentChallenge]) {
						declare MapUid = Control.DataAttributeGet("uid");
						if(Maps.existskey(MapUid)) {
							if(Maps[MapUid].Cars.existskey(Car)) {
								(Frame_QuickMapInfo.GetFirstChild("LABEL_SP") as CMlLabel).SetText(Maps[MapUid].Cars[Car].Zones["World"].SP^"");

								declare Rank = Maps[MapUid].Cars[Car].Zones["World"].Rank;
								declare Count = Maps[MapUid].Cars[Car].Zones["World"].Count;
								if(Rank > 0)
									(Frame_QuickMapInfo.GetFirstChild("LABEL_RANK") as CMlLabel).SetText(Rank^"/"^Count);
								else
									(Frame_QuickMapInfo.GetFirstChild("LABEL_RANK") as CMlLabel).SetText("?/"^Count);
								
								foreach(Zon => RankCount in Maps[MapUid].Cars[Car].Zones) {
									Frame_QuickMapInfo.GetFirstChild("LABEL_RANK").DataAttributeSet("rank-"^Zon, RankCount.Rank^"");
									Frame_QuickMapInfo.GetFirstChild("LABEL_RANK").DataAttributeSet("count-"^Zon, RankCount.Count^"");
								}
							}
							else
								(Frame_QuickMapInfo.GetFirstChild("LABEL_RANK") as CMlLabel).SetText("?/0");

							foreach(Control in (Frame_QuickMapInfo.GetFirstChild("FRAME_CARS") as CMlFrame).Controls) {
								declare Frame = (Control as CMlFrame);
								declare SectionCar = Frame.DataAttributeGet("car");
								declare Label = (Frame.GetFirstChild("LABEL_CAR") as CMlLabel);
								declare Gauge_Difficulty = (Frame.GetFirstChild("GAUGE_CAR_DIFFICULTY") as CMlGauge);
								declare Gauge_Quality = (Frame.GetFirstChild("GAUGE_CAR_QUALITY") as CMlGauge);
								declare Label_Difficulty_Count = (Frame.GetFirstChild("LABEL_DIFFICULTY_COUNT") as CMlLabel);
								declare Label_Quality_Count = (Frame.GetFirstChild("LABEL_QUALITY_COUNT") as CMlLabel);
								declare Quad_Star = (Frame.GetFirstChild("QUAD_STAR") as CMlQuad);

								if(Car == SectionCar) {
									Label.TextColor = <0.,1.,1.>;
									Gauge_Difficulty.Color = <0.,1.,1.>;
									Gauge_Quality.Color = <0.,1.,1.>;
									Label_Difficulty_Count.TextColor = <.0,.46,.46>;
									Label_Quality_Count.TextColor = <.0,.46,.46>;
								}
								else {
									Label.TextColor = <1.,1.,1.>;
									Gauge_Difficulty.Color = <1.,1.,1.>;
									Gauge_Quality.Color = <1.,1.,1.>;
									Label_Difficulty_Count.TextColor = <.46,.46,.46>;
									Label_Quality_Count.TextColor = <.46,.46,.46>;
								}

								if(Maps[MapUid].Cars.existskey(SectionCar)) {
									declare Difficulty = Maps[MapUid].Cars[SectionCar].Difficulty;
									declare Quality = Maps[MapUid].Cars[SectionCar].Quality;
									declare DifficultyCount = Maps[MapUid].Cars[SectionCar].DifficultyCount;
									declare QualityCount = Maps[MapUid].Cars[SectionCar].QualityCount;

									if(Difficulty == -1.)
										Gauge_Difficulty.Ratio = 0.;
									else
										Gauge_Difficulty.Ratio = Difficulty;
									
									if(Quality == -1.)
										Gauge_Quality.Ratio = 0.;
									else
										Gauge_Quality.Ratio = Quality;
									
									if(DifficultyCount == 0)
										Label_Difficulty_Count.Value = "";
									else
										Label_Difficulty_Count.Value = DifficultyCount^"";
									if(QualityCount == 0)
										Label_Quality_Count.Value = "";
									else
										Label_Quality_Count.Value = QualityCount^"";
									
									declare Star = Maps[MapUid].Cars[SectionCar].Star;

									if(Star.count == 0) {
										Quad_Star.Hide();
									}
									else {
										Quad_Star.Show();
										Label.TextColor = <1.,1.,0.>;
										Gauge_Difficulty.Color = <1.,1.,0.>;
										Gauge_Quality.Color = <1.,1.,0.>;
										Label_Difficulty_Count.TextColor = <1.,1.,0.>;
										Label_Quality_Count.TextColor = <1.,1.,0.>;
									}
								}
								else {
									Gauge_Difficulty.Ratio = 0.;
									Gauge_Quality.Ratio = 0.;
									Gauge_Difficulty.Color = <1.,0.,0.>;
									Gauge_Quality.Color = <1.,0.,0.>;
									
									Label.TextColor = <1.,0.,0.>;
									Label_Difficulty_Count.Value = "";
									Label_Quality_Count.Value = "";
								}
							}

							MapExists = True;
							break;
						}
					}
				}
			}

			if(!MapExists) {
				(Frame_QuickMapInfo.GetFirstChild("LABEL_SP") as CMlLabel).SetText("0");
				(Frame_QuickMapInfo.GetFirstChild("LABEL_RANK") as CMlLabel).SetText("?/0");
				foreach(Control in (Frame_QuickMapInfo.GetFirstChild("FRAME_CARS") as CMlFrame).Controls) {
					((Control as CMlFrame).GetFirstChild("GAUGE_CAR_DIFFICULTY") as CMlGauge).Ratio = 0.;
					((Control as CMlFrame).GetFirstChild("GAUGE_CAR_QUALITY") as CMlGauge).Ratio = 0.;
					((Control as CMlFrame).GetFirstChild("GAUGE_CAR_DIFFICULTY") as CMlGauge).Color = <1.,0.,0.>;
					((Control as CMlFrame).GetFirstChild("GAUGE_CAR_QUALITY") as CMlGauge).Color = <1.,0.,0.>;

					((Control as CMlFrame).GetFirstChild("LABEL_DIFFICULTY_COUNT") as CMlLabel).Value = "";
					((Control as CMlFrame).GetFirstChild("LABEL_QUALITY_COUNT") as CMlLabel).Value = "";
					((Control as CMlFrame).GetFirstChild("LABEL_CAR") as CMlLabel).TextColor = <1.,0.,0.>;

					if(Car == Control.DataAttributeGet("car")) {
						
					}
					else {
						
					}

					(Control as CMlFrame).GetFirstChild("QUAD_STAR").Hide();
				}
			}

			Frame_QuickMapInfo.Show();
		}
	}
}

Void UpdateQuickMapInfo(CMlQuad _QuadMap) {
	UpdateQuickMapInfo(_QuadMap, False);
}

declare Boolean PreloadThumbnails;
declare Boolean ThumbnailsPreloaded;

Void ShowCampaignMenu() {
	declare Frame_Main_Campaign = (Page.GetFirstChild("FRAME_MAIN_CAMPAIGN") as CMlFrame);
	declare Frame_Main_Panel = (Page.GetFirstChild("FRAME_MAIN_PANEL") as CMlFrame);
	Frame_Main_Campaign.RelativePosition_V3 = <85., 80.>;
	Frame_Main_Panel.RelativePosition_V3 = <52.5, 80.>;
	AnimMgr.Add(Frame_Main_Campaign, "<frame pos=\"-150 80\" hidden=\"0\"/>", 1000, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.Add(Frame_Main_Panel, "<frame pos=\"117.5 80\" hidden=\"0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
}

Void PreloadTheThumbnails() {
	declare Frame_Main_Campaign = (Page.GetFirstChild("FRAME_MAIN_CAMPAIGN") as CMlFrame);
	declare Frame_Main_Panel = (Page.GetFirstChild("FRAME_MAIN_PANEL") as CMlFrame);
	AnimMgr.Flush(Frame_Main_Campaign);
	AnimMgr.Flush(Frame_Main_Panel);
	Frame_Main_Campaign.RelativePosition_V3 = <85., 80.>;
	Frame_Main_Panel.RelativePosition_V3 = <52.5, 80.>;

	declare Frame_Loading_Thumbnails = (Page.GetFirstChild("FRAME_LOADING_THUMBNAILS") as CMlFrame);
	Frame_Loading_Thumbnails.RelativeScale = 0.;
	AnimMgr.Add(Frame_Loading_Thumbnails, "<frame scale=\"1\" hidden=\"0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
	
	declare Frame_Campaign_Menu = (Page.GetFirstChild("FRAME_CAMPAIGN_MENU") as CMlFrame);

	(Page.GetFirstChild("GAUGE_LOADING_THUMBNAILS") as CMlGauge).Ratio = 0.;
	sleep(400);

	declare TotalMaps = 0;
	foreach(Control, Frame_Campaign_Menu.Controls) {
		if(Control.ControlId == "FRAME_CAMPAIGN") {
			declare Frame_Campaign = (Control as CMlFrame);
			foreach(Control2, Frame_Campaign.Controls) {
				declare Frame_Group = (Control2 as CMlFrame);
				foreach(Control3, Frame_Group.Controls) {
					if(Control3.ControlId == "FRAME_MAP") {
						declare Frame_Map = (Control3 as CMlFrame);
						foreach(Control,Frame_Map.Controls) {
							if(Control.ControlId == "FRAME_CHALLENGE_INFO") {
								TotalMaps += 1;
							}
						}
					}
				}
			}
		}
	}

	declare CurrentMap = 0;
	foreach(Control, Frame_Campaign_Menu.Controls) {
		if(Control.ControlId == "FRAME_CAMPAIGN") {
			declare Frame_Campaign = (Control as CMlFrame);
			foreach(Control2, Frame_Campaign.Controls) {
				declare Frame_Group = (Control2 as CMlFrame);
				foreach(Control3, Frame_Group.Controls) {
					if(Control3.ControlId == "FRAME_MAP") {
						declare Frame_Map = (Control3 as CMlFrame);
						foreach(Control,Frame_Map.Controls) {
							if(Control.ControlId == "FRAME_CHALLENGE_INFO") {
								if(Control.DataAttributeGet("valid") == "True") {
									PreloadImage("file://Thumbnails/MapUid/"^Control.DataAttributeGet("uid"));
								}
								else {
									PreloadImage("file://Thumbnails/MapUid/"^Frame_Map.DataAttributeGet("uid"));
								}
								CurrentMap += 1;
							}
						}
					}
				}
				if(TotalMaps > 0)
					(Page.GetFirstChild("GAUGE_LOADING_THUMBNAILS") as CMlGauge).Ratio = MathLib::ToReal(CurrentMap)/TotalMaps;
				yield;
			}
		}
	}

	AnimMgr.Add(Frame_Loading_Thumbnails, "<frame scale=\"0\" hidden=\"1\"/>", 500, CAnimManager::EAnimManagerEasing::QuadIn);

	ThumbnailsPreloaded = True;
	ShowCampaignMenu();
}

***Start***
***
declare Frame_Campaigns = (Page.GetFirstChild("FRAME_CAMPAIGNS") as CMlFrame);
declare Frame_Campaign_Menu = (Page.GetFirstChild("FRAME_CAMPAIGN_MENU") as CMlFrame);
declare Frame_QuickMapInfo = (Page.GetFirstChild("FRAME_QUICKMAPINFO") as CMlFrame);
declare Quad_Scrollbar = (Page.GetFirstChild("QUAD_CAMPAIGN_SCROLL") as CMlQuad);
declare Frame_Challenges = (Page.GetFirstChild("FRAME_CHALLENGES") as CMlFrame);
declare Label_Skillpoints = (Page.GetFirstChild("LABEL_SKILLPOINTS") as CMlLabel);
declare Label_ActivityPoints = (Page.GetFirstChild("LABEL_ACTIVITYPOINTS") as CMlLabel);

declare Frame_Loading_Thumbnails = (Page.GetFirstChild("FRAME_LOADING_THUMBNAILS") as CMlFrame);
declare Frame_Main_Campaign = (Page.GetFirstChild("FRAME_MAIN_CAMPAIGN") as CMlFrame);
declare Frame_Main_Panel = (Page.GetFirstChild("FRAME_MAIN_PANEL") as CMlFrame);

(Page.GetFirstChild("LABEL_VERSION") as CMlLabel).Value = TextLib::Split(" ", LoadedTitle.TitleVersion)[0];

declare HoldItSteady = False;
declare HoldItSteadyLoc = 0.;
declare HoldItSteadyMouse = 0.;

declare HoldItSteadyChallenge = False;
declare HoldItSteadyChallengeLoc = 0.;
declare HoldItSteadyChallengeMouse = 0.;

declare End = -1;

declare CampaignPosition = Frame_Campaigns.RelativePosition_V3.X / 45. * 225.;
declare LastCampaignPosition = Frame_Campaigns.RelativePosition_V3.X / 45. * 225.;

declare CampaignsSize = (Frame_Campaigns.Controls.count-1) * 45.;

Frame_Campaign_Menu.ScrollActive = True;
Frame_Campaign_Menu.ScrollGrid = <15.,15.>;
if(Frame_Campaign_Menu.GetFirstChild("QUAD_CAMPAIGN_MENU").Size.Y >= 150)
	Frame_Campaign_Menu.ScrollMax = <0.,Frame_Campaign_Menu.GetFirstChild("QUAD_CAMPAIGN_MENU").Size.Y-150>;
else Frame_Campaign_Menu.ScrollMax.Y = 0.;
Frame_Campaign_Menu.ScrollMin = <0.,0.>;

declare OldScrollOffset = Frame_Campaign_Menu.ScrollOffset;
declare OldScrollAnimOffset = Frame_Campaign_Menu.ScrollAnimOffset;

if(Frame_Campaign_Menu.ScrollMax.Y > 0) {
	declare VisibleRatio = 150/(150+Frame_Campaign_Menu.ScrollMax.Y);
	Quad_Scrollbar.Show();
	Quad_Scrollbar.Size.Y = 150*VisibleRatio;
	Quad_Scrollbar.RelativePosition_V3.Y = -TextLib::ToInteger(Frame_Campaign_Menu.DataAttributeGet("startscroll"))*(150-Quad_Scrollbar.Size.Y);
}

declare RevealMapInfoTime = -1;
declare ZoneSwitchTime = -1;

declare CurrentCampaign = 0;
declare LastCampaign = 0;
declare Integer CurrentChallenge for This = -1;
declare LastChallenge = CurrentChallenge;

declare HoldScrollbar = False;
declare HoldScrollbarPos = 0.;

declare Text[] Challenges for Page;

foreach(Control in Frame_Challenges.Controls) {
	Challenges.add(Control.DataAttributeGet("challenge"));

	declare Frame = (Control as CMlFrame);
	declare Label_Challenge = (Frame.GetFirstChild("LABEL_CHALLENGE") as CMlLabel);
	while(Label_Challenge.ComputeWidth(Label_Challenge.Value) > 40)
		Label_Challenge.TextSizeReal -= .25;
}

declare CMlFrame[] MapBoxes;
foreach(Control, Frame_Campaign_Menu.Controls) {
	if(Control.ControlId == "FRAME_CAMPAIGN") {
		declare Frame_Campaign = (Control as CMlFrame);
		foreach(Control2, Frame_Campaign.Controls) {
			declare Frame_Group = (Control2 as CMlFrame);
			foreach(Control3, Frame_Group.Controls) {
				if(Control3.ControlId == "FRAME_MAP") {
					declare Frame_Map = (Control3 as CMlFrame);
					declare Label_Name = (Frame_Map.GetFirstChild("LABEL_NAME") as CMlLabel);
					while(Label_Name.ComputeWidth(Label_Name.Value) > Label_Name.Size.X)
						Label_Name.TextSizeReal -= .25;
					MapBoxes.add(Frame_Map);
				}
			}
		}
	}
}

Page.GetClassChildren("LOADING", Page.MainFrame, True);

declare SplittedZones = SplitZones(LocalUser.ZonePath);
declare ZoneSwitched = False;
declare ZoneCounter = 0;

UpdateScores = -1;
declare UpdateScoreProgress = 0;

declare Zones = TextLib::Split("|", LocalUser.ZonePath);

declare STitleProgress TitleProgress for Page;
declare STitleMap[Text] TitleProgressCampaign;
declare Text TitleProgressCampaignName;
***

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_CAMPAIGN": {
					HoldItSteady = True;
					HoldItSteadyLoc = Frame_Campaigns.RelativePosition_V3.X;
					HoldItSteadyMouse = MouseX;
				}
				case "QUAD_BUTTON_EXIT": {
					SendCustomEvent("Exit", []);
				}
				case "QUAD_MAP": {
					declare ChallengeMapUid = Event.Control.Parent.DataAttributeGet("uid");
					declare ChallengeFileName = Event.Control.Parent.DataAttributeGet("filename");
					
					declare Challenge = "";
					foreach(Control,Event.Control.Parent.Controls) {
						if(Control.ControlId == "FRAME_CHALLENGE_INFO") {
							if(Control.DataAttributeGet("challenge") == Challenges[CurrentChallenge]) {
								Challenge = Control.DataAttributeGet("challenge");
								ChallengeMapUid = Control.DataAttributeGet("uid");
								ChallengeFileName = Control.DataAttributeGet("filename");
								log(Control.DataAttributeGet("valid"));
							}
						}
					}

					SendCustomEvent("Map", [Event.Control.Parent.DataAttributeGet("name"),
					Event.Control.Parent.DataAttributeGet("author"),
					ChallengeMapUid,
					Challenge,
					ChallengeFileName,
					Event.Control.Parent.DataAttributeGet("env")]);
				}
				case "QUAD_BACK": {
					if(Event.Control.Parent.Parent.ControlId == "FRAME_CAMPAIGN_CONTROL" && CurrentCampaign-1 >= 0) {
						AnimMgr.Add(Frame_Campaigns, "<frame pos=\""^(CurrentCampaign-1)*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					}
					else if(Event.Control.Parent.Parent.ControlId == "FRAME_CHALLENGE_CONTROL" && CurrentChallenge-1 >= 0) {
						AnimMgr.Add(Frame_Challenges, "<frame pos=\""^(CurrentChallenge-1)*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
				case "QUAD_NEXT": {
					if(Event.Control.Parent.Parent.ControlId == "FRAME_CAMPAIGN_CONTROL" && CurrentCampaign+1 < Frame_Campaigns.Controls.count) {
						AnimMgr.Add(Frame_Campaigns, "<frame pos=\""^(CurrentCampaign+1)*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					}
					else if(Event.Control.Parent.Parent.ControlId == "FRAME_CHALLENGE_CONTROL" && CurrentChallenge+1 < Frame_Challenges.Controls.count) {
						AnimMgr.Add(Frame_Challenges, "<frame pos=\""^(CurrentChallenge+1)*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
				case "QUAD_CAMPAIGN_SCROLL": {
					HoldScrollbar = True;
					HoldScrollbarPos = MouseY-Quad_Scrollbar.RelativePosition_V3.Y;
				}
				case "QUAD_CHALLENGE_HOLD": {
					HoldItSteadyChallenge = True;
					HoldItSteadyChallengeLoc = Frame_Challenges.RelativePosition_V3.X;
					HoldItSteadyChallengeMouse = MouseX;
				}
				case "QUAD_PLAYSESSION_MAP": {
					SendCustomEvent("PlayMap", [Event.Control.DataAttributeGet("uid")]);
				}
			}
		}
		case CMlScriptEvent::Type::MouseOver: {
			if(Event.ControlId == "QUAD_MAP") {
				declare Quad = (Event.Control as CMlQuad);
				CurrentMapFocused = Quad;
				RevealMapInfoTime = Now;
				ZoneSwitchTime = Now;
				
				ZoneCounter = 0;
				ZoneSwitched = False;
				(Frame_QuickMapInfo.GetFirstChild("QUAD_FLAG") as CMlQuad).ChangeImageUrl("file://ZoneFlags/Path/"^SplittedZones[ZoneCounter]);

				declare Zone = TextLib::Split("|",LocalUser.ZonePath)[ZoneCounter];
				declare DisplayedZone = TextLib::ToUpperCase(Zone);
				if(TextLib::Length(DisplayedZone) > 10) DisplayedZone ^= " ";
				(Frame_QuickMapInfo.GetFirstChild("QUAD_FLAG") as CMlQuad).ChangeImageUrl("file://ZoneFlags/Path/"^SplittedZones[ZoneCounter]);
				(Frame_QuickMapInfo.GetFirstChild("LABEL_ZONE") as CMlLabel).SetText("|Zone|"^DisplayedZone);
				Frame_QuickMapInfo.Hide();
			}
		}
		case CMlScriptEvent::Type::MouseOut: {
			if(Event.ControlId == "QUAD_MAP") {
				CurrentMapFocused = Null;
			}
		}
		case CMlScriptEvent::Type::MenuNavigation: {
			switch(Event.MenuNavAction) {
				case CMlScriptEvent::EMenuNavAction::ScrollUp: {
					
				}
				case CMlScriptEvent::EMenuNavAction::ScrollDown: {
					
				}
			}
		}
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "Show": {
					End = -1;

					if(ThumbnailsPreloaded) {
						ShowCampaignMenu();
					}
					else {
						PreloadThumbnails = True;
					}
				}
				case "Hide": {
					End = Now;
					
					AnimMgr.Flush(Frame_Main_Campaign);
					AnimMgr.Flush(Frame_Main_Panel);
					AnimMgr.Add(Frame_Main_Campaign, "<frame pos=\"85 80\" hidden=\"1\"/>", 1000, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(Frame_Main_Panel, "<frame pos=\"52.5 80\" hidden=\"1\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				case "Suggest": {
					Frame_Campaigns.RelativePosition_V3.X = TextLib::ToInteger(Event.CustomEventData[0])*-45.;
					Frame_Challenges.RelativePosition_V3.X = TextLib::ToInteger(Event.CustomEventData[1])*-45.;
				}
				case "Playsessions": {
					declare SPlaysession[] Playsessions;
					declare JsonSuccess = Playsessions.fromjson(Event.CustomEventData[0]);

					declare Frame_Playsessions = (Page.GetFirstChild("FRAME_PLAYSESSIONS") as CMlFrame);

					for(I,0,Frame_Playsessions.Controls.count-1) {
						declare Frame = (Frame_Playsessions.Controls[I] as CMlFrame);
						if(Playsessions.existskey(I)) {
							declare Playsession = Playsessions[I];
							Frame.GetFirstChild("QUAD_PLAYSESSION_MAP").DataAttributeSet("uid", Playsession.Map.Uid);
							(Frame.GetFirstChild("LABEL_MAP") as CMlLabel).SetText(Playsession.Map.OriginalName);
							(Frame.GetFirstChild("LABEL_COUNT") as CMlLabel).SetText(Playsession.Users.count^"");
							(Frame.GetFirstChild("QUAD_THUMBNAIL") as CMlQuad).ChangeImageUrl("file://Thumbnails/MapUid/"^Playsession.Map.Uid);
							Frame.Show();
						}
						else {
							Frame.Hide();
						}
					}
				}
				case "Scores": {
					declare PreviousSkillpoints = TextLib::ToInteger(Label_Skillpoints.Value);
					declare PreviousActivityPoints = TextLib::ToInteger(Label_ActivityPoints.Value);
					Label_Skillpoints.SetText(TitleProgress.SP^""); // Animate this
					Label_ActivityPoints.SetText(TitleProgress.AP^""); // Animate this

					UpdateScoreProgress = 0;
					UpdateScores = Now;
					//UpdateMapThumbnails(Challenges[CurrentChallenge]);
				}
			}
		}
	}
}

CurrentCampaign = MathLib::NearestInteger(Frame_Campaigns.RelativePosition_V3.X / -45.);
if(CurrentCampaign != LastCampaign) {
	LastCampaign = CurrentCampaign;
}

if(MouseLeftButton && HoldItSteady) {
	AnimMgr.Flush(Frame_Campaigns);
	Frame_Campaigns.RelativePosition_V3.X = MathLib::Clamp(HoldItSteadyLoc - (HoldItSteadyMouse - MouseX)*3,-CampaignsSize,0.);
}
else if(HoldItSteady) {
	AnimMgr.Add(Frame_Campaigns, "<frame pos=\""^CurrentCampaign*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
	HoldItSteady = False;
}

CurrentChallenge = MathLib::NearestInteger(Frame_Challenges.RelativePosition_V3.X / -45.);
if(CurrentChallenge != LastChallenge) {
	LastChallenge = CurrentChallenge;

	if (Challenges.count > 0)
		UpdateMapThumbnails(Challenges[CurrentChallenge]);

	if(TitleProgress.Maps.count > 0) {
		UpdateScoreProgress = 0;
		UpdateScores = Now;
	}
}

if(UpdateScores != -1 && Now - UpdateScores > 500) {
	if(UpdateScoreProgress < MapBoxes.count) {		
		declare Frame_Map = MapBoxes[UpdateScoreProgress];

		declare Label_SP = (Frame_Map.GetFirstChild("LABEL_SP") as CMlLabel);
		declare Label_Rank = (Frame_Map.GetFirstChild("LABEL_RANK") as CMlLabel);
		declare Frame_Loading = (Frame_Map.GetFirstChild("FRAME_LOADING") as CMlFrame);
		foreach(Control in Frame_Loading.Controls)
			AnimMgr.Add(Control, "<quad opacity=\"0\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);

		declare Text[] ZoneCounter;
		foreach(Zon in Zones) {
			ZoneCounter.add(Zon);
			Label_Rank.DataAttributeSet("rank-"^TextLib::Join("|", ZoneCounter), "");
			Label_Rank.DataAttributeSet("count-"^TextLib::Join("|", ZoneCounter), "");
		}

		declare CampaignName = Frame_Map.Parent.Parent.DataAttributeGet("campaignname");
		if(CampaignName != TitleProgressCampaignName) {
			if(TitleProgress.Maps.existskey(CampaignName))
				TitleProgressCampaign = TitleProgress.Maps[CampaignName];
			TitleProgressCampaignName = CampaignName;
		}

		if(CurrentMapFocused != Null && Frame_Map.GetFirstChild("QUAD_MAP").Id == CurrentMapFocused.Id)
			UpdateQuickMapInfo(CurrentMapFocused, True);

		foreach(Control in Frame_Map.Controls) {
			if(Control.ControlId == "FRAME_CHALLENGE_INFO") {
				if(Challenges[CurrentChallenge] == Control.DataAttributeGet("challenge")) {
					declare MapUid = Control.DataAttributeGet("uid");
					declare Car = Control.Parent.DataAttributeGet("defaultcar");
					if(TitleProgressCampaign.existskey(MapUid)) {
						declare Map = TitleProgressCampaign[MapUid];
						if(Map.Cars.existskey(Car)) {
							declare Records = Map.Cars[Car];
							foreach(Zon => RankCount in Records.Zones) {
								if(Zon == "World") {
									declare Rank = Records.Zones[Zon].Rank;
									declare Count = Records.Zones[Zon].Count;
									if(Rank > 0) {
										declare PreviousRank = Label_Rank.DataAttributeGet("rank-"^Zon);
										declare PreviousCount = Label_Rank.DataAttributeGet("count-"^Zon);
										Label_Rank.Value = Rank^"/"^Count; // Animate this after requesting ends
										Label_Rank.DataAttributeSet("rank-"^Zon, Rank^"");
										Label_Rank.DataAttributeSet("count-"^Zon, Count^"");

										declare PreviousSP = Label_SP.DataAttributeGet("skillpoints");
										Label_SP.SetText(Map.Cars[Car].Zones["World"].SP^""); // Animate this after requesting ends
										Label_SP.DataAttributeSet("skillpoints", Map.Cars[Car].Zones["World"].SP^"");

										AnimMgr.Add(Label_Rank, "<quad opacity=\"1\" hidden=\"0\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
										AnimMgr.Add(Label_SP, "<quad opacity=\"1\" hidden=\"0\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
									}
									else {
										AnimMgr.Add(Label_Rank, "<quad opacity=\"0\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
										AnimMgr.Add(Label_SP, "<quad opacity=\"0\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
									}
								}
								else {
									Label_Rank.DataAttributeSet("rank-"^Zon, RankCount.Rank^"");
									Label_Rank.DataAttributeSet("count-"^Zon, RankCount.Count^"");
								}
							}
						}
						else {
							AnimMgr.Add(Label_Rank, "<quad opacity=\"0\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
							AnimMgr.Add(Label_SP, "<quad opacity=\"0\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
						}
					}
					else {
						AnimMgr.Add(Label_Rank, "<quad opacity=\"0\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
						AnimMgr.Add(Label_SP, "<quad opacity=\"0\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
			}
		}

		UpdateScoreProgress += 1;
	}
	else {
		Frame_QuickMapInfo.GetFirstChild("FRAME_LOADING").Hide();
		UpdateScoreProgress = 0;
		UpdateScores = -1;
	}
}

if(MouseLeftButton && HoldItSteadyChallenge) {
	AnimMgr.Flush(Frame_Challenges);
	Frame_Challenges.RelativePosition_V3.X = MathLib::Clamp(HoldItSteadyChallengeLoc - (HoldItSteadyChallengeMouse - MouseX)*3,-(Frame_Challenges.Controls.count-1)*45.,0.);
}
else if(HoldItSteadyChallenge) {
	AnimMgr.Add(Frame_Challenges, "<frame pos=\""^MathLib::NearestInteger(Frame_Challenges.RelativePosition_V3.X / -45.)*-45.^" 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
	HoldItSteadyChallenge = False;
}

CampaignPosition = Frame_Campaigns.RelativePosition_V3.X / 45. * 225.;

declare VisibleRatio = 150/(150+Frame_Campaign_Menu.ScrollMax.Y);
Quad_Scrollbar.Size.Y = 150*VisibleRatio;

if(CampaignPosition != LastCampaignPosition) {
	Frame_Campaign_Menu.RelativePosition_V3.X = CampaignPosition;
	LastCampaignPosition = CampaignPosition;
}

if(HoldScrollbar && MouseLeftButton) {
	Quad_Scrollbar.RelativePosition_V3.Y = MathLib::Clamp(MouseY-HoldScrollbarPos,Quad_Scrollbar.Size.Y-150,0.);
	Frame_Campaign_Menu.ScrollOffset.Y = (MouseY-HoldScrollbarPos)/(Quad_Scrollbar.Size.Y-150)*Frame_Campaign_Menu.ScrollMax.Y;
}
else {
	if(Frame_Campaign_Menu.ScrollOffset != OldScrollOffset) {
		OldScrollOffset = Frame_Campaign_Menu.ScrollOffset;

		declare ScrollRatio = 0.;
		if(Frame_Campaign_Menu.ScrollMax.Y != 0)
			ScrollRatio = Frame_Campaign_Menu.ScrollOffset.Y / Frame_Campaign_Menu.ScrollMax.Y;
		Quad_Scrollbar.RelativePosition_V3.Y = -ScrollRatio*(150-Quad_Scrollbar.Size.Y);
	}

	HoldScrollbar = False;
}

if(Frame_Campaign_Menu.ScrollAnimOffset != OldScrollAnimOffset) {
	Frame_QuickMapInfo.RelativePosition_V3 += Frame_Campaign_Menu.ScrollAnimOffset - OldScrollAnimOffset;
	OldScrollAnimOffset = Frame_Campaign_Menu.ScrollAnimOffset;
}

UpdateQuickMapInfo(CurrentMapFocused);

if(RevealMapInfoTime != -1) {
	declare ClipSize = AnimLib::EaseOutQuad(Now - RevealMapInfoTime, 0., 156., 500);
	Frame_QuickMapInfo.ClipWindowSize = <ClipSize,ClipSize>;
}

if(ZoneSwitchTime == -1) {
	Frame_QuickMapInfo.GetFirstChild("QUAD_FLAG").Hide();
	Frame_QuickMapInfo.GetFirstChild("LABEL_ZONE").Hide();
}
else {
	declare Time = Now-ZoneSwitchTime;
	declare Fade = AnimLib::EaseInOutQuad(Time-2000, 1., -1., 500)+AnimLib::EaseInOutQuad(Time-2500, 0., 1., 500);
	//Frame_QuickMapInfo.GetFirstChild("FRAME_ZONE").RelativePosition_V3.X = (1-Fade)*30;
	Frame_QuickMapInfo.GetFirstChild("QUAD_FLAG").Visible = True;
	Frame_QuickMapInfo.GetFirstChild("LABEL_ZONE").Visible = True;
	(Frame_QuickMapInfo.GetFirstChild("QUAD_FLAG") as CMlQuad).Opacity = Fade;
	(Frame_QuickMapInfo.GetFirstChild("LABEL_ZONE") as CMlLabel).Opacity = Fade;

	if(!ZoneSwitched && Time >= 2500) {
		ZoneSwitched = True;

		if(ZoneCounter+1 >= SplittedZones.count)
			ZoneCounter = 0;
		else
			ZoneCounter += 1;

		declare Zone = TextLib::Split("|",LocalUser.ZonePath)[ZoneCounter];
		declare DisplayedZone = TextLib::ToUpperCase(Zone);
		if(TextLib::Length(DisplayedZone) > 10) DisplayedZone ^= " ";
		(Frame_QuickMapInfo.GetFirstChild("QUAD_FLAG") as CMlQuad).ChangeImageUrl("file://ZoneFlags/Path/"^SplittedZones[ZoneCounter]);
		(Frame_QuickMapInfo.GetFirstChild("LABEL_ZONE") as CMlLabel).SetText("|Zone|"^DisplayedZone);

		declare Label_RankCount = (Frame_QuickMapInfo.GetFirstChild("LABEL_RANK") as CMlLabel);
		declare ContentRank = Label_RankCount.DataAttributeGet("rank-"^SplittedZones[ZoneCounter]);
		declare ContentCount = Label_RankCount.DataAttributeGet("count-"^SplittedZones[ZoneCounter]);
		if(ContentRank == "" || TextLib::ToInteger(ContentRank) < 1) ContentRank = "?";
		if(ContentCount == "") ContentCount = "0";
		Label_RankCount.SetText(ContentRank^"/"^ContentCount);
	}

	if(Time > 3000) {
		ZoneSwitchTime = Now;
		ZoneSwitched = False;
	}
}

if(PreloadThumbnails) {
	PreloadTheThumbnails();
	PreloadThumbnails = False;
}

if(End != -1) {
	if(Now - End > 1000) {
		End = -1;
		SendCustomEvent("Hide_Response", []);
	}
}



if(Challenges.count > 1) {
	(Page.GetFirstChild("FRAME_CHALLENGE_CONTROL") as CMlFrame).GetFirstChild("FRAME_BACK").Show();
	(Page.GetFirstChild("FRAME_CHALLENGE_CONTROL") as CMlFrame).GetFirstChild("FRAME_NEXT").Show();
}
else {
	(Page.GetFirstChild("FRAME_CHALLENGE_CONTROL") as CMlFrame).GetFirstChild("FRAME_BACK").Hide();
	(Page.GetFirstChild("FRAME_CHALLENGE_CONTROL") as CMlFrame).GetFirstChild("FRAME_NEXT").Hide();
}

foreach(Control,Page.GetClassChildren_Result)
	Control.RelativeRotation += Period / 5.0;

//Frame_QuickMapInfo.ClipWindowRelativePosition.X = AnimLib::EaseOutQuad(Now - RevealMapInfoTime, -100., 122.5, 300);
***